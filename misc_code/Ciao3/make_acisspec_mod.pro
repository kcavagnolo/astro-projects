pro make_acisspec_mod
;-----------------------------------------------------------------------
;
; Name: MAKE_ACISSPEC_MOD
;
; Purpose: Makes a modified version of the ACISSPEC script for use with
;	   the pipeline.
;          
;          
; Inputs:  none
;         
;         
; Comments: 
;           
;           
; Revision history:
;       written by D&L, 2004-07-14
;-----------------------------------------------------------------------
;


;
; Open file
;
get_lun,unit
outfile='acisspec_mod'
openw,unit,outfile


;
; Write script
;
printf,unit,'#!/bin/sh'
printf,unit,'#'
printf,unit,'# acisspec_mod:  Modified version of acisspec.  Lines 857-859 and 865-867'
printf,unit,'# were removed to prevent acisspec from making weighted responses for'
printf,unit,'# the background regions, as these responses are not needed by the pipe-'
printf,unit,'# line. -- DR (2004-7-12)'
printf,unit,'#'
printf,unit,'# For more information on weighted spectral responses, see the thread:'
printf,unit,'# http://cxc.harvard.edu/ciao/threads/wresp_multiple_sources/'
printf,unit,'# or'
printf,unit,'# see the help file provided with this script, "acisspec.xml".'
printf,unit,'#'
printf,unit,'# A list of threads is available at:'
printf,unit,'#   http://cxc.harvard.edu/ciao/threads/'
printf,unit,'#'
printf,unit,'# This script requires its parameter file (acisspec.par) be available'
printf,unit,'# to the parameter system. '
printf,unit,'#'
printf,unit,'# Version: 2.2'
printf,unit,'# Date:    17 October 2001'
printf,unit,'#'
printf,unit,'# Version: 3'
printf,unit,'# Date:    8 November 2002'
printf,unit,'# Changes: included "exit" feature after each comand (if a tool fails, the '
printf,unit,'# script exits); changed the mkrmf input file, from '
printf,unit,'# "CALDB=(QUERY=CHANTYPE.EQ.PI)" to "CALDB", to reflect changes in ciao2.3; '
printf,unit,'# reintroduced ptype parameter. Changed the doc-file '
printf,unit,'# accordingly.    '
printf,unit,'#'
printf,unit,'# Version: 3.1'
printf,unit,'# Date:    18 November 2002'
printf,unit,'# Changes: fixed fatal syntax error.'
printf,unit,'# '
printf,unit,'# Version: 3.2'
printf,unit,'# Date:    31 July 2003'
printf,unit,'# Changes: Updated to account for the CIAO 3.0 changes to dmgroup parameters.'
printf,unit,'# Now uses xcolumn/ycolumn instead of bincolumn/column.'
printf,unit,'#'
printf,unit,'# Version: 3.3'
printf,unit,'# Date:    8 March 2004'
printf,unit,'# Changes: Updates to help file, script unchanged'
printf,unit,' '
printf,unit,'version_str="3.3"'
printf,unit,'version_date="8 March 2004"'
printf,unit,' '
printf,unit,'# Usage:'
printf,unit,'#   domsg $value $message_string'
printf,unit,'#'
printf,unit,'# echo the supplied text to STDOUT IF the global variable'
printf,unit,'# $verbose is > $value'
printf,unit,'#'
printf,unit,'# Example:'
printf,unit,'#   domsg "Extract background spectrum $bg from $bgevents"'
printf,unit,'#   domsg Extract background spectrum $bg from $bgevents'
printf,unit,'#'
printf,unit,' '
printf,unit,'# Usage:'
printf,unit,'#   docommand $command_string '
printf,unit,'#'
printf,unit,'# echo the command string to STDOUT - if the global variable'
printf,unit,'# $verbose is > 1 - and then execute the string. '
printf,unit,'#'
printf,unit,'# We check the exit status of the command, after it has run, and'
printf,unit,"# exit (with an error status of 1) if it isn't equal to 0"
printf,unit,'#'
printf,unit,'# Care needs to be taken over quoting characters, '
printf,unit,'# as shown in the examples below.'
printf,unit,'#'
printf,unit,'# Example:'
printf,unit,'#   verbose=2'
printf,unit,'#   docommand "dmstat evt2.fits'+"'[cols time]' sigma=no"+'"'
printf,unit,'#'
printf,unit,'#   fname="evt2.fits[cols time]"'
printf,unit,'#   docommand "dmstat \"$fname\""'
printf,unit,'#'
printf,unit,'#   fname="evt2.fits[cols time]"'
printf,unit,'#   docommand dmstat \"$fname\"'
printf,unit,'#'
printf,unit,'# To do:'
printf,unit,'#   could strip out the verbose=... parameter from the string before printing'
printf,unit,'#'
printf,unit,'docommand()'
printf,unit,'{'
printf,unit,'    comm=$@'
printf,unit,'    if [ $verbose -gt 1 ]; then'
printf,unit,'#	echo "Executing:"'
printf,unit,'#	echo ">> $comm"'
printf,unit,'	echo "$comm"'
printf,unit,'    fi'
printf,unit,'    eval $comm'
printf,unit,'    if [ $? != 0 ]; then'
printf,unit,'	echo " "'
printf,unit,'	echo "Error when running"'
printf,unit,'	echo "  $comm"'
printf,unit,'	echo " "'
printf,unit,'	exit 1'
printf,unit,'    fi'
printf,unit,'}'
printf,unit,' '
printf,unit,'# get_keyword file keyword'
printf,unit,'#'
printf,unit,"# runs 'dmkeypar file keyword >/dev/null 2>&1'"
printf,unit,'# and returns the value'
printf,unit,'#'
printf,unit,"# use foo='get_keyword file keyword' to get the value"
printf,unit,'# into a shell variable'
printf,unit,'#'
printf,unit,'get_keyword() {'
printf,unit,'  dmkeypar $1 $2 >/dev/null 2>&1'
printf,unit,'  echo `pget dmkeypar value`'
printf,unit,'}'
printf,unit,' '
printf,unit,'domsg() {'
printf,unit,'    vval=$1'
printf,unit,'    shift'
printf,unit,'    msg=$@'
printf,unit,'    if [ $verbose -gt $vval ]; then'
printf,unit,'	echo "$msg"'
printf,unit,'    fi'
printf,unit,'}'
printf,unit,' '
printf,unit,'filepath()'
printf,unit,'{'
printf,unit,'    if [ "$TMPDIR" = "NONE" ]; then'
printf,unit,'	echo "$1"'
printf,unit,'	return 0'
printf,unit,'    fi'
printf,unit,' '
printf,unit,'    if [ "$TMPDIR" = "" ]; then'
printf,unit,'	echo "$1"'
printf,unit,'	return 0'
printf,unit,'    fi'
printf,unit,' '
printf,unit,'    fc=`echo $1 | cut -c1`'
printf,unit,'    if [ "$fc" = "/" ]; then'
printf,unit,'	echo "$1"'
printf,unit,'    else'
printf,unit,'	echo "$TMPDIR/$1"'
printf,unit,'    fi'
printf,unit,'}'
printf,unit,' '
printf,unit,'getautopars()'
printf,unit,'{'
printf,unit,'    counter=0'
printf,unit,'    pfile=`paccess $prog`'
printf,unit,'    param_list=`cut -d, -f1 $pfile`'
printf,unit,'    acclist=`cut -d, -f3 $pfile`'
printf,unit,'    hidden_param_list=""'
printf,unit,'    auto_param_list=""'
printf,unit,'    nauto=0'
printf,unit,'    nc=1'
printf,unit,'    # count auto params'
printf,unit,'    # The acclist is a a a a h h'
printf,unit,'    # Advance by 2 chars each time'
printf,unit,'    #'
printf,unit,'    for param in $param_list'
printf,unit,'    do'
printf,unit,'	atmp=`echo $acclist | cut -c$nc`'
printf,unit,'	if [ "$atmp" = "a" ]; then'
printf,unit,'	    nauto=`expr $nauto + 1`'
printf,unit,'	    nc=`expr $nc + 2`'
printf,unit,'	    auto_param_list=`echo $auto_param_list $param`'
printf,unit,'	else'
printf,unit,'	    hidden_param_list=`echo $hidden_param_list $param`  '
printf,unit,'	fi'
printf,unit,'    done'
printf,unit,' '
printf,unit,'    #echo "NAUTO = $nauto"'
printf,unit,'    #echo auto params: $auto_param_list'
printf,unit,'    #echo hidden params: $hidden_param_list'
printf,unit,' '
printf,unit,'} # getautpars()'
printf,unit,' '
printf,unit,'getparams()'
printf,unit,'{'
printf,unit,'    enteredParamList=""'
printf,unit,'    getautopars'
printf,unit,' '
printf,unit,'    while [ $# -gt 0 ]; do'
printf,unit,'	#--- count the parameters in the command line'
printf,unit,'	counter=`expr $counter + 1`'
printf,unit,' '
printf,unit,"	with_param=`echo $1 | grep '\[.*='`"
printf,unit,'	if [ "$with_param" = "$1" ]; then  '
printf,unit,'	    # a parameter with DM filter present'
printf,unit,"	    with_params=`echo $1 | grep '=.*\['`"
printf,unit,' '
printf,unit,'	    if [ "$with_params" = "$1" ]; then '
printf,unit,'		# param name was specified'
printf,unit,"		param=`echo $1 | awk -F= '{print $1}'`"
printf,unit,"		value=`echo $1 | cut -f2- -d'='`"
printf,unit,'	    else     '
printf,unit,'		# param name not specified'
printf,unit,"		param=`echo $auto_param_list | cut -f$counter -d' '`"
printf,unit,'		value="$1"'
printf,unit,'	    fi'
printf,unit,' '
printf,unit,'	else    '
printf,unit,'	    # no DM filter present'
printf,unit,'	    with_params=`echo $1 | grep =`'
printf,unit,' '
printf,unit,'	    if [ "$with_params" = "$1" ]; then'
printf,unit,'		# param name was specified'
printf,unit,"		param=`echo $1 | awk -F= '{print $1}'`"
printf,unit,"		value=`echo $1 | cut -f2- -d'='`"
printf,unit,' '
printf,unit,'	    else     '
printf,unit,'		# param name not specified'
printf,unit,"		param=`echo $auto_param_list | cut -f$counter -d' '`"
printf,unit,'		value="$1"'
printf,unit,'	    fi'
printf,unit,'	fi'
printf,unit,' '
printf,unit,'	# if the param is not automatic, counter=(counter - 1)'
printf,unit,"	# UNLESS the user hasn't supplied a parameter name, which"
printf,unit,'	# is an error'
printf,unit,'	if [ "$param" = "" ]; then'
printf,unit,'	    echo "Problem opening parameter file: too many positional arguments"'
printf,unit,'	    exit'
printf,unit,'	fi'
printf,unit,' '
printf,unit,'	is_auto_par=`echo $auto_param_list | grep $param`'
printf,unit,'	if [ "$is_auto_par" = "" ]; then '
printf,unit,'	    #not an auto parameter'
printf,unit,'	    counter=`expr $counter - 1`'
printf,unit,'	else'
printf,unit,'	    # take out the name of the param from entered_param_list'
printf,unit,'	    for test_param in $param_list'
printf,unit,'	    do'
printf,unit,'		if [ "$test_param" = "$param" ]; then'
printf,unit,'		    entered_param_list=`echo $entered_param_list $test_param`'
printf,unit,'		fi'
printf,unit,'	    done'
printf,unit,'	fi '
printf,unit,' '
printf,unit,'	#  echo pset $prog ${param}="${value}"'
printf,unit,'	pset $prog ${param}="${value}"'
printf,unit,' '
printf,unit,'	# The multi-value parameters which are read in as quoted strings must'
printf,unit,'	# have their values re-quoted before feeding them to pset()'
printf,unit,'	shift'
printf,unit,' '
printf,unit,'    done'
printf,unit,' '
printf,unit,'    #echo "Auto entered = $entered_param_list"'
printf,unit,' '
printf,unit,'} # getparams()'
printf,unit,' '
printf,unit,'check_writeable()'
printf,unit,'{'
printf,unit,'    TMPDIR=.'
printf,unit,'    dummy=`(echo WTEST > .acheck.tst) 2>/dev/null`'
printf,unit,'    if [ -f .acheck.tst ]; then'
printf,unit,'	rm -f .acheck.tst'
printf,unit,'    else'
printf,unit,'	echo "No write permission to current directory: using /tmp"'
printf,unit,'	TMPDIR=/tmp'
printf,unit,'    fi'
printf,unit,'}'
printf,unit,' '
printf,unit,'# initialize'
printf,unit,'#'
printf,unit,'prog="acisspec"'
printf,unit,'pacc=`paccess $prog`'
printf,unit,'if [ "$pacc" = "" ]; then'
printf,unit,'    # Unable to find the parameter file, so we have to read ALL parameters'
printf,unit,'    # from the command line'
printf,unit,'    if [ $# -lt 19 ]; then'
printf,unit,'	echo "Syntax: $prog soufile1 bgfile1 soufile2 bgfile2 root souwmap1 bgwmap1 souwmap2 bgwmap2 binwmap ewmap weight1 weight2 gtype gspec bggtype bggspec verbose"'
printf,unit,'	exit'
printf,unit,'    fi'
printf,unit,'    soufile1=$1'
printf,unit,'    root=$2'
printf,unit,'    bgfile1=$3'
printf,unit,'    soufile2=$4'
printf,unit,'    bgfile2=$5'
printf,unit,'    souwmap1=$6'
printf,unit,'    bgwmap1=$7'
printf,unit,'    souwmap2=$8'
printf,unit,'    bgwmap2=$9'
printf,unit,'#    ptype=$10'
printf,unit,'    binwmap=$10'
printf,unit,'    ewmap=$11'
printf,unit,'    weight1=$12'
printf,unit,'    weight2=$13'
printf,unit,'    gtype=$14'
printf,unit,'    gspec=$15'
printf,unit,'    bggtype=$16'
printf,unit,'    bggspec=$17'
printf,unit,'    clobber=$18'
printf,unit,'    verbose=$19'
printf,unit,'else'
printf,unit,'    # parse the command line for parameters'
printf,unit,'    getparams $@'
printf,unit,'    i=1'
printf,unit,'    for param in $param_list'
printf,unit,'    do'
printf,unit,'	entered=`echo $entered_param_list | grep $param`'
printf,unit,'	if test "$entered" = ""'
printf,unit,'	then'
printf,unit,'	    tparam=`pquery $prog $param`'
printf,unit,'	else'
printf,unit,'	    tparam=`pget $prog $param`'
printf,unit,'	fi'
printf,unit,'	case $i in'
printf,unit,'	    1 ) soufile1=$tparam;;'
printf,unit,'	    2 ) root=$tparam;;'
printf,unit,'	    3 ) bgfile1=$tparam;;'
printf,unit,'	    4 ) soufile2=$tparam;;'
printf,unit,'	    5 ) bgfile2=$tparam;;'
printf,unit,'	    6 ) souwmap1=$tparam;;'
printf,unit,'	    7 ) bgwmap1=$tparam;;'
printf,unit,'	    8 ) souwmap2=$tparam;;'
printf,unit,'	    9 ) bgwmap2=$tparam;;'
printf,unit,'#	    10 ) ptype=$tparam;;'
printf,unit,'	    10 ) binwmap=$tparam;;'
printf,unit,'	    11 ) ewmap=$tparam;;'
printf,unit,'	    12 ) weight1=$tparam;;'
printf,unit,'	    13 ) weight2=$tparam;;'
printf,unit,'	    14 ) gtype=$tparam;;'
printf,unit,'	    15 ) gspec=$tparam;;'
printf,unit,'	    16 ) bggtype=$tparam;;'
printf,unit,'	    17 ) bggspec=$tparam;;'
printf,unit,'	    18 ) clobber=$tparam;;'
printf,unit,'	    19 ) verbose=$tparam;;'
printf,unit,'	    20 ) mode=$tparam;;'
printf,unit,'	    * ) echo "Unknown parameter $param";;'
printf,unit,'	esac'
printf,unit,'	i=`expr $i + 1`'
printf,unit,'# This is the only place we map the parameter file to script variables'
printf,unit,'    done'
printf,unit,'fi'
printf,unit,' '
printf,unit,'#*****************************************************************************'
printf,unit,' '
printf,unit,'domsg 2 " "'
printf,unit,'domsg 2 "Checking initial status and initializing variables..."'
printf,unit,' '
printf,unit,' '
printf,unit,'if [ "$root" = "" -o "$root" = "NONE" -o "$root" = "none" ]; then '
printf,unit,'    domsg 0 " "'
printf,unit,'    domsg 0 "Error. A rootname for the output files must be supplied."'
printf,unit,'    exit 1'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$soufile1" = "" -o "$soufile1" = "NONE" -o "$soufile1" = "none" ]; then '
printf,unit,'    domsg 0 " "'
printf,unit,'    domsg 0 "Error. A primary source file must be supplied"'
printf,unit,'    exit 1'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$soufile2" = "" -o "$soufile2" = "NONE" -o "$soufile2" = "none" ]; then '
printf,unit,'    soufile2="NONE" '
printf,unit,'    coadd="no"'
printf,unit,'else '
printf,unit,'    coadd="yes"'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$soufile1" = "$soufile2" ]; then'
printf,unit,'    echo ""'
printf,unit,'    echo "Error. $soufile1 and $soufile2 are the same." '
printf,unit,'    echo "If this is what you want, please rename one of the two files."'
printf,unit,'    exit 1 '
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bgfile1" = "" -o "$bgfile1" = "NONE" -o "$bgfile1" = "none" ]; then '
printf,unit,'    bgfile1="NONE"'
printf,unit,'    bgwmap1="NONE"'
printf,unit,'#    bgfile2="NONE"'
printf,unit,'#    bgwmap2="NONE"'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bgfile2" = "" -o "$bgfile2" = "NONE" -o "$bgfile2" = "none" ]; then '
printf,unit,'    bgfile2="NONE"'
printf,unit,'    bgwmap2="NONE"'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$coadd" = "yes" -a "$bgfile1" = "NONE" -a "$bgfile2" != "NONE" ]; then '
printf,unit,'    echo ""'
printf,unit,'    echo "Error. Primary and Secondary sources are present, but only secondary background have been input."'
printf,unit,'    exit 1'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$coadd" = "yes" -a "$bgfile2" = "NONE" -a "$bgfile1" != "NONE" ]; then '
printf,unit,'    echo ""'
printf,unit,'    echo "Error. Primary and Secondary sources are present, but only primary background have been input."'
printf,unit,'    exit 1'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bgfile1" = "$bgfile2" -a "$bgfile1" != "NONE" ]; then'
printf,unit,'    echo ""'
printf,unit,'    echo "Error. $bgfile1 and $bgfile2 are the same." '
printf,unit,'    echo "If this is what you want, please rename one of the two files."'
printf,unit,'    exit 1 '
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$souwmap1" = "" -o "$souwmap1" = "NONE" -o "$souwmap1" = "none" ]; then '
printf,unit,'    souwmap1="NONE"'
printf,unit,'fi'
printf,unit,'if [ "$souwmap2" = "" -o "$souwmap2" = "NONE" -o "$souwmap2" = "none" ]; then '
printf,unit,'    souwmap2="NONE"'
printf,unit,'fi'
printf,unit,'if [ "$bgwmap1" = "" -o "$bgwmap1" = "NONE" -o "$bgwmap1" = "none" ]; then '
printf,unit,'    bgwmap1="NONE"'
printf,unit,'fi'
printf,unit,'if [ "$bgwmap2" = "" -o "$bgwmap2" = "NONE" -o "$bgwmap2" = "none" ]; then '
printf,unit,'    bgwmap2="NONE"'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$souwmap1" = "$souwmap2" -a "$souwmap1" != "NONE" ]; then'
printf,unit,'    echo ""'
printf,unit,'    echo "Error. $souwmap1 and $souwmap2 are the same." '
printf,unit,'    echo "If this is what you want, please rename one of the two files."'
printf,unit,'    exit 1 '
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bgwmap1" = "$bgwmap2" -a "$bgwmap1" != "NONE" ]; then'
printf,unit,'    echo ""'
printf,unit,'    echo "Error. $bgwmap1 and $bgwmap2 are the same." '
printf,unit,'    echo "If this is what you want, please rename one of the two files."'
printf,unit,'    exit 1 '
printf,unit,'fi'
printf,unit,' '
printf,unit,'#***************************************************************************'
printf,unit,'# Force upper case'
printf,unit,'gtype=`echo $gtype | tr [:lower:] [:upper:]`'
printf,unit,'bggtype=`echo $bggtype | tr [:lower:] [:upper:]`'
printf,unit,'pver=$verbose'
printf,unit,'pverrid=`expr $pver - 2`'
printf,unit,'if [ $pverrid -lt 0 ]; then'
printf,unit,'    pverrid=0'
printf,unit,'fi'
printf,unit,' '
printf,unit,'#if [ "$ptype" = "pi" ]; then'
printf,unit,'    ptype=pi'
printf,unit,"    pibin='pi=1:1024:1'"
printf,unit,'#else'
printf,unit,"#    pibin='pha=1:4096:2'"
printf,unit,'#fi'
printf,unit,'egrid=0.3:11.0:0.01'
printf,unit,'ebin="energy=$egrid"'
printf,unit,'#'
printf,unit,' '
printf,unit,'#*********** CHECK WHETHER PRIMARY ARE EVENTS OR SPECTRA *****************'
printf,unit,'domsg 2 " "'
printf,unit,'domsg 2 "Checking whether primaries are events or spectra..."'
printf,unit,' '
printf,unit,'punlearn dmlist'
printf,unit,' '
printf,unit,'soutype1=`get_keyword $soufile1 HDUCLAS1`'
printf,unit,' '
printf,unit,'if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'    bgtype1=`get_keyword $bgfile1 HDUCLAS1`'
printf,unit,'fi '
printf,unit,'if [ "$soutype1" = "EVENTS" ]; then '
printf,unit,'    if [ "$souwmap1" = "NONE" ]; then '
printf,unit,'	domsg 0 " "'
printf,unit,'	domsg 0 "The primary source file is an events file, and no associated WMAP has been provided. Extracting spectrum and WMAP for the primary source"'
printf,unit,'	exsouspec1="yes"'
printf,unit,'	exsouwmap1="yes"'
printf,unit,'    else '
printf,unit,'	domsg 0 " "'
printf,unit,'	domsg 0 "The primary source file is an events file, and an associated WMAP has been provided. Extracting spectrum and using the input WMAP for the primary source"'
printf,unit,'	exsouspec1="yes"'
printf,unit,'	exsouwmap1="no"'
printf,unit,'    fi '
printf,unit,'else '
printf,unit,'    phapi=`get_keyword $soufile1 CHANTYPE`'
printf,unit,'    if [ "$phapi" = "PHA" ]; then'
printf,unit,'	domsg 0 " "'
printf,unit,'	domsg 0 "Error. Use of spectra binned in PHA space is not allowed." '
printf,unit,'	exit 1 '
printf,unit,'    fi'
printf,unit,'   if [ "$souwmap1" = "NONE" ]; then '
printf,unit,'    domsg 0 ""'
printf,unit,'    domsg 0 "Error. The primary source file is a spectrum, but no associated WMAP has been provided. If the WMAP is stored in the WMAP extension of the spectrum, please input it as a virtual file in the souwmap1 paramater"'
printf,unit,'    exit 1'
printf,unit,'   else'
printf,unit,'    domsg 0 " "'
printf,unit,'    domsg 0 "The primary source file is a spectrum, and an associated WMAP has been provided."'
printf,unit,'    exsouspec1="no"'
printf,unit,'    exsouwmap1="no"'
printf,unit,'#    ptype=pi'
printf,unit,'#   else '
printf,unit,'#	ptype=pha'
printf,unit,'#    fi'
printf,unit,'   fi'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'    if [ "$bgtype1" = "EVENTS" ]; then '
printf,unit,'	if [ "$bgwmap1" = "NONE" ]; then '
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "The primary background file is an events file, and no associated WMAP has been provided. Extracting spectrum and WMAP for the primary background"'
printf,unit,'	    exbgspec1="yes"'
printf,unit,'	    exbgwmap1="yes"'
printf,unit,'	else '
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "The primary background file is an events file, and an associated WMAP has been provided. Extracting spectrum and using the input WMAP for the primary background"'
printf,unit,'	    exbgspec1="yes"'
printf,unit,'	    exbgwmap1="no"'
printf,unit,'	fi '
printf,unit,'    else '
printf,unit,'	phapi=`get_keyword $bgfile1 CHANTYPE`'
printf,unit,'	if [ "$phapi" = "PHA" ]; then'
printf,unit,'	   domsg 0 " "'
printf,unit,'	   domsg 0 "Error. Use of spectra binned in PHA space is not allowed." '
printf,unit,'	   exit 1 '
printf,unit,'	fi'
printf,unit,'	if [ "$bgwmap1" = "NONE" ]; then '
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "Error. The primary background file is a spectrum, but no associated WMAP has been provided. If the WMAP is stored in the WMAP extension of the spectrum, please input it as a virtual file in the souwmap1 paramater"'
printf,unit,'	    exit 1'
printf,unit,'	else'
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "The primary background file is a spectrum, and an associated WMAP has been provided."'
printf,unit,'	    exbgspec1="no"'
printf,unit,'	    exbgwmap1="no"'
printf,unit,'#	    ptype=pi'
printf,unit,'#	    else '
printf,unit,'#		ptype=pha'
printf,unit,'#	    fi'
printf,unit,'	fi'
printf,unit,'    fi'
printf,unit,'else '
printf,unit,'    exbgspec1="no"'
printf,unit,'    exbgwmap1="no"'
printf,unit,'fi'
printf,unit,' '
printf,unit,'#****************** CHECK WHETHER SECONDARY ARE PRESENT OR NOT **********'
printf,unit,' '
printf,unit,'if [ "$soufile2" = "" -o "$soufile2" = "NONE" -o "$soufile2" = "none" ]; then'
printf,unit,'    bgfile2="NONE"'
printf,unit,'    coadd="no"'
printf,unit,'    sou="sou"'
printf,unit,'    bgd="bgd"'
printf,unit,'    domsg 0 " "'
printf,unit,'    domsg 0 "No secondary source file has been provided. Ignoring any secondary background file, and any associated WMAP" '
printf,unit,'else'
printf,unit,'    coadd="yes"'
printf,unit,'    sou="sou12"'
printf,unit,'    bgd="bgd12"'
printf,unit,'    if [ "$bgfile2" != "NONE" ]; then '
printf,unit,'	domsg 0 " "'
printf,unit,'	domsg 0 "Secondary source and background files have been detected" '
printf,unit,'    else '
printf,unit,'	domsg 0 " "'
printf,unit,'	domsg 0 "Secondary source files have been detected" '
printf,unit,'    fi'
printf,unit,'#**SECONDARY ARE PRESENT: THEN CHECK WHETHER SECONDARY ARE EVENTS OR SPECTRA *'
printf,unit,' '
printf,unit,'    soutype2=`get_keyword $soufile2 HDUCLAS1`'
printf,unit,'    if [ "$bgfile2" != "NONE" ]; then '
printf,unit,'	bgtype2=`get_keyword $bgfile2 HDUCLAS1`'
printf,unit,'    fi'
printf,unit,'    if [ "$soutype2" = "EVENTS" ]; then '
printf,unit,'	if [ "$souwmap2" = "NONE" ]; then '
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "The secondary source file is an events file, and no associated WMAP has been provided. Extracting spectrum and WMAP for the secondary source"'
printf,unit,'	    exsouspec2="yes"'
printf,unit,'	    exsouwmap2="yes"'
printf,unit,'	else '
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "The secondary source file is an events file, and an associated WMAP has been provided. Extracting spectrum and using the input WMAP for the secondary source"'
printf,unit,'	    exsouspec2="yes"'
printf,unit,'	    exsouwmap2="no"'
printf,unit,'	fi '
printf,unit,'    else '
printf,unit,'	phapi=`get_keyword $soufile2 CHANTYPE`'
printf,unit,'	if [ "$phapi" = "PHA" ]; then'
printf,unit,'	   domsg 0 " "'
printf,unit,'	   domsg 0 "Error. Use of spectra binned in PHA space is not allowed." '
printf,unit,'	   exit 1 '
printf,unit,'	fi'
printf,unit,'	if [ "$souwmap2" = "NONE" ]; then '
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "Error. The secondary source file is a spectrum, but no associated WMAP has been provided. If the WMAP is stored in the WMAP extension of the spectrum, please input it as a virtual file in the souwmap2 paramater"'
printf,unit,'	    exit 1'
printf,unit,'	else'
printf,unit,'	    domsg 0 " "'
printf,unit,'	    domsg 0 "The secondary source file is a spectrum, and an associated WMAP has been provided."'
printf,unit,'	    exsouspec2="no"'
printf,unit,'	    exsouwmap2="no"'
printf,unit,'#	    ptype=pi'
printf,unit,'#	    else '
printf,unit,'#		ptype=pha'
printf,unit,'#	    fi'
printf,unit,' '
printf,unit,'	fi'
printf,unit,'    fi'
printf,unit,' '
printf,unit,'    if [ "$bgfile2" != "NONE" ]; then '
printf,unit,'	if [ "$bgtype2" = "EVENTS" ]; then '
printf,unit,'	    if [ "$bgwmap2" = "NONE" ]; then '
printf,unit,'		domsg 0 " "'
printf,unit,'		domsg 0 "The secondary background file is an events file, and no associated WMAP has been provided. Extracting spectrum and WMAP for the secondary background"'
printf,unit,'		exbgspec2="yes"'
printf,unit,'		exbgwmap2="yes"'
printf,unit,'	    else'
printf,unit,'		domsg 0 " "'
printf,unit,'		domsg 0 "The secondary background file is an events file, and an associated WMAP has been provided. Extracting spectrum and using the input WMAP for the secondary background"'
printf,unit,'		exbgspec2="yes"'
printf,unit,'		exbgwmap2="no"'
printf,unit,'	    fi '
printf,unit,'	else '
printf,unit,'	    phapi=`get_keyword $bgfile2 CHANTYPE`'
printf,unit,'	    if [ "$phapi" = "PHA" ]; then'
printf,unit,'	      domsg 0 " "'
printf,unit,'	      domsg 0 "Error. Use of spectra binned in PHA space is not allowed." '
printf,unit,'	      exit 1 '
printf,unit,'	    fi'
printf,unit,'	    if [ "$bgwmap2" = "NONE" ]; then '
printf,unit,'		domsg 0 " "'
printf,unit,'		domsg 0 "Error. The secondary background file is a spectrum, but no associated WMAP has been provided. If the WMAP is stored in the WMAP extension of the spectrum, please input it as a virtual file in the bgwmap2 paramater"'
printf,unit,'		exit 1'
printf,unit,'	    else'
printf,unit,'		domsg 0 " "'
printf,unit,'		domsg 0 "The secondary background file is a spectrum, and an associated WMAP has been provided."'
printf,unit,'		exbgspec2="no"'
printf,unit,'		exbgwmap2="no"'
printf,unit,'#	    ptype=pi'
printf,unit,'#		else '
printf,unit,'#		    ptype=pha'
printf,unit,'#		fi'
printf,unit,'	    fi'
printf,unit,'	fi '
printf,unit,'    else'
printf,unit,'	exbgspec2="no"'
printf,unit,'	exbgwmap2="no"'
printf,unit,'    fi'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$gtype" = "" -o "$gtype" = "NONE" ]; then '
printf,unit,'    gtype="NONE"'
printf,unit,'fi'
printf,unit,'if [ "$bggtype" = "" -o "$bggtype" = "NONE" -o "$bgfile1" = "NONE" ]; then '
printf,unit,'    bggtype="NONE"'
printf,unit,'fi'
printf,unit,' '
printf,unit,' '
printf,unit,'if [ -f ${root}_${sou}.${ptype} -a "$clobber" = "no" ]; then'
printf,unit,'  echo "Error.  File ${root}_${sou}.${ptype} exists, and clobber=$clobber."'
printf,unit,'  exit 1'
printf,unit,'fi '
printf,unit,' '
printf,unit,'#echo "$coadd, $sou, $bgd"'
printf,unit,' '
printf,unit,'punlearn dmextract'
printf,unit,'if [ "$soutype1" = "EVENTS" ]; then '
printf,unit,'docommand dmextract infile=\"$soufile1\[bin $ptype\]\" outfile=\"${root}_sou1.${ptype}\" clobber=$clobber'
printf,unit,' '
printf,unit,'    if [ "$coadd" != "yes" ]; then '
printf,unit,'	/bin/cp -f "${root}_sou1.${ptype}" "${root}_${sou}.${ptype}"'
printf,unit,'    fi'
printf,unit,'else'
printf,unit,'    if [ "$coadd" = "yes" ]; then '
printf,unit,'	/bin/cp -f "$soufile1" "${root}_sou1.${ptype}"'
printf,unit,'    else'
printf,unit,'	/bin/cp -f "$soufile1" "${root}_${sou}.${ptype}"'
printf,unit,'    fi'
printf,unit,'fi '
printf,unit,' '
printf,unit,'if [ "$coadd" = "yes" -a "$soutype2" = "EVENTS" ]; then'
printf,unit,'docommand dmextract infile=\"$soufile2\[bin pi\]\" outfile=\"${root}_sou2.${ptype}\" clobber=$clobber'
printf,unit,'elif [ "$coadd" = "yes" -a "$soutype2" != "EVENTS" ]; then'
printf,unit,'    /bin/cp -f "$soufile2" "${root}_sou2.${ptype}"'
printf,unit,'#    echo "2"'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'    if [ "$bgtype1" = "EVENTS" ]; then '
printf,unit,'    docommand dmextract infile=\"$bgfile1\[bin pi\]\" outfile=\"${root}_bgd1.${ptype}\" clobber=$clobber'
printf,unit,'	if [ "$coadd" != "yes" ]; then '
printf,unit,'	    /bin/cp "${root}_bgd1.${ptype}" "${root}_${bgd}.${ptype}"'
printf,unit,'	fi	'
printf,unit,'    else'
printf,unit,'	if [ "$coadd" = "yes" ]; then '
printf,unit,'	    /bin/cp -f "$bgfile1" "${root}_bgd1.${ptype}"'
printf,unit,'	else '
printf,unit,'	    /bin/cp -f "$bgfile1" "${root}_${bgd}.${ptype}"'
printf,unit,'	fi'
printf,unit,'    #    echo "3"'
printf,unit,'    fi '
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bgfile2" != "NONE" ]; then '
printf,unit,'    if [ "$coadd" = "yes" -a "$bgtype2" = "EVENTS" ]; then '
printf,unit,'    docommand dmextract infile=\"$bgfile2\[bin pi\]\" outfile=\"${root}_bgd2.${ptype}\" clobber=$clobber'
printf,unit,'    #echo $bgfile'
printf,unit,'    elif [ "$coadd" = "yes" -a "$bgtype2" != "EVENTS" ]; then '
printf,unit,'	/bin/cp -f "$bgfile2" "${root}_bgd2.${ptype}"'
printf,unit,'    #    echo "4"'
printf,unit,'    fi'
printf,unit,'fi '
printf,unit,' '
printf,unit,'#echo $exsouwmap1'
printf,unit,'punlearn dmcopy'
printf,unit,'if [ "$exsouwmap1" = "yes" ]; then '
printf,unit,'    docommand dmcopy \"$soufile1\[energy=$ewmap\]\[bin $binwmap\]\" outfile=\"${root}_sou1.wmap_tmp\" clobber=$clobber'
printf,unit,'    if [ "$coadd" != "yes" ]; then '
printf,unit,'	/bin/cp -f "${root}_sou1.wmap_tmp" "${root}_${sou}.wmap"'
printf,unit,'    fi'
printf,unit,'else'
printf,unit,'    if [ "$coadd" = "yes" ]; then '
printf,unit,'	/bin/cp -f "$souwmap1" "${root}_sou1.wmap_tmp"'
printf,unit,'#	echo "5"'
printf,unit,'    else '
printf,unit,'	/bin/cp -f "$souwmap1" "${root}_${sou}.wmap"'
printf,unit,'#	echo "6"'
printf,unit,'    fi'
printf,unit,'fi'
printf,unit,'if [ "$coadd" = "yes" -a "$exsouwmap2" = "yes" ]; then '
printf,unit,'    docommand dmcopy \"$soufile2\[energy=$ewmap\]\[bin $binwmap\]\" outfile=\"${root}_sou2.wmap_tmp\" clobber=$clobber'
printf,unit,'elif [ "$coadd" = "yes" -a "$exsouwmap2" != "yes" ]; then '
printf,unit,'    /bin/cp -f "$souwmap2" "${root}_sou2.wmap_tmp"'
printf,unit,'#    echo "7"'
printf,unit,'fi'
printf,unit,'if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'    if [ "$exbgwmap1" = "yes" ]; then '
printf,unit,'	docommand dmcopy \"$bgfile1\[energy=$ewmap\]\[bin $binwmap\]\" outfile=\"${root}_bgd1.wmap_tmp\" clobber=$clobber'
printf,unit,'	if [ "$coadd" != "yes" ]; then '
printf,unit,'	    /bin/cp -f "${root}_bgd1.wmap_tmp" "${root}_${bgd}.wmap"'
printf,unit,'	fi'
printf,unit,'    else'
printf,unit,'	if [ "$coadd" = "yes" ]; then '
printf,unit,'	    /bin/cp -f "$bgwmap1" "${root}_bgd1.wmap_tmp"'
printf,unit,'    #	echo "8"'
printf,unit,'	else '
printf,unit,'	    /bin/cp -f "$bgwmap1" "${root}_${bgd}.wmap"'
printf,unit,'    #	echo "9"'
printf,unit,'	fi'
printf,unit,'    fi'
printf,unit,'fi '
printf,unit,'if [ "$bgfile2" != "NONE" ]; then '
printf,unit,'    if [ "$coadd" = "yes" -a "$exbgwmap2" = "yes" ]; then '
printf,unit,'	docommand dmcopy \"$bgfile2\[energy=$ewmap\]\[bin $binwmap\]\" outfile=\"${root}_bgd2.wmap_tmp\" clobber=$clobber'
printf,unit,'    elif [ "$coadd" = "yes" -a "$exbgwmap2" != "yes" ]; then '
printf,unit,'	/bin/cp -f "$bgwmap2" "${root}_bgd2.wmap_tmp"'
printf,unit,'    #    echo "10"'
printf,unit,'    fi'
printf,unit,'fi '
printf,unit,'#HERE'
printf,unit,' '
printf,unit,'if [ "$coadd" = "yes" ]; then '
printf,unit,'    expsou1=`get_keyword ${root}_sou1.${ptype} EXPOSURE`'
printf,unit,'    expsou2=`get_keyword ${root}_sou2.${ptype} EXPOSURE`'
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	expbgd1=`get_keyword ${root}_bgd1.${ptype} EXPOSURE`'
printf,unit,'	expbgd2=`get_keyword ${root}_bgd2.${ptype} EXPOSURE`'
printf,unit,'    fi'
printf,unit,'#    echo "$expsou1, $expsou2, $expbgd1, $expbgd2"'
printf,unit,''
printf,unit,'    if [ "$expsou1" != "$expsou2" ]; then '
printf,unit,'	expsou=`echo "$expsou1 + $expsou2" | bc`'
printf,unit,'    else'
printf,unit,'	expsou=$expsou1'
printf,unit,'    fi'
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	if [ "$expbgd1" != "$expbgd2" ]; then '
printf,unit,'	    expbgd=`echo "$expbgd1 + $expbgd2" | bc`'
printf,unit,'	else'
printf,unit,'	    expbgd=$expbgd1'
printf,unit,'        fi'
printf,unit,'    fi'
printf,unit,'#    echo "$expsou, $expbgd"'
printf,unit,' '
printf,unit,'    expsou1fac=`echo "scale=6; $expsou1/$expsou" | bc` '
printf,unit,'    expsou2fac=`echo "scale=6; $expsou2/$expsou" | bc`'
printf,unit,'    expsou1fac=`expr "0$expsou1fac"`'
printf,unit,'    expsou2fac=`expr "0$expsou2fac"`'
printf,unit,' '
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	expbgd1fac=`echo "scale=6; $expbgd1/$expbgd" | bc` '
printf,unit,'	expbgd2fac=`echo "scale=6; $expbgd2/$expbgd" | bc`'
printf,unit,'	expbgd1fac=`expr "0$expbgd1fac"`'
printf,unit,'	expbgd2fac=`expr "0$expbgd2fac"`'
printf,unit,'    fi '
printf,unit,' '
printf,unit,'#    echo "$expsou1fac, $expsou2fac, $expbgd1fac, $expbgd2fac"'
printf,unit,' '
printf,unit,"#    echo 'a'"
printf,unit,'    backscsou1=`get_keyword ${root}_sou1.${ptype} BACKSCAL`'
printf,unit,"#    echo 'b'"
printf,unit,'    backscsou2=`get_keyword ${root}_sou2.${ptype} BACKSCAL`'
printf,unit,' '
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,"#    echo 'c'"
printf,unit,'	backscbgd1=`get_keyword ${root}_bgd1.${ptype} BACKSCAL`'
printf,unit,"#	echo 'd'"
printf,unit,'	backscbgd2=`get_keyword ${root}_bgd2.${ptype} BACKSCAL`'
printf,unit,' '
printf,unit,'#    echo "$backscsou1, $backscsou2, $backscbgd1, $backscbgd2"'
printf,unit,' '
printf,unit,'	backscbgd=`echo "$expsou $expsou1 $backscsou1 $backscbgd1 $expsou2 $backscsou2 $backscbgd2" | awk '+"'"+'{ printf "%.6e", $1/($2*($3/$4) + $5*($6/$7)); }'+"'"+' -`'
printf,unit,' '
printf,unit,"#	echo 'e'"
printf,unit,'#	echo "$backscbgd"'
printf,unit,'    fi'
printf,unit,'    backscsou=1.0'
printf,unit,' '
printf,unit,'#    echo "$backscsou, $backscbgd"'
printf,unit,' '
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	f1=`echo "$backscbgd $expbgd $expsou $expsou1 $expbgd1 $backscsou1 $backscbgd1" | awk '+"'"+'{printf "%.6e", $1*($2/$3)*($4/$5)*($6/$7); }'+"'"+' -`'
printf,unit,"	f1=`printf '%7.5f \n' $f1`"
printf,unit,'	f2=`echo "$backscbgd $expbgd $expsou $expsou2 $expbgd2 $backscsou2 $backscbgd2" | awk '+"'"+'{printf "%.6e", $1*($2/$3)*($4/$5)*($6/$7); }'+"'"+' -`'
printf,unit,"	f2=`printf '%7.5f \n' $f2`"
printf,unit,'#    echo "$f1, $f2"'
printf,unit,' '
printf,unit,'#	if [ $f1 -lt 1 ]; then '
printf,unit,'#	  f1=`expr "0$f1"`'
printf,unit,'#	fi '
printf,unit,'#	if [ $f2 -lt 1 ]; then '
printf,unit,'#	  f2=`expr "0$f2"`'
printf,unit,'#	fi '
printf,unit,'    fi'
printf,unit,' '
printf,unit,'#    echo $f1, $f2'
printf,unit,' '
printf,unit,'    punlearn dmtcalc'
printf,unit,'#    echo "1"'
printf,unit,'    dmtcalc infile=${root}_sou1.${ptype} outfile=${root}_sou1.${ptype}_tmp expression="COUNTS_1=$weight1*COUNTS;STAT_ERR_1=$weight1*(1+sqrt(COUNTS+0.75))" kernel=default clobber=$clobber verbose=0 mode=ql'
printf,unit,' '
printf,unit,'#    echo "2"'
printf,unit,'    dmtcalc infile=${root}_sou2.${ptype} outfile=${root}_sou2.${ptype}_tmp expression="COUNTS_2=$weight2*COUNTS;STAT_ERR_2=$weight2*(1+sqrt(COUNTS+0.75))" kernel=default clobber=$clobber verbose=0 mode=ql'
printf,unit,' '
printf,unit,'#    echo "3"'
printf,unit,'    docommand dmpaste infile=\"${root}_sou1.${ptype}_tmp\[SPECTRUM\]\[cols CHANNEL,PI,COUNTS_1,STAT_ERR_1\]\" pastefile=\"${root}_sou2.${ptype}_tmp\[SPECTRUM\]\[cols COUNTS_2,STAT_ERR_2\]\" outfile=${root}_${sou}.${ptype}_tmp clobber=$clobber verbose=0 kernel=default mode=ql'
printf,unit,' '
printf,unit,'#    echo "4"'
printf,unit,'    dmtcalc infile=${root}_${sou}.${ptype}_tmp outfile=${root}_${sou}.${ptype}_tmp2 expression="COUNTS=COUNTS_1+COUNTS_2;STAT_ERR=STAT_ERR_1+STAT_ERR_2;COUNT_RATE=COUNTS/$expsou" kernel=default clobber=$clobber verbose=0 mode=ql'
printf,unit,' '
printf,unit,'    docommand dmcopy infile=\"${root}_${sou}.${ptype}_tmp2\[cols CHANNEL, PI, COUNTS, STAT_ERR, COUNT_RATE\]\" outfile=${root}_${sou}.${ptype} clobber=$clobber'
printf,unit,'  '
printf,unit,'#    echo "5"'
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	dmtcalc infile=${root}_bgd1.${ptype} outfile=${root}_bgd1.${ptype}_tmp expression="COUNTS_1=($f1*$weight1*COUNTS);STAT_ERR_1=($f1*$weight1*(1+sqrt(COUNTS+0.75)))" kernel=default clobber=$clobber verbose=0 mode=ql'
printf,unit,' '
printf,unit,'#    echo "6"'
printf,unit,'	dmtcalc infile=${root}_bgd2.${ptype} outfile=${root}_bgd2.${ptype}_tmp expression="COUNTS_2=($f2*$weight2*COUNTS);STAT_ERR_2=($f2*$weight2*(1+sqrt(COUNTS+0.75)))" kernel=default clobber=$clobber verbose=0 mode=ql'
printf,unit,' '
printf,unit,'#    echo "7"'
printf,unit,'	docommand dmpaste infile=\"${root}_bgd1.${ptype}_tmp\[SPECTRUM\]\[cols CHANNEL,PI,COUNTS_1,STAT_ERR_1\]\" pastefile=\"${root}_bgd2.${ptype}_tmp\[SPECTRUM\]\[cols COUNTS_2,STAT_ERR_2\]\" outfile=${root}_${bgd}.${ptype}_tmp clobber=$clobber verbose=0 kernel=default mode=ql'
printf,unit,' '
printf,unit,'#    echo "8"'
printf,unit,'	dmtcalc infile=${root}_${bgd}.${ptype}_tmp outfile=${root}_${bgd}.${ptype}_tmp2 expression="COUNTS=COUNTS_1+COUNTS_2;STAT_ERR=STAT_ERR_1+STAT_ERR_2;COUNT_RATE=COUNTS/$expbgd" kernel=default clobber=$clobber verbose=0 mode=ql'
printf,unit,' '
printf,unit,'	docommand dmcopy infile=\"${root}_${bgd}.${ptype}_tmp2\[cols CHANNEL, PI, COUNTS, STAT_ERR, COUNT_RATE\]\" outfile=\"${root}_${bgd}.${ptype}\" clobber=$clobber'
printf,unit,'    fi'
printf,unit,' '
printf,unit,'#    echo "9"'
printf,unit,'    punlearn dmimgcalc'
printf,unit,'    dmimgcalc infile=${root}_sou1.wmap_tmp infile2=${root}_sou2.wmap_tmp outfile=${root}_${sou}.wmap operation=add weight=$weight1 weight2=$weight2 clobber=$clobber'
printf,unit,'#    echo "10"'
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	dmimgcalc infile=${root}_bgd1.wmap_tmp infile2=${root}_bgd2.wmap_tmp outfile=${root}_${bgd}.wmap operation=add weight=$weight1 weight2=$weight2 clobber=$clobber'
printf,unit,'    fi'
printf,unit,'fi'
printf,unit,' '
printf,unit,'#    echo "11"'
printf,unit,'domsg 0 " "'
printf,unit,'punlearn mkwarf'
printf,unit,'docommand mkwarf infile=${root}_${sou}.wmap outfile=${root}_${sou}.warf weightfile=${root}_${sou}.wfef spectrumfile=\"\" egridspec=\"0.3:11:0.01\" clobber=$clobber'
printf,unit,' '
printf,unit,'domsg 0 " "'
printf,unit,'#if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'#    docommand mkwarf infile=${root}_${bgd}.wmap outfile=${root}_${bgd}.warf weightfile=${root}_${bgd}.wfef spectrumfile=\"\" egridspec=\"0.3:11:0.01\" clobber=$clobber'
printf,unit,'#fi '
printf,unit,' '
printf,unit,'punlearn mkrmf'
printf,unit,'logfile=`filepath .psp.mlog`'
printf,unit,'docommand mkrmf infile=\"CALDB\" outfile=${root}_${sou}.wrmf axis1=$ebin axis2=$pibin logfile=$logfile weights=${root}_${sou}.wfef clobber=$clobber verbose=$verbose'
printf,unit,' '
printf,unit,'#if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'#    docommand mkrmf infile=\"CALDB\" outfile=${root}_${bgd}.wrmf axis1=$ebin axis2=$pibin logfile=$logfile weights=${root}_${bgd}.wfef clobber=$clobber verbose=$verbose'
printf,unit,'#fi '
printf,unit,' '
printf,unit,'#echo "1"'
printf,unit,' '
printf,unit,'tabcolumn=""'
printf,unit,'tabspec=""'
printf,unit,'col="counts"'
printf,unit,'bincol="channel"'
printf,unit,'if [ "$gtype" = "NONE" ]; then '
printf,unit,'    dogroup=0'
printf,unit,'else'
printf,unit,'    dogroup=1'
printf,unit,'    if [ "$gtype" = "BIN" ]; then'
printf,unit,'	binspec="$gspec"'
printf,unit,'	gval=""'
printf,unit,'    else'
printf,unit,'	binspec=""'
printf,unit,'	gval="$gspec"'
printf,unit,'    fi'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ "$bggtype" = "NONE" ]; then '
printf,unit,'    bgdogroup=0'
printf,unit,'else'
printf,unit,'    bgdogroup=1'
printf,unit,'    if [ "$bggtype" = "BIN" ]; then'
printf,unit,'	bgbinspec="$bggspec"'
printf,unit,'	bggval=""'
printf,unit,'    else'
printf,unit,'	bgbinspec=""'
printf,unit,'	bggval="$bggspec"'
printf,unit,'    fi'
printf,unit,'fi'
printf,unit,' '
printf,unit,'#echo "2"'
printf,unit,' '
printf,unit,'if [ "$dogroup" = "1" ]; then'
printf,unit,'    punlearn dmgroup'
printf,unit,'    gtmp=`filepath $root.tmp`'
printf,unit,'    domsg 0 " "'
printf,unit,'    domsg 0 "Group source spectrum using $gtype $gspec"'
printf,unit,'    docommand dmgroup infile=\"${root}_${sou}.${ptype}\[cols CHANNEL, PI, COUNTS, STAT_ERR, COUNT_RATE\]\" outfile=$gtmp \'
printf,unit,'    binspec=$binspec tabspec=$tabspec grouptype=$gtype grouptypeval=$gval \'
printf,unit,'    ycolumn=$col xcolumn=$bincol tabcolumn=$tabcolumn clobber=$clobber \'
printf,unit,'    verbose=$pverrid'
printf,unit,'    rm -f ${root}_${sou}.${ptype}'
printf,unit,'    mv $gtmp ${root}_${sou}.${ptype}'
printf,unit,'    domsg 1 "Source spectrum ${root}_${sou}.${ptype} has been grouped"'
printf,unit,'else'
printf,unit,'    domsg 1 "No grouping selected for the source(s)"'
printf,unit,'fi'
printf,unit,' '
printf,unit,'#echo "3"'
printf,unit,' '
printf,unit,'if [ "$bgdogroup" = "1" ]; then'
printf,unit,'    punlearn dmgroup'
printf,unit,'    gtmp=`filepath $root.tmp`'
printf,unit,'    domsg 0 " "'
printf,unit,'    domsg 0 "Group background spectrum using $bggtype $bggspec"'
printf,unit,'    docommand dmgroup infile=\"${root}_${bgd}.${ptype}\[cols CHANNEL, PI, COUNTS, STAT_ERR, COUNT_RATE\]\" outfile=$gtmp \'
printf,unit,'    binspec=$bgbinspec tabspec=$tabspec grouptype=$bggtype \'
printf,unit,'    grouptypeval=$bggval ycolumn=$col xcolumn=$bincol tabcolumn=$tabcolumn \'
printf,unit,'    clobber=$clobber verbose=$pverrid'
printf,unit,'    rm -f ${root}_${bgd}.${ptype}'
printf,unit,'    mv $gtmp ${root}_${bgd}.${ptype}'
printf,unit,'    domsg 1 "Background spectrum ${root}_${bgd}.${ptype} has been grouped"'
printf,unit,'else'
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	domsg 1 "No grouping selected for the background(s)"'
printf,unit,'    fi'
printf,unit,'fi'
printf,unit,' '
printf,unit,'#echo "4"'
printf,unit,' '
printf,unit,'punlearn dmhedit'
printf,unit,'if [ "$coadd" = "yes" ]; then '
printf,unit,'    domsg 1 " "'
printf,unit,'    domsg 1 "Updating PHA files ${root}_${sou}.${ptype} and ${root}_${bgd}.${ptype} with EXPOSURE BACKSCAL keys"'
printf,unit,'    docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=EXPOSURE value=$expsou filelist=\"\"'
printf,unit,'    docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=BACKSCAL value=$backscsou filelist=\"\"'
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	docommand dmhedit infile=${root}_${bgd}.${ptype} operation=add key=EXPOSURE value=$expbgd filelist=\"\"'
printf,unit,'	docommand dmhedit infile=${root}_${bgd}.${ptype} operation=add key=BACKSCAL value=$backscbgd filelist=\"\"'
printf,unit,'    fi'
printf,unit,'    domsg 1 " "'
printf,unit,'    domsg 1 "Updating PHA file ${root}_${sou}.${ptype} with BACKFILE RESPFILE ANCRFILE keys"'
printf,unit,'    if [ "$bgfile1" != "NONE" -a "$bgdogroup" = "0" ]; then'
printf,unit,'	docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=BACKFILE value=${root}_${bgd}.${ptype} filelist=\"\"'
printf,unit,'    fi'
printf,unit,'    docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=RESPFILE value=${root}_${sou}.wrmf filelist=\"\"'
printf,unit,'    docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=ANCRFILE value=${root}_${sou}.warf filelist=\"\"'
printf,unit,'    '
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	if [ "$bgdogroup" = "1" ]; then '
printf,unit,'	    domsg 1 " "'
printf,unit,'	    domsg 1 "Updating PHA file ${root}_${bgd}.${ptype} with RESPFILE ANCRFILE keys"'
printf,unit,'	    docommand dmhedit infile=${root}_${bgd}.${ptype} operation=add key=RESPFILE value=${root}_${bgd}.wrmf filelist=\"\"'
printf,unit,'	    docommand dmhedit infile=${root}_${bgd}.${ptype} operation=add key=ANCRFILE value=${root}_${bgd}.warf filelist=\"\"'
printf,unit,'	fi'
printf,unit,'    fi '
printf,unit,'else'
printf,unit,' '
printf,unit,'    domsg 1 " "'
printf,unit,'    domsg 1 "Updating PHA file ${root}_${sou}.${ptype} with BACKFILE RESPFILE ANCRFILE keys"'
printf,unit,'    if [ "$bgfile1" != "NONE" -a "$bgdogroup" = "0" ]; then'
printf,unit,'	docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=BACKFILE value=${root}_${bgd}.${ptype} filelist=\"\"'
printf,unit,'    fi'
printf,unit,'    docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=RESPFILE value=${root}_${sou}.wrmf filelist=\"\"'
printf,unit,'    docommand dmhedit infile=${root}_${sou}.${ptype} operation=add key=ANCRFILE value=${root}_${sou}.warf filelist=\"\"'
printf,unit,'    '
printf,unit,'    if [ "$bgfile1" != "NONE" ]; then '
printf,unit,'	if [ "$bgdogroup" = "1" ]; then '
printf,unit,'	    domsg 1 " "'
printf,unit,'	    domsg 1 "Updating PHA file ${root}_${bgd}.${ptype} with BACKFILE RESPFILE ANCRFILE keys"'
printf,unit,'	    docommand dmhedit infile=${root}_${bgd}.${ptype} operation=add key=RESPFILE value=${root}_${bgd}.wrmf filelist=\"\"'
printf,unit,'	    docommand dmhedit infile=${root}_${bgd}.${ptype} operation=add key=ANCRFILE value=${root}_${bgd}.warf filelist=\"\"'
printf,unit,'	fi'
printf,unit,'    fi'
printf,unit,'fi'
printf,unit,' '
printf,unit,'domsg 5 "Cleaning up..."'
printf,unit,' '
printf,unit,'tmpfiles=`ls ${root}*.wfef`'
printf,unit,'if [ "$tmpfiles" != "" ]; then '
printf,unit,'    /bin/rm ${root}*.wfef'
printf,unit,'fi'
printf,unit,' '
printf,unit,'tmpfiles=`ls ${root}*_tmp*`'
printf,unit,'if [ "$tmpfiles" != "" ]; then '
printf,unit,'    /bin/rm ${root}*_tmp*'
printf,unit,'fi'
printf,unit,' '
printf,unit,'if [ -f ${root}_sou1.${ptype} ]; then '
printf,unit,'    /bin/rm ${root}_sou1.${ptype}'
printf,unit,'fi '
printf,unit,'if [ -f ${root}_sou2.${ptype} ]; then '
printf,unit,'    /bin/rm ${root}_sou2.${ptype}'
printf,unit,'fi '
printf,unit,'if [ -f ${root}_bgd1.${ptype} ]; then '
printf,unit,'    /bin/rm ${root}_bgd1.${ptype}'
printf,unit,'fi '
printf,unit,'if [ -f ${root}_bgd2.${ptype} ]; then '
printf,unit,'    /bin/rm ${root}_bgd2.${ptype}'
printf,unit,'fi'
printf,unit,'domsg 5 "Done."'
printf,unit,' '
printf,unit,'# End of script'
printf,unit,' '


;
; Close file
;
close,unit
free_lun,unit


;
; Make the file executable
;
cmdstring='chmod u+x acisspec_mod'
spawn,cmdstring



return
end