;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; MARXXIM: Script a marx simulation ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

pro marxxim,img,imx,imy,egrid,ra,dec,filename,$
            exp,gratings=gratings,$
            detector=detector,roll=roll,pileup=pileup,$
            verbose=verbose,flim=flim

;
; Sebastian Heinz, 01/01/2009
;
; marxxim perform a MARX simulation from a spectral cube generated by
; the procedure line_image.
;
; input:
;        img         spectral cube (float array)
;
;        imx         image x-coordinate (in arcsec, float vector)
;
;        imy         image y-coordinate (in arcsec, float vector)
;
;        egrid       output energy grid, user provided - MARX
;                    simulation will be performed at this resolution
;                    (float vector)
;
;        ra          RA of central image pixel (float scalar)
;
;        dec         DEC of central image pixel (float scalar)
;
;        filename    output filename for fits events file (string)
;
;        exp         exposure time (float scalar)
;
; output:
;        events file will be written into filename.fits
;
; keywords:
;        gratings    string variable ("HETG", "LETG", or "NONE",
;                    default: "NONE")
;
;        detector    string variable ("ACIS-S", "ACIS-I", "HRC-S",
;                    or "HRC-I", default: "ACIS-S")
;
;        roll        roll angle in degrees (float scalar, default: 0)
;

if keyword_set(gratings) then gratings=gratings else gratings="NONE"
if keyword_set(detector) then detector=detector else detector="ACIS-S"
if keyword_set(roll) then roll=roll else roll=0.0
if keyword_set(flim) then flim=flim else flim=10

; set up FITS image array for simulations
nx=n_elements(img(*,0,0))
ny=n_elements(img(0,*,0))
nel=n_elements(egrid)-1

; image coordinates in degrees (not arcsec)
xx=(imx - max(imx)/2.)/3600.
yy=(imy - max(imy)/2.)/3600.

; create FITS header with proper astrometry
mkhdr,head,reform(img(*,*,0),nx,ny)
starast,ra+[min(xx),min(xx),max(xx)],dec+[min(yy),max(yy),min(yy)],$
  [0,0,nx],[0,ny,0],cd,hdr=head

; create temporary directory for marx simulations
spawn,'mkdir '+filename+'_marxdir',out,/stderr
cd,filename+'_marxdir'
writefits,'temp.fits',img(*,*,0),head

; copy marx.par template into simulation directory
spawn,'cp $XIMPATH/marxxim.par marx.par',out,/stderr

; MARX loop through spectrum
if verbose ne 0 then $
   print,format='($,"MARX simulation....... 000.00% complete")'
for i=0,nel-1 do begin
  ; how far along are we?
  if verbose ne 0 then $
    print,format='($,A16,f6.2,"% complete")',string(replicate(8b,16)),$
    float(i)/float(max([nel,1.e]))*100.e

    ; write spectral slice as FITS image for MARX
    writefits,'temp.fits',img(*,*,i),head

    ; run MARX
    spawn,'marx '+$
      'ExposureTime='+strtrim(string(format='(E15.2)',1000.*exp),2)+' '+$
      'OutputDir="mdir_'+strtrim(string(format='(i6.6)',i),2)+'" '+$
      'GratingType="'+gratings+'" '+$
      'DetectorType="'+detector+'" '+$
      'SourceFlux='+strtrim(string(format='(E15.2)',total(img(*,*,i))),2)+' '+$
      'MinEnergy='+strtrim(string(format='(E15.2)',egrid(i)),2)+' '+$
      'MaxEnergy='+strtrim(string(format='(E15.2)',egrid(i+1)),2)+' '+$
      'SourceRA='+strtrim(string(format='(E15.2)',ra),2)+' '+$
      'SourceDEC='+strtrim(string(format='(E15.2)',dec),2)+' '+$
      'RA_Nom='+strtrim(string(format='(E15.2)',ra),2)+' '+$
      'DEC_Nom='+strtrim(string(format='(E15.2)',dec),2)+' '+$
      'Roll_Nom='+strtrim(string(format='(E15.2)',roll),2),out,/stderr
endfor
if verbose ne 0 then $
  print,format='(A16,f6.2,"% complete")',string(replicate(8b,16)),$
  100.0

; clean up
spawn,'rm -rf ../'+filename+'_marx',out,/stderr

; Concatenate MARX simulations into one events file
nloop=nel
if verbose ne 0 then begin
   print,format='($,"Concatenating files... 000.00% complete")'
   counter=0 & steps=1
   for i=1,(floor(alog10(nel)/alog10(flim))) do steps+=ceil(nel/flim^i)+1
endif

while (nloop gt 1) do begin
   nmod=(nloop) MOD flim & if nmod eq 0 then nmod=flim
   nloop=ceil(nloop/float(flim))
   for i=0,nloop-1 do begin
      counter+=1
      if verbose ne 0 then $
         print,format='($,A16,f6.2,"% complete")',string(replicate(8b,16)),$
         float(counter)/float(max([steps,1.e]))*100.e
      spawn,'rm -rf tmpdir',out,/stderr
      names=' '
      if i lt nloop-1 then nm=flim else nm=nmod
      for j=flim*i,flim*i+nm-1 do $
         names+='mdir_'+strtrim(string(format='(i6.6)',j),2)+' '
      spawn,'marxcat'+names+' tmpdir',out,/stderr
      spawn,'rm -rf'+names,out,/stderr
      spawn,'mv tmpdir mdir_'+strtrim(string(format='(i6.6)',i),2),out,/stderr
   endfor
endwhile
spawn,'rm -rf ../'+filename+'_marx',out,/stderr
spawn,'mv mdir_000000 ../'+filename+'_marx',out,/stderr
if verbose ne 0 then $
  print,format='(A16,f6.2,"% complete")',string(replicate(8b,16)),$
  100.0
cd,'..'

; Check if pileup is to be included, if so, run pileup
if (pileup ne 0) then begin
   if verbose ne 0 then $
      print,format='($,"MARX pileup........... 000.00% complete")'
   spawn,'cp $XIMPATH/pileupxim.par marxpileup.par'
   spawn,'marxpileup MarxOutputDir="'+filename+'_marx"',out,/stderr  
   spawn,'rm marxpileup.par'
   if verbose ne 0 then $
      print,format='(A16,f6.2,"% complete")',string(replicate(8b,16)),$
      100.0
endif

; Create events file
if verbose ne 0 then $
   print,format='($,"Creating events file.. 000.00% complete")'
if (pileup ne 0) then $
   spawn,'marx2fits --pileup '+filename+'_marx/pileup '+$
         filename+'.fits',out,/stderr else $
   spawn,'marx2fits '+filename+'_marx '+filename+'.fits',out,/stderr
if verbose ne 0 then $
   print,format='(A16,f6.2,"% complete")',string(replicate(8b,16)),$
   100.0

; Clean up
spawn,'rm -rf '+filename+'_marxdir'

end
