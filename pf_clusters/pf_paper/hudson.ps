%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: fulltext.pdf
%%Creator: Adobe Acrobat 8.0
%%For: cavagnolo
%%CreationDate: 06/11/2008, 05:03:28 PM
%%BoundingBox: 0 0 160 99
%%HiResBoundingBox: 0 0 159.7497 98.2382
%%CropBox: 0 0 159.7497 98.2382
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (CUPS v1.1) (2017.000) 0
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 3438 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c320 44.293068, Sun Jul 08 2007 18:06:15">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:ModifyDate="2007-09-24T13:26:23+05:30"
   xap:CreateDate="2007-09-24T12:15:05+05:30"
   xap:MetadataDate="2007-09-24T12:15:09+05:30"
   xap:CreatorTool="dvips(k) 5.90a Copyright 2002 Radical Eye Software"
   dc:format="application/pdf"
   xapMM:DocumentID="uuid:8f01367c-e800-4398-a835-c8cda427d634"
   xapMM:InstanceID="uuid:fafc4f93-57e4-4b36-87e1-84980174727c"
   pdf:Producer="Acrobat Distiller 7.0 (Windows)"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (2)]
[/TrimBox [0 0 159.74964904785 98.238128662109]]
[/BleedBox [0 0 159.74964904785 98.238128662109]]
[/ArtBox [0 0 159.75 98.2381 ]]
]xpdfm
Adobe_AGM_Core/ps gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
159.749649 98.238129 1 0.000000 0.000000 
pop pop pop
<</PageSize [ 5 -2 roll ] /ImagingBBox null>>setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -98.2381 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 98.2381 li
159.75 98.2381 li
159.75 0 li
cp
clp
[1 0 0 1 -238.273 -388.672 ]ct
true sop
/0 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: TCUBAA+CMR9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TCUBAA+CMR9 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR9) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 51 /three put
dup 52 /four put
dup 67 /C put
dup 82 /R put
dup 97 /a put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
def
/FontBBox {-39 -250 1036 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [74] def
/StemSnapH [25 31] def
/StemSnapV [74 90] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
20 dict dup begin
/three <1C60D8A8C9B08A95D419B460E02949711E6566054DE4C2BD1ACCB563
E8E0F6D95B4177E3FFA0DD81315020D7430F72F8D15BC3E3430F3DE063672BEB
59968CFFACAAE80CAF4DA60EBA5BA81BB95B075198944EADDF89DD584018BFE7
CFE1666D7E6E24856BE3CB0B601FD89BD0B7394264AE10DF713567C3B66AED8D
053D3176C02061D8C15B1A32D3285A5420BB6F073FD05CD0AB4B319F4AA4B518
4CBAF90D95F5C4E8324D3A9A39C03BF46BF15AB528C580> |-
/four <1C60D8A8C9B08A95D419B460E029B72392EFD3516AC6D47A0580F8E7F
FD820D3C82CEA44B97357940666F029ADEB29D507B753AA65D36EB90B986962B
1FB0A51E434BBE17D9C8C37BFD9EF2EB825E863AD0B64859FC1E1F96C8FDC7EC
948A81BDCAF146DDFA689CC6C9B0FEEE323DA> |-
/C <1C60D8A8C9B08A946F6E52356EEE054BC2F5AFC703D77C75734B51BCF2A3
CAEBA3435AC67F3C84928F8931EB87EB0E1FDBAEA9A4E9063BF1156D362B0479
892FBA0CE737806DBCE8D745D9BBDE6CAF64DD9C2AA14025F75F4017DF208218
95D2D5EA1D8B2B4ADC5BFDB90F2C78DD5E1E4D78051C52820FA9BB3B8A711A02
1425006CE8A0CEFF5F12429B> |-
/R <1C60D8A8C9B08A9469BCEB3B0A20DF9C6A0BB1BD80DFEA8B59BA29E496EC
5AFE816C095B93D5960C253BA341B302853D37231C61E3A94ECAA74E86EA8A9E
36DEFC8E39906A1BFD1629B8C0F4E4224910BA76DE9859630CA1E156CF60BC7B
1DA9DE837911E12930A2DFB53672129C7A6E0D762483A6163053FF976DAE3A98
8084027C04C8756EA5DD0C3FEF5FB703BFF40A0FE466A0926BE32A5896366628
349482A4146AC240E94B34932A5CDE1DE26FB54A6E58B0F96067A3CFA3A75F12
3D0FAABAFF82A4F8352720DBF019EAD9E1C90636D0D06ED1B655AFCA2A52D517
227D40D7FB19D087EA8DA6B8474A22CB92790D832C23> |-
/a <1C60D8A8C9B08A95D419B460E029BC351A97D720AECA16B582308B1831F1
D149F764DE06BCAD95146E5089F42CC4883474C90F911068A2F4501899B66F9D
264EA3B277B07EDDBCFF7830C7E970EDBBB2371AB694DB2BE19BCCAD602DA6B8
B723E39B407F50B70AF04A928DF95248A8347112D3067E63B3A8B146D65E6074
339E723D6B978818DEFD4B83692A8AD91F5C81D77793DB0221E86A0D37464934
1696658F22C2A0288CB737310E> |-
/d <1C60D8A8C9B08A95C3FA670F19FFFC4B40ADBFA40584F3C25721D2CD65CA
815B0D07E25AE75B7E45933DCFEBE6F3ED9E9E41EFDC7EE2570F665945E1A2D5
6B379602D6C11B60CC3E8565BF5E7AEA8C399FC89FF7420239FD5B1D46731692
FA0BD5CCAF011190301CBBC8D7C481679FD017B0E66EFECE39180AB3A17996FA
F28E2C9C18C956814828FA652C6542129279DDA52B00114321B830F2> |-
/e <1C60D8A8C9B08A95AE94719F92A217774C2648AA6B92C425BFCA099BBBBD
AE8D77A4FAFD6EA63F18BD777A9CC6DA6FAADD30867C393179C08CDBCE580AA0
7F43C97A0CB0AF611C7B2280BFCB3F0255292735B0F2BA25EB94F1165AF4F00A
7AE7D05EB8356E8969279D9AE29F170D7980A6C6DC5CE1644BC30F69ED> |-
/f <1C60D8A8C9B08A95665E4A77401F2685EB54B0E0376268AAEF92033AABCC
A8914F8C8A029298120FBA3FD3FBFCD34C81B038EBBAFAFC80C24BA031420AAF
C72B9734CAE8AA21708C86B1D38A7E196277DB6E9751DE3B697E7C775C8926E3
1195B7A3FB631C48674CE17D13EA26D797012326E03DD4A845E9E64017095641
D257E5C76E81> |-
/g <1C60D8A8C9B08A95D419B460E029C70DDAAC9A8D8F85C6D05BB019436856
41A352F9842AA07B5842DB9FF3AD591D4A37EF989F61814B6DD688EA0A6E8586
3721984CAA81A816A8324076E9F1288FE7C8FB0A5637A5E78C82C3C39F3B3949
24DA9E32112DE7175AC00191FE009E83E1B28FA7A95D3343B63CA217EC1FA7BA
C7C4C8E48691DED4197CEEB479DA7BA64143534DC21F4F6D205B7764631D03ED
2AC13C80A67EEF825BFB33FB39F5B452685B38D9E95EA933A6DA09BCB823E248
57F63C2C6FBD10A598F73F70332D49AF65634FEE22B20DD382F35F30DC6F5D75
3885347E6399DA41E3A17C5F6AB78E90A48AD6F32A036C6D269C> |-
/h <1C60D8A8C9B08A95C3FA670F19FFF74DD8133C38B1071652C680C5142328
0070833095FACCDE467ABBBE3055283C4430D579D4EDC382C7245FF51FB77E1C
C26B40922243AABD63080D1D78E308B32CC210A94933272048B2D917BF77B825
C9E33AE258394FF894352292FF50CE17401D122051520187DE4B09A14A1C4DC9
EE978C00042374E7152C64679792D6396E3BA5DDA7CE90625E39ACE1> |-
/i <1C60D8A8C9B08A9573EBC19D9789FEA2129A8FB26C967F6906C40F4F6B14
9CD8FFD0B61C250AEEEB310DA333AFC9B15A0CC6C81BF28C62172BFD4CFF901C
FB6966240F8CC94C0894F20442F9621608BEC10A81889AF38B6C1B0A9C27969F
013747EACD2BAAB73B2A> |-
/l <1C60D8A8C9B08A9573EBC19D9789FEA2129B5A50AC2C13D65F681395ECF4
322326CCA6DE73603E0D868BA4360C5AE5A4DF5E02CAA9D48798CB25A39657B2
360BEEF65A13B229DD03C934> |-
/n <1C60D8A8C9B08A95C3FA670F19FFF74DD8133C38B109D769360499B3E221
348E47A5848987B10B5D375D67BABC314F7C7AA64A2787BA4CA5EEDC1C214FF7
41B350CAFC3A41F9E7212F689C8693E4921021B9D023A12DC2BCBFA7BB5061A9
42FB87ECC72857D188102B9A7A7EDD7930F04316564D7ED78EECA0BABD6EC61D
B0C81A8037C5CC4F24E29DC344638B18F1DCFF6972A790> |-
/o <1C60D8A8C9B08A95D419B460E029BC36E8EECCDC4FBC3EEEC0193E9CDDEF
800B6893AA4ED619A89915066EA9B777D49700E4B141156EBA071D8203AC8719
FDCC858DC4353134804022C6C9D97AD96775FBFDE3B06C905C7A780BBC94C527
2D93FFC2F35AD8293AB299913E123A6C686334FE9CACBADD31CEC1695A4D28> |-
/r <1C60D8A8C9B08A9513B117B1C644A7E625DD9F8CD6DB6F1821840A50C7BA
890257B415491D56087DBE91301153AA361235CEFD42CE2694065EE0E4BC2380
FCC58693A9A1478A256452E582BCBD1187FDCEC1600473F53AB7D9FA7561EEED
AAF3610975BF20D8C92757ABAD51CAB618E91EF97CA22738AF5FB3> |-
/s <1C60D8A8C9B08A9513D3787A0E924988268B7F596C6858D1786B582B5ACB
A0068453C16043F3341F843D222630656EC0A92492CF76A0F6DE0C971F90F2AB
04E88BAFBFF8CDF96D5F845733952A8D9B5CAC18020C1E7F47FF00705E14E3C1
3D3071625E4B60A5823A304F0260F933B6632E162FD0BD13019694A21EF80079
F5B483925AD5C2C563CCB4FF9F75CA6E471C67A266642F7B707F0D1A66C2A0BE
5D3DEA3F29624CFCFDE6B43E9257B1083F641158DB3DA88DE87F5B51586A68C8
429D44B5C38E83351E48> |-
/t <1C60D8A8C9B08A9580C822583BC30BF3C9052CDFE1E1E317DBC76D13C317
B36C44A6EDA8B7AED928CDE9AB723C750666120D5BB57EAEBBB7357B28BD05AF
B7B8131F02996E3A4A80F953FAAB261B969088B40E7775888AF4B25667EA4E> |-
/u <1C60D8A8C9B08A95C3FA670F19FFFC4B40ADAEFE548534FF5063088EEF16
FC16636B92E9FBD8BEADC0F376C08AA8A8709583FE4B704ECE2C5E74787C317F
A0A93BFE85970107875CAD8FDD6901903C1F0B54CBBE339A3514B54B2E9C14FF
3285E889B0E222072AB960459C1C23DFE0B3> |-
/w <1C60D8A8C9B08A946F6E52356EEEF0FFA76B79CCE580020E02351C4B6A69
308E99AA8E0F26B7233F7E6E9FA74B88830D4F651944EA44316958A7580A0B63
7125DA474084E3222FB65C2CA0DBABF6FBE6E44ACA0CDDB9A6834FB4207AA2FD
003A2BF184B74EEBEC96F0209D49B4262F17E4B7E8351E55A25D41FA829D81A9
E0D249D7ACAD75578649A1372DA4CDC700937FE48172293F170C72980508614C
9F39C6B243A0DEC111BA2690AB7C6067210F6C2DEFDF58A6BEF0021474E0214B
AB267937296F42C94010E2DF4598087D8552E092218B> |-
/.notdef <1C60D8A8C9B08A9599C1D3CEECCC8D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWHU+CMR9 /TCUBAA+CMR9 findfont ct_VMDictPut
/BDXWHU+CMR9*1 
[51{/.notdef}rp /three /four 14{/.notdef}rp /C 14{/.notdef}rp /R 14{/.notdef}rp 
/a 2{/.notdef}rp /d /e /f /g /h /i 
2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s 
/t /u /.notdef /w 136{/.notdef}rp]
BDXWHU+CMR9 nf
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
117.6 40.433 mo
(CentralRegionsofthe)
[6.61276 4.0573 4.91985 3.60266 3.59995 4.56126 5.63542 6.83595 4.0573 4.56845 2.51511 4.56845 
5.16016 6.83597 4.56845 5.87923 3.60265 5.16016 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: WFRBAA+CMTI9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WFRBAA+CMTI9 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMTI9) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 83 /S put
dup 85 /U put
def
/FontBBox {-35 -250 1148 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 666 667] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [70] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/C <1C60D8A8C9B08A945069EDDB2452B52EC6AF7FEE4D778C3323D2348D2B98
846435F8E7E23E328E1FFF50A07F613C58ED03F80D07271A0D94CE8E48D14C7C
F4EBD2627AD88598165F1F1D0118502654B7F0EC215BEAEF1604D09ABFDED676
A87853E23C0220AE2053D5B5EDD752F6D12692062A7FC64D6CE1F4E6ECA829FA
AC570A871233E8B789C1E08FE90E4B7A9F38FC74F78BDEE6BF> |-
/F <1C60D8A8C9B08A944B2D731A300EA4073441235DF0A6A63143B007408F34
5251A0CAB6078E161A90D973C641EFF0675BB866A805F422B5C444E02238BEB3
2A22A7AD4AFE82BE124CCB8069C6E27A22CC65736C01E5013F1CECB66C04AB92
9725AC85907B3957C261D62CD2CCE60529AC17E69896CFDECBAD3E6C6D933212
ADCF6192E5F322F01AB9383B6F593D3993C29B58DE6B886A3A3EE4F6C3F9E63A
2249E6DD0774AAB3C75B0F2A96D65E89ED94336E7EE9C7C7F1D2D5628734AE7F
0775D24696D30CB265C9CCAE26BA360994C5A713FB2449908C92F4063392B553
514A015B06B831534938E3> |-
/G <1C60D8A8C9B08A9478EAC840400DF28DF55AE2656D1A1CD4065E02CD2160
DFB1E3AE662B43FC91DCDECDDAE2215557C681A3F215B70F828AD36D46C3C8B5
AC07F9C453FD0AF4728667BFD4B8728855750C878BF02E40D407F008285EA3D0
0B257DAA214E89C82D0BD77EAC9FC2F0617F87B56F17D4F67FB90D65FB09AE50
EE67A9FD489B7752B17DF0407DEF8B605FAF99A7719DE4CB38E384DE9A126F59
7D840AAD5742C197B55AB494A357DC7EDFCA51216DA2CF0AFDC49EE20458BC43
E9C0BB291F19E0979411CA38A2D32AB29BC7F3CDE83D61D9C89440627BB39367
BD8D07C4987F> |-
/H <1C60D8A8C9B08A9464B2008E57B7839AE699A624D953A5183180A2F10FFC
926F0FB27AB9645F28806513906FADF7CB1E12C2C04F807F394E26EB5AA0A63F
748BCCAC4D652AB0A9B2E194A3763D485A7EAD083FF0371CAFB11B393C042FD7
3ACC02DAAD36EE5179E5D91071AA8C991FE0830C170C92D089934ED146459031
320CB02D9C6552A089843FA4AB24EA16446D01B13D073E282DFD4D2C36C6082E
F63926026C78DEBBC37A52A4AAC30B746140EED22F612B1C8900E2B763F5C60F
7C582A82CB873B04D0F43A2CD21DD074DE4C4F4848C181913D41C3D3AB19F9D1
D6E2FA7EB29D8E408E20D9B9EE8EBC1FCBBAD5B3835EAF5D4F5F0958496B62D8
DBA03315C0AD4A0978A84828AF0DFB6AD4> |-
/I <1C60D8A8C9B08A958650473903D6C625F404BA9465C0AEBAB2292D2755B6
9402AB65E5011855524633D3971161E0F5AF60CB994C11076CC025432AD112A4
20C19DED3FE4E5AAAB113C50F75B559944E085F425F1C3CF54F2EDF31D2C2724
2784F8E0ACCE79241C673AFED8F1109CBF640B7B089D8B28B1CE6ABA775F3D82
E8523B480A34EEABAD49B273DE> |-
/L <1C60D8A8C9B08A95E77772641C6D9C0A7606D7AB7708C009E5711558E3A8
0FF52513B1C1BFF6B845E09199BD9CE147251A00A8DD822931A0935FE22FA6C8
A4BB8A183C28DC938D02834C767F2DEBFC62EE16A181FD5A1504FF19800CF958
0481C2731F6413D448E8C23527B2E15B5241A4BA17EC8706F6B36BD8A40363DA
7303C4D72C41C9BF0D3D511280915507BDDE2F2B17A469484EE93C77A08E41BF
3A92C6EB36> |-
/S <1C60D8A8C9B08A95FDC05031A57A903D34554551CEBC674F42DB4550195B
BB2F59AE335897063F6857D0BA52792E56F1F817FD123D6390967A4C0BC9FC79
FBD210C68C0B95767A0F1A60AB23A05A92B1C677B0857C5B1F44C3CFB6723A75
FE238AB1D456AD185386822A33C470A8739EBE3B011C66A673B39CE5D25A7895
15934EDF72FE97DBA9D086B8B61811D64BBF6D5843F20CE2E9A93EBA24423CAE
0A6F0AEFA9E70DAFA101B909C0D4625C24DA4F42FBA83E0815EC14FA055350B6
6B2C1011F513BC11F9232F5D680D4C48EA34D5E2F267BA3DFE12F9E459D3CF7E
825CA1BBB3EB3EBBDC70E0209FA77A6E> |-
/U <1C60D8A8C9B08A9464B2008E57B77DF0A089B935AF8F7C44CA2DB29F501F
FCEA657D8EACC88964464F4E30AED810BF420D2DE0FB05FA86EC5DD3E4173371
008D934B0CAF7C84A1F4B2DEF2489C9973A95F75EA95870F810EFF7724FC70EB
6A2E536387835B3A44C4294D06108D71FCA758B3D467A89293F29FF46979932C
CE66B498E29E64DF61367BEF316D78132989B9349B689F541289B14460827627
8FBB8D2989C032E6A397ABB08246A90EFE2D7793392F830E9CBA798D78C0DC87
54A9328EFFC7> |-
/.notdef <1C60D8A8C9B08A959342D99EBE6AFF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWHV+CMTI9 /WFRBAA+CMTI9 findfont ct_VMDictPut
/BDXWHV+CMTI9*1 
[67{/.notdef}rp /C 2{/.notdef}rp /F /G /H /I 2{/.notdef}rp 
/L 6{/.notdef}rp /S /.notdef /U 170{/.notdef}rp]
BDXWHV+CMTI9 nf
BDXWHV+CMTI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
211.439 40.433 mo
(HIFLUGCS)
[6.83688 3.60266 6.00299 5.76985 6.83688 7.1149 6.58583 0 ]xsh
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
262.438 40.433 mo
(ClusterswithChandra43)
[6.60291 2.50525 5.16016 3.59641 3.60263 4.07883 3.59995 6.83597 6.60291 2.50525 3.60263 8.28049 
6.60287 5.16016 4.55859 5.16016 5.16016 3.59995 27.3611 4.56128 0 ]xsh
54.709 148.838 mo
394.762 148.838 li
394.762 52.5109 li
54.709 52.5109 li
cp
false sop
1 gry
f
67.877 137.473 mo
208.699 137.473 li
208.699 53.272 li
67.877 53.272 li
cp
f
0.093 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
67.877 137.473 mo
67.877 53.272 li
208.699 53.272 li
208.699 137.473 li
67.877 137.473 li
@
67.877 137.473 mo
208.699 137.473 li
67.877 53.272 mo
208.699 53.272 li
67.877 137.473 mo
67.877 53.272 li
208.699 137.473 mo
208.699 53.272 li
67.877 137.473 mo
208.699 137.473 li
67.877 137.473 mo
67.877 53.272 li
106.2 137.473 mo
106.2 136.758 li
106.2 53.272 mo
106.2 53.972 li
102.841 137.473 mo
102.841 136.758 li
102.841 53.272 mo
102.841 53.972 li
99.095 137.473 mo
99.095 136.758 li
99.095 53.272 mo
99.095 53.972 li
94.85 137.473 mo
94.85 136.758 li
94.85 53.272 mo
94.85 53.972 li
89.938 137.473 mo
89.938 136.758 li
89.938 53.272 mo
89.938 53.972 li
84.139 137.473 mo
84.139 136.758 li
84.139 53.272 mo
84.139 53.972 li
77.034 137.473 mo
77.034 136.758 li
77.034 53.272 mo
77.034 53.972 li
106.2 137.473 mo
106.2 136.059 li
106.2 53.272 mo
106.2 54.672 li
0 gry
@
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /RXMAAA+Helvetica def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Helvetica) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
def
/UniqueID 43142 def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 -220 -207] def
/FamilyBlues [-19 -0 718 737 523 538 688 703] def
/FamilyOtherBlues [270 281 -220 -207] def
/BlueScale 0.0437917 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/period <1C60D8A8C9B854D088E8E1B4A929D159FDB35EBB0A92B2CB5440> |-
/zero <1C60D8A8C9B7EF32A47D2AA10CC01BD74F486262CA3CBA2A0BB3D25A3
A094F02BD79F42A0A236349C843943C6914F47589F3954D0C018D1FE33AE62F4
AD6F7BB100F692008FA5232B949E365DCD3CA3A3EC8285D42D2BEFA> |-
/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE0295
8A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica /RXMAAA+Helvetica findfont ct_VMDictPut
/BDXWHW+Helvetica*1 
[46{/.notdef}rp /period /.notdef /zero /one 206{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
101.846 142.169 mo
(0.01)
[2.48949 1.24474 2.48949 0 ]xsh
128.276 137.473 mo
128.276 136.758 li
128.276 53.272 mo
128.276 53.972 li
141.18 137.473 mo
141.18 136.758 li
141.18 53.272 mo
141.18 53.972 li
150.337 137.473 mo
150.337 136.758 li
150.337 53.272 mo
150.337 53.972 li
157.442 137.473 mo
157.442 136.758 li
157.442 53.272 mo
157.442 53.972 li
163.256 137.473 mo
163.256 136.758 li
163.256 53.272 mo
163.256 53.972 li
168.153 137.473 mo
168.153 136.758 li
168.153 53.272 mo
168.153 53.972 li
172.413 137.473 mo
172.413 136.758 li
172.413 53.272 mo
172.413 53.972 li
176.16 137.473 mo
176.16 136.758 li
176.16 53.272 mo
176.16 53.972 li
179.518 137.473 mo
179.518 136.758 li
179.518 53.272 mo
179.518 53.972 li
179.518 137.473 mo
179.518 136.059 li
179.518 53.272 mo
179.518 54.672 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
176.408 142.169 mo
(0.1)
[2.48949 1.24475 0 ]xsh
201.594 137.473 mo
201.594 136.758 li
201.594 53.272 mo
201.594 53.972 li
67.877 137.473 mo
69.276 137.473 li
208.699 137.473 mo
207.284 137.473 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
61.1141 139.137 mo
(0.1)
[2.48949 1.24474 0 ]xsh
67.877 83.34 mo
69.276 83.34 li
208.699 83.34 mo
207.284 83.34 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
64.8453 85.0033 mo
(1)sh
67.877 137.473 mo
208.699 137.473 li
67.877 53.272 mo
208.699 53.272 li
67.877 137.473 mo
67.877 53.272 li
208.699 137.473 mo
208.699 53.272 li
false sop
0 gry
@
gsave
208.715 53.272 mo
67.877 53.272 li
67.877 137.489 li
208.715 137.489 li
cp
clp
67.877 87.102 mo
172.879 87.102 li
0.0621 gry
@
grestore
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D08E823E34E98D69F07852149357481CB22577590C
C2367BB833216B> |-
/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23
A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F
7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA
2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1C
B4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDD
AD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8
950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27
315B3507F9DAF305> |-
/less <1C60D8A8C9B7F374E8C6D7E261BDEBF02E53D7A232627B4C4F688DC8D
832B7AAEE7AED4CC6184781DE89E327E381> |-
/greater <1C60D8A8C9B7F374E8C6D7E261BDEBF06D34017347288024C25CD4
EB5F1B8AF8725ACF03B115C010A30DFE4FF153> |-
/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67
BA95C799E46FC7C8D88E9FFD990A> |-
/k <1C60D8A8C9B7A73DEE9439F98A6760116E53D02CD3639A4E206C0D442471
19E04D95FA72AF4CC3263E0911BCDDE695C914CD0C4AFF3DC9857E6995DD10EA
D2EA0AD1> |-
/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D4
5A7D128B0AC7E4BF3CECAA38DF996F9A6C482DB9F23D69FD46524CB92965AC6F
9D4D369C7898CDC92C3F38BFBF2273026F7CCF0E2F294158F88D37A82B162157
72> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 47 /slash put
dup 56 /eight put
dup 60 /less put
dup 62 /greater put
dup 84 /T put
dup 107 /k put
dup 114 /r put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[46{/.notdef}rp /period /slash /zero /one 6{/.notdef}rp /eight 3{/.notdef}rp 
/less /.notdef /greater 21{/.notdef}rp /T 22{/.notdef}rp /k 6{/.notdef}rp 
/r 141{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
133.235 145.449 mo
(r/r)
[1.49097 1.24475 0 ]xsh
BDXWHW+Helvetica*1 [3.5447 0 0 -3.5447 0 0 ]msf
137.449 147.688 mo
(180)
[1.97086 1.97086 0 ]xsh
BDXWHW+Helvetica*1 [0 -4.4775 -4.4775 0 0 0 ]msf
59.264 103.582 mo
(kT/<kT>)
[-2.23877 -2.73572 -1.24475 -2.61481 -2.23877 -2.73572 0 ]ysh
gsave
208.715 53.272 mo
67.877 53.272 li
67.877 137.489 li
208.715 137.489 li
cp
clp
172.879 70.296 mo
186.032 70.296 li
180.124 81.692 mo
180.124 58.403 li
186.032 80.0909 mo
194.598 80.0909 li
190.603 87.413 mo
190.603 72.3329 li
194.598 82.702 mo
201.47 82.702 li
198.221 89.823 mo
198.221 74.774 li
201.47 96.228 mo
208.186 96.228 li
205.015 104.577 mo
205.015 82.0959 li
208.186 81.054 mo
208.715 81.054 li
false sop
0.0621 gry
@
67.877 77.774 mo
152.451 77.774 li
132.551 83.386 mo
132.551 68.12 li
152.451 77.541 mo
171.527 77.541 li
163.396 83.962 mo
163.396 66.612 li
171.527 83.215 mo
185.395 83.215 li
179.207 89.325 mo
179.207 76.53 li
185.395 72.068 mo
196.852 72.068 li
191.629 80.6039 mo
191.629 61.295 li
196.852 83.324 mo
208.715 83.324 li
203.475 89.496 mo
203.475 76.779 li
0.069 gry
@
67.877 76.344 mo
184.975 76.344 li
163.707 80.806 mo
163.707 70.2029 li
184.975 82.127 mo
198.081 82.127 li
192.204 86.449 mo
192.204 77.914 li
198.081 84.6299 mo
206.631 84.6299 li
202.651 88.89 mo
202.651 80.433 li
206.631 91.533 mo
208.715 91.533 li
0.0759 gry
@
67.877 76.095 mo
146.139 76.095 li
126.69 80.168 mo
126.69 71.991 li
146.139 80.339 mo
164.671 80.339 li
156.742 84.475 mo
156.742 76.095 li
164.671 77.4789 mo
176.129 77.4789 li
170.905 82.049 mo
170.905 72.892 li
176.129 74.447 mo
185.674 74.447 li
181.259 79.4839 mo
181.259 69.379 li
185.674 81.334 mo
194.536 81.334 li
190.416 86.2159 mo
190.416 75.722 li
194.536 86.123 mo
202.62 86.123 li
198.842 90.165 mo
198.842 81.443 li
202.62 81.5359 mo
208.715 81.5359 li
206.694 87.04 mo
206.694 75.271 li
0.0828 gry
@
67.877 82.469 mo
168.262 82.469 li
147.523 88.61 mo
147.523 76.157 li
168.262 79.78 mo
180.637 79.78 li
175.04 86.2469 mo
175.04 71.7419 li
180.637 82.889 mo
189.079 82.889 li
185.13 89.496 mo
185.13 75.691 li
189.079 88.921 mo
196.091 88.921 li
192.779 93.772 mo
192.779 81.816 li
196.091 87.506 mo
202.745 87.506 li
199.589 93.4919 mo
199.589 80.028 li
202.745 92.155 mo
208.715 92.155 li
206.367 97.503 mo
206.367 85.625 li
0.0897 gry
@
67.877 83.558 mo
165.93 83.558 li
145.3 88.999 mo
145.3 78.443 li
165.93 83.511 mo
181.244 83.511 li
174.496 87.46 mo
174.496 79.6089 li
181.244 81.894 mo
190.743 81.894 li
186.358 86.045 mo
186.358 77.883 li
190.743 86.853 mo
199.34 86.853 li
195.344 89.605 mo
195.344 81.568 li
199.34 92.201 mo
208.715 92.201 li
0.0966 gry
@
67.877 80.075 mo
142.004 80.075 li
122.897 82.998 mo
122.897 78.412 li
142.004 81.692 mo
160.411 81.692 li
152.529 85.112 mo
152.529 78.303 li
160.411 79.686 mo
173.501 79.686 li
167.625 83.231 mo
167.625 75.442 li
173.501 85.625 mo
185.752 85.625 li
180.202 89.185 mo
180.202 82.1429 li
185.752 87.569 mo
197.847 87.569 li
192.375 91.595 mo
192.375 83.589 li
197.847 88.517 mo
208.404 88.517 li
203.569 94.02 mo
203.569 83.076 li
0.1035 gry
@
67.877 115.553 mo
95.363 115.553 li
84.496 116.999 mo
84.496 113.998 li
95.364 112.07 mo
108.438 112.07 li
102.577 113.594 mo
102.577 110.469 li
108.438 109.178 mo
117.44 109.178 li
113.258 111.091 mo
113.258 106.769 li
117.44 108.401 mo
124.638 108.401 li
121.249 110.422 mo
121.249 106.178 li
124.638 104.732 mo
131.137 104.732 li
128.058 107.095 mo
128.058 102.245 li
131.137 106.225 mo
136.904 106.225 li
134.153 108.494 mo
134.153 103.877 li
136.904 104.343 mo
142.781 104.343 li
139.983 106.66 mo
139.983 101.887 li
142.781 101.11 mo
149.264 101.11 li
146.186 103.551 mo
146.186 97.0049 li
149.264 95.202 mo
156.291 95.202 li
152.964 99.042 mo
152.964 91.269 li
156.291 94.114 mo
163.536 94.114 li
160.116 97.845 mo
160.116 90.227 li
163.536 92.948 mo
171.014 92.948 li
167.5 96.694 mo
167.5 88.672 li
171.014 85.952 mo
178.912 85.952 li
175.211 91.144 mo
175.211 80.293 li
178.912 88.47 mo
187.898 88.47 li
183.731 92.823 mo
183.731 82.5309 li
187.898 77.681 mo
199.62 77.681 li
194.287 83.962 mo
194.287 66.985 li
199.62 84.506 mo
208.715 84.506 li
0.1104 gry
@
67.877 72.131 mo
160.084 72.131 li
139.734 78.163 mo
139.734 65.928 li
160.085 82.22 mo
172.273 82.22 li
166.77 86.309 mo
166.77 75.629 li
172.273 78.163 mo
179.362 78.163 li
176.02 83.464 mo
176.02 72.146 li
179.362 82.298 mo
184.804 82.298 li
182.192 86.34 mo
182.192 75.551 li
184.804 82.205 mo
189.561 82.205 li
187.26 86.356 mo
187.26 75.52 li
189.561 83.728 mo
194.007 83.728 li
191.862 87.817 mo
191.862 78.225 li
194.007 84.444 mo
198.376 84.444 li
196.262 88.843 mo
196.262 78.054 li
198.376 86.138 mo
202.605 86.138 li
200.568 90.538 mo
200.568 81.334 li
202.605 82.5779 mo
206.833 82.5779 li
204.797 87.164 mo
204.797 74.416 li
206.833 89.154 mo
208.715 89.154 li
0.1472 gry
@
67.877 75.738 mo
178.181 75.738 li
157.084 81.878 mo
157.084 69.457 li
178.181 80.355 mo
193.899 80.355 li
186.996 86.34 mo
186.996 73.297 li
193.899 77.556 mo
205.232 77.556 li
200.071 84.5519 mo
200.071 69.83 li
205.232 79.593 mo
208.715 79.593 li
0.1841 gry
@
67.877 77.028 mo
151.067 77.028 li
131.245 80.013 mo
131.245 72.924 li
151.067 78.629 mo
168.184 78.629 li
160.769 81.738 mo
160.769 73.7159 li
168.184 78.334 mo
179.471 78.334 li
174.325 83.728 mo
174.325 76.188 li
179.471 86.962 mo
189.219 86.962 li
184.71 90.756 mo
184.71 83.138 li
189.219 83.418 mo
198.64 83.418 li
194.272 87.7549 mo
194.272 79.375 li
198.64 95.9789 mo
208.715 95.9789 li
0.2209 gry
@
67.877 114.869 mo
105.158 114.869 li
91.694 115.801 mo
91.694 113.78 li
105.158 113.749 mo
117.409 113.749 li
111.874 115.273 mo
111.874 112.474 li
117.409 112.117 mo
126.239 112.117 li
122.119 113.469 mo
122.119 110.795 li
126.239 107.017 mo
133.608 107.017 li
130.126 108.432 mo
130.126 104.592 li
133.608 102.26 mo
139.625 102.26 li
136.749 104.328 mo
136.749 100.208 li
139.625 103.255 mo
144.74 103.255 li
142.283 105.401 mo
142.283 101.094 li
144.74 98 mo
149.248 98 li
147.072 100.255 mo
147.072 94.704 li
149.248 100.566 mo
153.446 100.566 li
151.409 102.82 mo
151.409 98.249 li
153.446 99.757 mo
157.317 99.757 li
155.436 101.918 mo
155.436 97.5649 li
157.317 99.7729 mo
160.815 99.7729 li
159.121 101.996 mo
159.121 97.487 li
160.815 98.436 mo
164.064 98.436 li
162.479 100.737 mo
162.479 95.5439 li
164.064 94.72 mo
167.096 94.72 li
165.619 97.969 mo
165.619 91.3149 li
167.096 97.6429 mo
169.957 97.6429 li
168.557 99.897 mo
168.557 94.658 li
169.957 91.704 mo
172.662 91.704 li
171.34 95.264 mo
171.34 88.082 li
172.662 93.181 mo
175.227 93.181 li
173.968 96.586 mo
173.968 89.745 li
175.227 94.098 mo
177.823 94.098 li
176.548 97.736 mo
176.548 90.258 li
177.823 89.03 mo
180.295 89.03 li
179.083 92.606 mo
179.083 85.2679 li
180.295 89.73 mo
182.705 89.73 li
181.523 93.399 mo
181.523 85.967 li
182.705 88.439 mo
185.053 88.439 li
183.902 92.155 mo
183.902 83.822 li
185.053 90.305 mo
187.416 90.305 li
186.25 94.0359 mo
186.25 86.263 li
187.416 91.486 mo
189.856 91.486 li
188.659 95.0779 mo
188.659 87.6 li
189.856 91.844 mo
192.297 91.844 li
191.1 95.606 mo
191.1 88.035 li
192.297 86.309 mo
194.676 86.309 li
193.51 90.149 mo
193.51 80.852 li
194.676 91.595 mo
196.946 91.595 li
195.826 95.5439 mo
195.826 87.444 li
196.946 95.839 mo
199.169 95.839 li
198.081 99.073 mo
198.081 91.502 li
199.169 85.128 mo
202.278 85.128 li
200.755 89.263 mo
200.755 78.256 li
202.278 90.009 mo
205.667 90.009 li
204.02 94.3 mo
204.02 85.547 li
205.667 86.8069 mo
208.715 86.8069 li
207.44 91.284 mo
207.44 81.568 li
0.2578 gry
@
67.877 92.295 mo
127.157 92.295 li
109.682 93.305 mo
109.682 90.382 li
127.157 79.546 mo
155.343 79.546 li
144.273 82.827 mo
144.273 76.3589 li
155.343 76.313 mo
173.952 76.313 li
165.992 79.826 mo
165.992 72.131 li
173.952 79.4839 mo
190.82 79.4839 li
183.482 83.526 mo
183.482 75.442 li
190.82 89.248 mo
208.715 89.248 li
201.874 93.399 mo
201.874 83.6039 li
0.2947 gry
@
67.877 89.652 mo
140.216 89.652 li
121.264 90.756 mo
121.264 88.595 li
140.216 85.174 mo
158.747 85.174 li
150.819 86.029 mo
150.819 84.381 li
158.747 81.676 mo
174.17 81.676 li
167.391 82.423 mo
167.391 80.977 li
174.17 81.039 mo
187.571 81.039 li
181.57 81.863 mo
181.57 78.132 li
187.571 84.599 mo
198.796 84.599 li
193.681 85.75 mo
193.681 83.542 li
198.796 87.3979 mo
208.715 87.3979 li
205.916 89.823 mo
205.916 85.361 li
0.3315 gry
@
67.877 88.843 mo
166.07 88.843 li
145.424 94.627 mo
145.424 82.827 li
166.07 78.956 mo
182.161 78.956 li
175.118 85.827 mo
175.118 70.467 li
182.161 81.91 mo
192.546 81.91 li
187.773 88.128 mo
187.773 72.908 li
192.546 82.998 mo
201.983 82.998 li
197.614 89.248 mo
197.614 74.09 li
201.983 80.852 mo
208.715 80.852 li
206.865 89.8849 mo
206.865 56.7549 li
0.3684 gry
@
67.877 77.059 mo
161.188 77.059 li
140.775 80.883 mo
140.775 72.146 li
161.188 80.744 mo
176.455 80.744 li
169.723 85.1899 mo
169.723 76.468 li
176.455 83.915 mo
186.296 83.915 li
181.757 88.579 mo
181.757 79.391 li
186.296 86.791 mo
194.52 86.791 li
190.68 91.4399 mo
190.68 81.5049 li
194.52 90.305 mo
201.781 90.305 li
198.361 94.4709 mo
198.361 84.739 li
201.781 105.587 mo
208.715 105.587 li
207.86 109.178 mo
207.86 101.918 li
0.4053 gry
@
67.877 95.482 mo
100.136 95.482 li
87.932 99.306 mo
87.932 92.606 li
100.136 91.72 mo
119.057 91.72 li
110.988 94.456 mo
110.988 86.2159 li
119.057 70.965 mo
131.634 70.965 li
125.959 88.361 mo
125.959 53.272 li
131.634 84.288 mo
142.05 84.288 li
137.262 87.102 mo
137.262 81.878 li
142.05 80.075 mo
149.808 80.075 li
146.155 82.671 mo
146.155 77.603 li
149.808 80.619 mo
156.182 80.619 li
153.151 83.34 mo
153.151 77.9919 li
156.182 83.806 mo
161.577 83.806 li
158.996 86.527 mo
158.996 81.039 li
161.577 80.666 mo
166.334 80.666 li
164.049 83.495 mo
164.049 77.914 li
166.334 81.412 mo
170.796 81.412 li
168.651 84.366 mo
168.651 78.489 li
170.796 82.174 mo
176.362 82.174 li
173.703 85.097 mo
173.703 79.282 li
176.362 83.1689 mo
184.524 83.1689 li
180.699 86.356 mo
180.699 80.0439 li
184.524 87.2419 mo
200.335 87.2419 li
193.401 89.574 mo
193.401 84.288 li
200.335 90.243 mo
208.715 90.243 li
207.409 93.15 mo
207.409 87.46 li
0.4421 gry
@
67.877 110.345 mo
96.825 110.345 li
85.522 114.464 mo
85.522 53.272 li
96.825 111.713 mo
108.423 111.713 li
103.152 113.765 mo
103.152 109.676 li
108.423 113.283 mo
116.243 113.283 li
112.574 114.977 mo
112.574 109.085 li
116.243 109.785 mo
122.057 109.785 li
119.274 112.987 mo
119.274 104.437 li
122.057 112.241 mo
126.659 112.241 li
124.436 113.749 mo
124.436 110.531 li
126.659 113.5 mo
130.81 113.5 li
128.804 114.511 mo
128.804 112.568 li
130.81 109.909 mo
134.635 109.909 li
132.784 111.464 mo
132.784 108.401 li
134.635 108.961 mo
138.101 108.961 li
136.422 110.438 mo
136.422 107.546 li
138.101 108.805 mo
141.522 108.805 li
139.858 110.345 mo
139.858 107.313 li
141.522 106.349 mo
144.989 106.349 li
143.294 107.981 mo
143.294 104.81 li
144.989 102.338 mo
148.549 102.338 li
146.823 104.561 mo
146.823 100.255 li
148.549 100.084 mo
152.327 100.084 li
150.492 102.322 mo
150.492 97.892 li
152.327 96.803 mo
156.26 96.803 li
154.348 99.042 mo
154.348 94.658 li
156.26 96.663 mo
160.271 96.663 li
158.328 99.011 mo
158.328 94.409 li
160.271 95.093 mo
164.158 95.093 li
162.277 97.41 mo
162.277 92.31 li
164.158 92.4659 mo
168.029 92.4659 li
166.148 96.073 mo
166.148 89.108 li
168.029 89.154 mo
171.916 89.154 li
170.034 92.481 mo
170.034 85.858 li
171.916 86.511 mo
175.818 86.511 li
173.921 89.869 mo
173.921 83.231 li
175.818 86.2939 mo
179.673 86.2939 li
177.808 89.8539 mo
177.808 82.858 li
179.673 77.37 mo
183.653 77.37 li
181.726 82.827 mo
181.726 71.913 li
183.653 77.93 mo
188.177 77.93 li
186.001 84.102 mo
186.001 72.426 li
188.177 85.843 mo
200.864 85.843 li
195.158 90.056 mo
195.158 81.754 li
200.864 96.477 mo
208.715 96.477 li
0.479 gry
@
67.877 89.73 mo
135.49 89.73 li
117.02 93.29 mo
117.02 86.014 li
135.49 83.402 mo
148.673 83.402 li
142.765 87.227 mo
142.765 79.749 li
148.673 84.91 mo
157.193 84.91 li
153.228 89.03 mo
153.228 80.915 li
157.193 83.822 mo
163.8 83.822 li
160.675 88.206 mo
160.675 79.624 li
163.8 77.899 mo
169.21 77.899 li
166.614 82.936 mo
166.614 71.664 li
169.21 80.199 mo
173.952 80.199 li
171.667 84.381 mo
171.667 73.685 li
173.952 78.769 mo
178.088 78.769 li
176.082 83.589 mo
176.082 72.3019 li
178.088 84.428 mo
181.788 84.428 li
179.984 89.3719 mo
179.984 79.469 li
181.788 81.086 mo
185.146 81.086 li
183.513 85.827 mo
183.513 74.805 li
185.146 73.25 mo
188.442 73.25 li
186.84 80.059 mo
186.84 66.456 li
188.442 81.225 mo
191.971 81.225 li
190.261 86.48 mo
190.261 74.463 li
191.971 84.055 mo
195.997 84.055 li
194.054 89.31 mo
194.054 78.396 li
195.997 93.243 mo
208.715 93.243 li
0.5159 gry
@
67.877 108.541 mo
142.175 108.541 li
123.052 110.173 mo
123.052 105.432 li
142.175 90.414 mo
162.339 90.414 li
153.835 94.098 mo
153.835 87.615 li
162.339 79.189 mo
174.963 79.189 li
169.273 86.418 mo
169.273 74.478 li
174.963 87.8329 mo
183.855 87.8329 li
179.72 95.295 mo
179.72 79.92 li
183.855 95.528 mo
191.971 95.528 li
188.177 108.479 mo
188.177 78.474 li
191.971 88.455 mo
200.879 88.455 li
196.744 93.974 mo
196.744 80.386 li
200.879 81.241 mo
208.715 81.241 li
205.217 87.2419 mo
205.217 74.711 li
0.5527 gry
@
67.877 88.89 mo
148.611 88.89 li
128.975 91.9839 mo
128.975 85.936 li
148.611 83.962 mo
160.458 83.962 li
155.078 88.128 mo
155.078 79.5 li
160.458 85.439 mo
168.122 85.439 li
164.515 88.735 mo
164.515 80.5569 li
168.122 85.563 mo
174.17 85.563 li
171.278 88.766 mo
171.278 80.37 li
174.17 85.237 mo
179.502 85.237 li
176.937 88.626 mo
176.937 80.106 li
179.502 80.588 mo
185.348 80.588 li
182.565 85.1899 mo
182.565 76.079 li
185.348 83.0439 mo
191.551 83.0439 li
188.597 87.3199 mo
188.597 78.256 li
191.551 80.697 mo
197.801 80.697 li
194.831 85.174 mo
194.831 76.235 li
197.801 79.142 mo
202.232 79.142 li
200.102 83.884 mo
200.102 74.494 li
202.232 86.8069 mo
206.32 86.8069 li
204.346 90.429 mo
204.346 82.36 li
206.32 88.641 mo
208.715 88.641 li
0.5896 gry
@
67.877 84.957 mo
116.911 84.957 li
101.023 87.366 mo
101.023 82.625 li
116.911 81.972 mo
129.784 81.972 li
123.985 84.413 mo
123.985 79.22 li
129.784 84.257 mo
137.682 84.257 li
133.982 86.791 mo
133.982 81.77 li
137.682 83.2 mo
143.465 83.2 li
140.698 85.796 mo
140.698 80.6349 li
143.465 83.34 mo
148.347 83.34 li
145.999 85.967 mo
145.999 80.759 li
148.347 82.516 mo
152.544 82.516 li
150.508 84.91 mo
150.508 79.702 li
152.544 84.335 mo
156.757 84.335 li
154.721 86.776 mo
154.721 81.832 li
156.758 86.962 mo
161.546 86.962 li
159.245 89.59 mo
159.245 84.381 li
161.546 86.776 mo
167.174 86.776 li
164.484 89.434 mo
164.484 84.133 li
167.174 86.263 mo
172.802 86.263 li
170.112 88.921 mo
170.112 83.651 li
172.802 88.641 mo
177.808 88.641 li
175.398 90.04 mo
175.398 85.874 li
177.808 92.3719 mo
182.985 92.3719 li
180.497 95.311 mo
180.497 89.45 li
182.985 96.85 mo
188.193 96.85 li
185.69 99.089 mo
185.69 94.627 li
188.193 94.736 mo
193.743 94.736 li
191.085 97.145 mo
191.085 91.8589 li
193.743 96.166 mo
197.739 96.166 li
195.811 99.959 mo
195.811 92.093 li
197.739 104.406 mo
205.217 104.406 li
201.703 107.919 mo
201.703 96.943 li
0.6265 gry
@
67.877 108.619 mo
116.01 108.619 li
100.292 110.904 mo
100.292 106.333 li
116.01 103.83 mo
128.478 103.83 li
122.85 106.194 mo
122.85 99.788 li
128.478 103.706 mo
136.407 103.706 li
132.691 106.1 mo
132.691 99.571 li
136.407 101.001 mo
142.501 101.001 li
139.609 104.359 mo
139.609 97.27 li
142.501 104.654 mo
147.803 104.654 li
145.268 107.033 mo
145.268 101.53 li
147.803 102.043 mo
152.373 102.043 li
150.166 105.385 mo
150.166 98.451 li
152.373 95.855 mo
156.338 95.855 li
154.41 99.462 mo
154.41 91.8279 li
156.338 97.239 mo
159.96 97.239 li
158.203 100.877 mo
158.203 93.601 li
159.96 100.892 mo
163.256 100.892 li
161.655 104.204 mo
161.655 97.27 li
163.256 96.212 mo
166.365 96.212 li
164.842 99.913 mo
164.842 92.015 li
166.365 93.554 mo
169.179 93.554 li
167.796 97.503 mo
167.796 87.646 li
169.179 101.343 mo
171.884 101.343 li
170.563 104.763 mo
170.563 97.658 li
171.884 93.585 mo
174.341 93.585 li
173.144 97.5179 mo
173.144 87.506 li
174.341 88.424 mo
176.766 88.424 li
175.585 93.787 mo
175.585 82.811 li
176.766 94.0519 mo
179.129 94.0519 li
177.963 97.845 mo
177.963 88.8589 li
179.129 92.917 mo
181.352 92.917 li
180.264 96.788 mo
180.264 87.1949 li
181.352 95.715 mo
183.576 95.715 li
182.487 99.493 mo
182.487 91.191 li
183.576 90.212 mo
185.814 90.212 li
184.726 95.093 mo
184.726 84.584 li
185.814 90.6 mo
188.022 90.6 li
186.934 96.073 mo
186.934 84.7079 li
188.022 93.259 mo
190.198 93.259 li
189.126 97.099 mo
189.126 87.211 li
190.198 86.916 mo
192.468 86.916 li
191.349 92.746 mo
191.349 80.915 li
192.468 95.606 mo
194.8 95.606 li
193.65 99.368 mo
193.65 90.8799 li
194.8 86.605 mo
197.35 86.605 li
196.091 92.668 mo
196.091 80.65 li
197.35 85.112 mo
200.024 85.112 li
198.718 91.4399 mo
198.718 76.888 li
200.024 86.574 mo
202.62 86.574 li
201.345 92.652 mo
201.345 80.417 li
202.62 85.392 mo
205.854 85.392 li
204.284 94.642 mo
204.284 77.914 li
205.854 76.935 mo
208.715 76.935 li
208.217 85.454 mo
208.217 65.4919 li
0.6633 gry
@
67.877 83.977 mo
152.482 83.977 li
132.567 88.144 mo
132.567 79.189 li
152.482 86.713 mo
167.003 86.713 li
160.551 90.18 mo
160.551 81.257 li
167.003 83.558 mo
177.45 83.558 li
172.646 87.926 mo
172.646 78.5359 li
177.45 78.334 mo
186.079 78.334 li
182.052 83.728 mo
182.052 72.799 li
186.079 82.485 mo
193.261 82.485 li
189.872 87.926 mo
189.872 76.624 li
193.261 86.62 mo
199.698 86.62 li
196.65 91.02 mo
196.65 80.277 li
199.698 90.025 mo
206.336 90.025 li
203.196 94.316 mo
203.196 85.392 li
206.336 82.749 mo
208.715 82.749 li
0.7002 gry
@
67.877 94.409 mo
75.961 94.409 li
72.168 96.6479 mo
72.168 92.202 li
75.961 93.632 mo
86.004 93.632 li
81.371 95.793 mo
81.371 91.626 li
86.004 93.849 mo
92.363 93.849 li
89.331 96.0099 mo
89.331 91.735 li
92.363 94.0359 mo
97.12 94.0359 li
94.835 96.166 mo
94.835 91.9529 li
97.12 92.823 mo
100.929 92.823 li
99.079 95.062 mo
99.079 90.631 li
100.929 95.046 mo
104.178 95.046 li
102.593 97.425 mo
102.593 92.901 li
104.178 92.777 mo
107.008 92.777 li
105.624 94.9839 mo
105.624 90.6 li
107.008 92.901 mo
109.464 92.901 li
108.267 95.062 mo
108.267 90.8019 li
109.464 91.238 mo
111.765 91.238 li
110.63 93.352 mo
110.63 89.154 li
111.765 91.782 mo
113.786 91.782 li
112.791 93.9579 mo
112.791 89.652 li
113.786 93.259 mo
115.683 93.259 li
114.75 95.513 mo
114.75 91.035 li
115.683 91.129 mo
117.486 91.129 li
116.6 93.243 mo
116.6 89.045 li
117.486 89.559 mo
119.181 89.559 li
118.342 91.657 mo
118.342 87.522 li
119.181 92.077 mo
120.798 92.077 li
120.005 94.285 mo
120.005 90.087 li
120.798 93.352 mo
122.259 93.352 li
121.544 95.637 mo
121.544 92.202 li
122.259 91.626 mo
123.643 91.626 li
122.959 93.834 mo
122.959 89.605 li
123.643 90.351 mo
124.98 90.351 li
124.311 92.528 mo
124.311 88.206 li
124.98 90.227 mo
126.333 90.227 li
125.664 92.404 mo
125.664 88.237 li
126.333 90.585 mo
127.623 90.585 li
126.986 92.777 mo
126.986 88.532 li
127.623 88.797 mo
128.867 88.797 li
128.26 91.098 mo
128.26 86.542 li
128.867 88.735 mo
130.064 88.735 li
129.473 90.989 mo
129.473 86.527 li
130.064 86.232 mo
131.23 86.232 li
130.655 88.47 mo
130.655 83.728 li
131.23 88.113 mo
132.396 88.113 li
131.821 90.414 mo
131.821 85.858 li
132.396 89.123 mo
133.531 89.123 li
132.971 91.362 mo
132.971 87.04 li
133.531 85.827 mo
134.635 85.827 li
134.09 88.159 mo
134.09 82.702 li
134.635 87.149 mo
135.738 87.149 li
135.194 89.465 mo
135.194 85.003 li
135.738 88.7029 mo
136.764 88.7029 li
136.267 90.989 mo
136.267 86.527 li
136.764 89.201 mo
137.806 89.201 li
137.293 91.424 mo
137.293 87.009 li
137.806 86.838 mo
138.77 86.838 li
138.288 89.014 mo
138.288 84.739 li
138.77 86.7289 mo
139.749 86.7289 li
139.267 89.03 mo
139.267 84.35 li
139.749 85.361 mo
140.698 85.361 li
140.231 87.646 mo
140.231 82.7339 li
140.698 87.366 mo
141.615 87.366 li
141.164 89.652 mo
141.164 85.097 li
141.615 80.666 mo
142.517 80.666 li
142.081 83.775 mo
142.081 77.525 li
142.517 86.278 mo
143.387 86.278 li
142.952 88.626 mo
142.952 83.697 li
143.387 84.133 mo
144.289 84.133 li
143.838 86.776 mo
143.838 81.163 li
144.289 85.034 mo
145.144 85.034 li
144.724 87.3979 mo
144.724 81.878 li
145.144 85.034 mo
145.999 85.034 li
145.579 87.3979 mo
145.579 81.801 li
145.999 82.345 mo
146.808 82.345 li
146.403 85.283 mo
146.403 79.298 li
146.808 83.526 mo
147.647 83.526 li
147.243 86.154 mo
147.243 80.5099 li
147.647 87.553 mo
148.471 87.553 li
148.067 89.838 mo
148.067 85.33 li
148.471 85.205 mo
149.311 85.205 li
148.891 87.3979 mo
148.891 81.319 li
149.311 84.832 mo
150.15 84.832 li
149.73 87.133 mo
149.73 81.272 li
150.15 84.972 mo
150.974 84.972 li
150.57 87.3199 mo
150.57 81.521 li
150.974 82.562 mo
151.814 82.562 li
151.394 85.7809 mo
151.394 79.4839 li
151.814 86.2 mo
152.622 86.2 li
152.218 88.61 mo
152.218 83.449 li
152.622 85.905 mo
153.446 85.905 li
153.042 88.2679 mo
153.042 83.107 li
153.446 85.097 mo
154.254 85.097 li
153.866 87.429 mo
153.866 81.194 li
154.254 86.48 mo
155.11 86.48 li
154.69 88.843 mo
154.69 84.039 li
155.11 83.931 mo
155.934 83.931 li
155.514 87.087 mo
155.514 80.759 li
155.934 80.806 mo
156.757 80.806 li
156.338 84.102 mo
156.338 77.572 li
156.758 81.35 mo
157.597 81.35 li
157.177 84.475 mo
157.177 78.194 li
157.597 81.039 mo
158.437 81.039 li
158.017 84.319 mo
158.017 77.821 li
158.437 86.154 mo
159.292 86.154 li
158.856 88.548 mo
158.856 83.0439 li
159.292 85.299 mo
160.131 85.299 li
159.711 87.7079 mo
159.711 81.428 li
160.131 82.0959 mo
160.971 82.0959 li
160.551 85.299 mo
160.551 78.9709 li
160.971 85.112 mo
161.795 85.112 li
161.375 87.491 mo
161.375 81.6609 li
161.795 83.993 mo
162.634 83.993 li
162.214 87.118 mo
162.214 80.868 li
162.634 85.547 mo
163.443 85.547 li
163.038 88.004 mo
163.038 82.376 li
163.443 89.061 mo
164.282 89.061 li
163.862 91.4709 mo
163.862 86.6819 li
164.282 85.066 mo
165.091 85.066 li
164.686 87.413 mo
164.686 81.707 li
165.091 85.594 mo
165.915 85.594 li
165.51 87.957 mo
165.51 82.205 li
165.915 83.402 mo
166.723 83.402 li
166.319 86.605 mo
166.319 80.168 li
166.723 85.641 mo
167.547 85.641 li
167.143 88.128 mo
167.143 81.987 li
167.547 87.118 mo
168.355 87.118 li
167.951 89.636 mo
167.951 84.646 li
168.355 87.8019 mo
169.148 87.8019 li
168.76 90.46 mo
168.76 85.1429 li
169.148 83.822 mo
169.957 83.822 li
169.552 87.18 mo
169.552 80.5569 li
169.957 85.05 mo
170.765 85.05 li
170.361 87.506 mo
170.361 81.288 li
170.765 87.6 mo
171.558 87.6 li
171.154 90.056 mo
171.154 86.356 li
171.558 85.2679 mo
172.335 85.2679 li
171.947 87.7549 mo
171.947 81.614 li
172.335 83.915 mo
173.128 83.915 li
172.74 86.853 mo
172.74 80.744 li
173.128 87.8329 mo
173.921 87.8329 li
173.517 90.414 mo
173.517 85.283 li
173.921 83.666 mo
174.683 83.666 li
174.294 86.449 mo
174.294 80.5099 li
174.683 87.615 mo
175.414 87.615 li
175.056 90.243 mo
175.056 85.034 li
175.414 85.812 mo
176.16 85.812 li
175.787 88.3459 mo
175.787 82.687 li
176.16 82.423 mo
176.89 82.423 li
176.533 85.672 mo
176.533 79.049 li
176.89 86.2 mo
177.606 86.2 li
177.248 88.735 mo
177.248 82.905 li
177.606 87.957 mo
178.321 87.957 li
177.963 90.491 mo
177.963 85.454 li
178.321 86.185 mo
178.989 86.185 li
178.663 88.766 mo
178.663 82.765 li
178.989 85.283 mo
179.658 85.283 li
179.331 87.926 mo
179.331 80.9919 li
179.658 85.827 mo
180.326 85.827 li
180 88.3149 mo
180 82.6559 li
180.326 81.972 mo
180.979 81.972 li
180.668 85.672 mo
180.668 78.396 li
180.979 83.1689 mo
181.632 83.1689 li
181.306 86.527 mo
181.306 79.842 li
181.632 82.811 mo
182.254 82.811 li
181.943 86.651 mo
181.943 79.22 li
182.254 84.972 mo
182.876 84.972 li
182.565 87.74 mo
182.565 81.832 li
182.876 82.842 mo
183.498 82.842 li
183.187 86.309 mo
183.187 79.4839 li
183.498 86.2 mo
184.104 86.2 li
183.809 88.952 mo
183.809 82.594 li
184.104 83.666 mo
184.726 83.666 li
184.415 87.118 mo
184.415 80.168 li
184.726 83.262 mo
185.317 83.262 li
185.021 86.667 mo
185.021 79.811 li
185.317 82.0649 mo
185.908 82.0649 li
185.612 85.516 mo
185.612 78.614 li
185.908 88.408 mo
186.498 88.408 li
186.203 91.222 mo
186.203 85.625 li
186.498 80.573 mo
187.089 80.573 li
186.794 84.164 mo
186.794 77.059 li
187.089 82.189 mo
187.664 82.189 li
187.385 85.687 mo
187.385 78.5049 li
187.664 82.22 mo
188.24 82.22 li
187.96 85.827 mo
187.96 78.66 li
188.24 85.47 mo
188.815 85.47 li
188.535 88.299 mo
188.535 81.847 li
188.815 77.805 mo
189.375 77.805 li
189.095 81.6299 mo
189.095 73.996 li
189.374 77.308 mo
189.934 77.308 li
189.654 80.9919 mo
189.654 73.779 li
189.934 77.852 mo
190.494 77.852 li
190.214 81.614 mo
190.214 74.105 li
190.494 82.407 mo
191.069 82.407 li
190.789 86.076 mo
190.789 78.769 li
191.069 80.448 mo
191.644 80.448 li
191.364 84.133 mo
191.364 76.888 li
191.644 78.878 mo
192.235 78.878 li
191.955 82.6559 mo
191.955 75.022 li
0.712 gry
@
192.235 78.956 mo
192.841 78.956 li
192.546 82.5779 mo
192.546 75.3019 li
192.841 75.256 mo
193.463 75.256 li
193.152 79.08 mo
193.152 71.618 li
193.463 80.417 mo
194.116 80.417 li
193.79 84.444 mo
193.79 76.282 li
194.116 78.4269 mo
194.769 78.4269 li
194.443 82.392 mo
194.443 74.4 li
194.769 76.422 mo
195.453 76.422 li
195.111 80.277 mo
195.111 72.659 li
195.453 77.23 mo
196.153 77.23 li
195.811 81.101 mo
195.811 73.545 li
196.153 77.152 mo
196.868 77.152 li
196.51 81.1169 mo
196.51 73.343 li
196.868 77.059 mo
197.599 77.059 li
197.241 81.1169 mo
197.241 73.048 li
197.599 74.121 mo
198.361 74.121 li
197.987 78.116 mo
197.987 70.187 li
198.361 78.567 mo
199.169 78.567 li
198.765 82.625 mo
198.765 74.525 li
199.169 77.261 mo
199.977 77.261 li
199.573 81.101 mo
199.573 73.514 li
199.977 74.587 mo
200.801 74.587 li
200.397 78.691 mo
200.397 70.545 li
200.801 82.547 mo
201.672 82.547 li
201.237 86.449 mo
201.237 78.318 li
201.672 77.681 mo
202.589 77.681 li
202.138 81.801 mo
202.138 73.732 li
202.589 76.748 mo
203.553 76.748 li
203.071 81.1479 mo
203.071 72.3019 li
203.553 75.566 mo
204.564 75.566 li
204.066 79.749 mo
204.066 71.509 li
204.564 83.558 mo
205.621 83.558 li
205.108 87.879 mo
205.108 79.36 li
205.621 81.443 mo
206.802 81.443 li
206.212 85.501 mo
206.212 77.339 li
206.802 81.568 mo
208.031 81.568 li
207.424 86.076 mo
207.424 77.292 li
208.031 81.832 mo
208.715 81.832 li
208.699 86.123 mo
208.699 77.5099 li
@
67.877 76.142 mo
159.618 76.142 li
139.283 81.941 mo
139.283 70.016 li
159.618 84.319 mo
173.89 84.319 li
167.547 88.735 mo
167.547 79.329 li
173.89 86.869 mo
182.767 86.869 li
178.632 91.191 mo
178.632 82.376 li
182.767 87.18 mo
189.934 87.18 li
186.561 91.595 mo
186.561 82.78 li
189.934 88.237 mo
196.168 88.237 li
193.199 93.103 mo
193.199 83.371 li
196.168 84.288 mo
201.641 84.288 li
199.029 89.45 mo
199.029 77.961 li
201.641 81.847 mo
208.015 81.847 li
204.983 87.04 mo
204.983 74.727 li
208.015 85.796 mo
208.715 85.796 li
0.7239 gry
@
67.877 73.063 mo
176.02 73.063 li
155.001 78.909 mo
155.001 64.435 li
176.02 76.624 mo
188.815 76.624 li
183.063 81.5359 mo
183.063 71.042 li
188.815 79.546 mo
196.961 79.546 li
193.152 84.537 mo
193.152 74.494 li
196.961 83.386 mo
203.506 83.386 li
200.397 87.973 mo
200.397 78.334 li
203.506 89.201 mo
208.715 89.201 li
206.491 92.792 mo
206.491 84.739 li
0.7357 gry
@
67.877 83.1219 mo
147.119 83.1219 li
127.592 88.937 mo
127.592 75.9709 li
147.119 74.8979 mo
161.453 74.8979 li
155.094 82.998 mo
155.094 65.632 li
161.453 79.842 mo
169.521 79.842 li
165.743 85.967 mo
165.743 72.753 li
169.521 84.133 mo
175.662 84.133 li
172.74 90.8019 mo
172.74 76.53 li
175.662 83.977 mo
180.668 83.977 li
178.274 90.989 mo
178.274 76.437 li
180.668 82.283 mo
185.659 82.283 li
183.265 89.217 mo
183.265 74.292 li
185.659 69.5649 mo
190.478 69.5649 li
188.162 79.002 mo
188.162 59.569 li
190.478 86.1689 mo
194.8 86.1689 li
192.717 93.274 mo
192.717 79.4529 li
194.8 86.029 mo
200.537 86.029 li
197.801 94.5649 mo
197.801 77.246 li
200.537 93.912 mo
208.715 93.912 li
205.636 100.084 mo
205.636 84.863 li
0.7476 gry
@
67.877 96.041 mo
96.141 96.041 li
85.04 97.674 mo
85.04 94.627 li
96.141 93.772 mo
113.771 93.772 li
106.168 95.217 mo
106.168 92.528 li
113.771 86.527 mo
129.52 86.527 li
122.617 89.543 mo
122.617 83.355 li
129.52 82.0959 mo
141.599 82.0959 li
136.127 85.47 mo
136.127 79.158 li
141.599 79.64 mo
151.347 79.64 li
146.839 83.0439 mo
146.839 76.8409 li
151.347 80.712 mo
159.68 80.712 li
155.778 85.081 mo
155.778 77.106 li
159.68 81.474 mo
167.656 81.474 li
163.925 86.2939 mo
163.925 77.448 li
167.656 80.277 mo
174.419 80.277 li
171.216 85.128 mo
171.216 76.375 li
174.419 80.013 mo
180.015 80.013 li
177.341 84.692 mo
177.341 76.204 li
180.015 86.2469 mo
187.742 86.2469 li
184.12 91.766 mo
184.12 81.723 li
187.742 90.3669 mo
208.715 90.3669 li
206.196 93.849 mo
206.196 84.848 li
0.7594 gry
@
67.877 83.931 mo
136.298 83.931 li
117.751 88.33 mo
117.751 79.655 li
136.298 85.516 mo
151.114 85.516 li
144.553 89.232 mo
144.553 81.163 li
151.114 83.355 mo
161.375 83.355 li
156.664 87.9109 mo
156.664 78.9399 li
161.375 80.277 mo
170.252 80.277 li
166.117 84.957 mo
166.117 75.566 li
170.252 77.168 mo
178.041 77.168 li
174.387 81.972 mo
174.387 72.317 li
178.041 81.101 mo
185.224 81.101 li
181.834 86.029 mo
181.834 76.188 li
185.224 80.5099 mo
191.815 80.5099 li
188.69 85.439 mo
188.69 75.535 li
191.815 85.128 mo
198.329 85.128 li
195.236 88.797 mo
195.236 80.013 li
198.329 89.823 mo
205.621 89.823 li
202.185 93.538 mo
202.185 85.905 li
205.621 92.683 mo
208.715 92.683 li
0.7712 gry
@
67.877 96.259 mo
145.237 96.259 li
125.851 100.255 mo
125.851 92.217 li
145.237 91.3149 mo
159.214 91.3149 li
152.98 95.731 mo
152.98 85.33 li
159.214 91.222 mo
168.418 91.222 li
164.142 95.668 mo
164.142 85.252 li
168.418 86.947 mo
175.289 86.947 li
172.04 92.8539 mo
172.04 80.821 li
175.289 88.237 mo
180.762 88.237 li
178.134 93.912 mo
178.134 81.5829 li
180.762 83.868 mo
185.239 83.868 li
183.078 89.963 mo
183.078 76.67 li
185.239 76.779 mo
190.37 76.779 li
187.913 84.584 mo
187.913 64.87 li
190.369 70.607 mo
197.847 70.607 li
194.334 81.163 mo
194.334 57.688 li
197.847 70.016 mo
204.128 70.016 li
201.143 76.048 mo
201.143 56.553 li
204.128 89.543 mo
208.715 89.543 li
206.989 95.062 mo
206.989 82.765 li
0.7831 gry
@
67.877 107.095 mo
101.536 107.095 li
88.958 108.184 mo
88.958 103.986 li
101.536 98.498 mo
116.46 98.498 li
109.869 100.192 mo
109.869 96.85 li
116.46 95.093 mo
125.509 95.093 li
121.295 97.5649 mo
121.295 92.715 li
125.509 90.025 mo
132.131 90.025 li
128.991 92.404 mo
128.991 87.693 li
132.131 91.409 mo
137.371 91.409 li
134.868 93.943 mo
134.868 88.9059 li
137.371 90.9109 mo
141.91 90.9109 li
139.718 93.554 mo
139.718 88.253 li
141.91 82.0179 mo
145.875 82.0179 li
143.963 85.7029 mo
143.963 78.101 li
145.875 86.014 mo
149.544 86.014 li
147.771 88.564 mo
147.771 82.5 li
149.544 88.735 mo
153.042 88.735 li
151.347 91.517 mo
151.347 85.936 li
153.042 87.491 mo
156.322 87.491 li
154.721 90.18 mo
154.721 84.817 li
156.322 86.745 mo
159.447 86.745 li
157.923 89.512 mo
157.923 83.62 li
159.447 86.2939 mo
162.401 86.2939 li
160.955 88.968 mo
160.955 82.967 li
162.401 80.324 mo
165.23 80.324 li
163.847 84.428 mo
163.847 76.251 li
165.23 85.097 mo
167.982 85.097 li
166.63 87.8329 mo
166.63 80.759 li
167.982 83.433 mo
170.579 83.433 li
169.304 86.822 mo
169.304 79.407 li
170.579 80.0439 mo
173.221 80.0439 li
171.931 84.1479 mo
171.931 75.955 li
173.221 82.5309 mo
175.88 82.5309 li
174.574 86.2159 mo
174.574 78.4269 li
175.88 82.796 mo
178.461 82.796 li
177.201 86.278 mo
177.201 78.754 li
178.461 84.972 mo
181.088 84.972 li
179.798 87.864 mo
179.798 80.106 li
181.088 81.956 mo
184.182 81.956 li
182.674 85.827 mo
182.674 77.603 li
184.182 85.501 mo
188.644 85.501 li
186.498 88.47 mo
186.498 80.402 li
188.644 93.0099 mo
195.655 93.0099 li
192.344 96.212 mo
192.344 89.823 li
195.655 90.165 mo
208.715 90.165 li
207.486 93.9269 mo
207.486 86.511 li
0.7949 gry
@
67.877 77.214 mo
159.121 77.214 li
138.817 80.0909 mo
138.817 74.012 li
159.121 78.862 mo
172.04 78.862 li
166.225 81.086 mo
166.225 75.753 li
172.04 81.0229 mo
181.694 81.0229 li
177.233 83.34 mo
177.233 78.676 li
181.694 81.785 mo
189.328 81.785 li
185.737 84.055 mo
185.737 79.4839 li
189.328 86.356 mo
195.889 86.356 li
192.779 88.657 mo
192.779 84.024 li
195.889 88.439 mo
201.765 88.439 li
198.967 90.756 mo
198.967 86.092 li
201.765 90.056 mo
207.611 90.056 li
204.828 92.435 mo
204.828 87.615 li
207.611 90.429 mo
208.715 90.429 li
0.8068 gry
@
67.877 86.1689 mo
125.011 86.1689 li
107.848 89.092 mo
107.848 83.2 li
125.011 84.6609 mo
139.003 84.6609 li
132.769 87.942 mo
132.769 80.293 li
139.003 88.222 mo
148.129 88.222 li
143.885 91.269 mo
143.885 85.159 li
148.129 85.361 mo
154.596 85.361 li
151.518 88.455 mo
151.518 81.614 li
154.596 85.812 mo
159.882 85.812 li
157.348 88.983 mo
157.348 82.594 li
159.882 81.086 mo
164.5 81.086 li
162.277 84.926 mo
162.277 76.39 li
164.5 83.433 mo
168.682 83.433 li
166.645 86.838 mo
166.645 77.836 li
168.682 83.822 mo
172.708 83.822 li
170.75 87.164 mo
170.75 78.645 li
172.708 85.501 mo
176.611 85.501 li
174.714 88.7809 mo
174.714 82.003 li
176.611 83.511 mo
180.42 83.511 li
178.57 87.024 mo
178.57 78.349 li
180.42 78.987 mo
184.166 78.987 li
182.347 84.039 mo
182.347 73.8409 li
184.166 83.9 mo
187.82 83.9 li
186.048 87.429 mo
186.048 78.241 li
187.82 82.6089 mo
191.567 82.6089 li
189.748 86.138 mo
189.748 77.619 li
191.567 78.847 mo
195.298 78.847 li
193.494 83.853 mo
193.494 73.623 li
195.298 79.251 mo
199.184 79.251 li
197.303 84.008 mo
197.303 73.887 li
199.184 84.6299 mo
203.367 84.6299 li
201.345 88.47 mo
201.345 79.686 li
203.367 85.2209 mo
208.279 85.2209 li
205.916 89.3409 mo
205.916 80.075 li
208.279 83.775 mo
208.715 83.775 li
0.8186 gry
@
67.877 91.3929 mo
129.473 91.3929 li
111.688 94.362 mo
111.688 88.517 li
129.473 88.921 mo
146.217 88.921 li
138.925 91.891 mo
138.925 86.029 li
146.217 87.258 mo
159.058 87.258 li
153.275 90.336 mo
153.275 84.304 li
159.058 82.92 mo
171.558 82.92 li
165.915 86.029 mo
165.915 79.189 li
171.558 77.541 mo
184.757 77.541 li
178.834 82.189 mo
178.834 72.908 li
184.757 83.371 mo
201.081 83.371 li
193.961 87.118 mo
193.961 78.738 li
201.081 90.756 mo
208.715 90.756 li
0.8304 gry
@
67.877 80.277 mo
150.601 80.277 li
130.81 84.537 mo
130.81 76.142 li
150.601 81.257 mo
167.36 81.257 li
160.069 85.112 mo
160.069 76.686 li
167.36 80.899 mo
178.834 80.899 li
173.61 85.299 mo
173.61 75.862 li
178.834 71.2289 mo
189.297 71.2289 li
184.493 76.266 mo
184.493 65.71 li
189.297 75.8149 mo
206.802 75.8149 li
199.247 82.112 mo
199.247 69.519 li
206.802 96.757 mo
208.715 96.757 li
0.8423 gry
@
67.877 98.296 mo
128.183 98.296 li
110.568 99.928 mo
110.568 96.788 li
128.183 92.761 mo
149.077 92.761 li
140.309 93.9579 mo
140.309 91.673 li
149.077 84.848 mo
166.894 84.848 li
159.214 88.486 mo
159.214 81.77 li
166.894 80.137 mo
184.182 80.137 li
176.704 83.558 mo
176.704 77.121 li
184.182 93.165 mo
208.715 93.165 li
204.688 98.405 mo
204.688 86.045 li
0.8541 gry
@
67.877 120.232 mo
109.185 120.232 li
94.804 121.756 mo
94.804 118.709 li
109.185 114.278 mo
127.125 114.278 li
119.399 116.641 mo
119.399 111.744 li
127.125 101.421 mo
142.066 101.421 li
135.458 105.634 mo
135.458 94.891 li
142.066 86.822 mo
156.011 86.822 li
149.793 94.129 mo
149.793 76.624 li
156.011 85.967 mo
169.07 85.967 li
163.194 93.787 mo
163.194 76.095 li
169.07 79.562 mo
181.881 79.562 li
176.113 88.921 mo
176.113 64.14 li
181.881 82.873 mo
196.635 82.873 li
190.105 91.844 mo
190.105 69.519 li
196.635 82.003 mo
208.715 82.003 li
207.766 92.248 mo
207.766 66.907 li
0.866 gry
@
67.877 76.888 mo
146.061 76.888 li
126.612 87.8019 mo
126.612 62.181 li
146.061 79.764 mo
158.063 79.764 li
152.622 90.569 mo
152.622 64.762 li
158.063 76.033 mo
165.339 76.033 li
161.903 87.2419 mo
161.903 59.413 li
165.339 81.5049 mo
170.734 81.5049 li
168.153 91.284 mo
168.153 67.467 li
170.734 91.129 mo
175.165 91.129 li
173.019 99.415 mo
173.019 80.526 li
175.165 84.21 mo
178.912 84.21 li
177.093 94.129 mo
177.093 71.524 li
178.912 86.2 mo
182.316 86.2 li
180.653 95.0309 mo
180.653 74.665 li
182.316 92.4969 mo
185.457 92.4969 li
183.918 100.457 mo
183.918 82.189 li
185.457 94.145 mo
188.488 94.145 li
186.996 101.592 mo
186.996 84.6609 li
188.488 101.281 mo
191.427 101.281 li
189.996 106.582 mo
189.996 92.792 li
191.427 84.723 mo
194.489 84.723 li
192.997 96.71 mo
192.997 71.54 li
194.489 90.818 mo
197.739 90.818 li
196.153 99.555 mo
196.153 79.438 li
197.739 80.883 mo
201.314 80.883 li
199.573 95.404 mo
199.573 62.9579 li
201.314 88.937 mo
205.077 88.937 li
203.242 98.545 mo
203.242 75.955 li
205.077 83.153 mo
208.715 83.153 li
207.082 94.269 mo
207.082 67.342 li
0.8778 gry
@
67.877 113.454 mo
93.094 113.454 li
82.926 114.713 mo
82.926 111.557 li
93.094 113.811 mo
105.531 113.811 li
99.919 114.993 mo
99.919 112.614 li
105.531 107.22 mo
113.957 107.22 li
110.024 109.054 mo
110.024 105.37 li
113.957 100.954 mo
120.518 100.954 li
117.409 103.768 mo
117.409 98.0309 li
120.518 99.1349 mo
125.866 99.1349 li
123.301 102.043 mo
123.301 96.119 li
125.866 97.27 mo
130.592 97.27 li
128.307 100.426 mo
128.307 93.5229 li
130.592 93.476 mo
134.697 93.476 li
132.707 97.0359 mo
132.707 89.092 li
134.697 96.337 mo
138.35 96.337 li
136.578 99.337 mo
136.578 92.108 li
138.35 93.305 mo
141.568 93.305 li
139.998 96.928 mo
139.998 88.983 li
141.568 90.8329 mo
144.476 90.8329 li
143.061 95.264 mo
143.061 86.263 li
144.476 86.107 mo
147.196 86.107 li
145.875 90.896 mo
145.875 80.775 li
147.196 92.186 mo
149.746 92.186 li
148.502 96.446 mo
148.502 87.584 li
149.746 92.948 mo
152.171 92.948 li
150.99 97.114 mo
150.99 88.626 li
152.171 87.848 mo
154.394 87.848 li
153.306 92.512 mo
153.306 83.013 li
154.394 87.211 mo
156.54 87.211 li
155.498 91.642 mo
155.498 82.702 li
156.54 87.1949 mo
158.639 87.1949 li
157.613 91.595 mo
157.613 82.671 li
158.639 87.662 mo
160.644 87.662 li
159.665 92.124 mo
159.665 83.076 li
160.644 85.858 mo
162.572 85.858 li
161.624 90.491 mo
161.624 80.464 li
162.572 82.796 mo
164.422 82.796 li
163.52 88.082 mo
163.52 75.769 li
164.422 79.811 mo
166.272 79.811 li
165.355 85.905 mo
165.355 72.519 li
166.272 82.205 mo
168.107 82.205 li
167.189 87.18 mo
167.189 75.3019 li
168.107 87.1949 mo
169.879 87.1949 li
168.993 91.9059 mo
168.993 82.252 li
169.879 73.701 mo
171.636 73.701 li
170.765 80.946 mo
170.765 66.347 li
171.636 71.011 mo
173.361 71.011 li
172.506 78.629 mo
172.506 61.015 li
173.361 76.4059 mo
175.103 76.4059 li
174.248 83.433 mo
174.248 68.804 li
175.103 82.236 mo
176.813 82.236 li
175.973 87.304 mo
175.973 72.8149 li
176.813 76.67 mo
178.507 76.67 li
177.668 83.6039 mo
177.668 69.363 li
178.507 80.1219 mo
180.202 80.1219 li
179.362 85.547 mo
179.362 72.659 li
180.202 79.935 mo
181.912 79.935 li
181.073 86.7289 mo
181.073 72.364 li
181.912 73.732 mo
183.7 73.732 li
182.814 81.194 mo
182.814 66.0049 li
183.7 77.8669 mo
185.472 77.8669 li
184.586 84.1479 mo
184.586 70.452 li
185.472 71.7419 mo
187.322 71.7419 li
186.405 79.5 mo
186.405 63.347 li
187.322 74.836 mo
189.157 74.836 li
188.255 82.345 mo
188.255 66.985 li
189.157 79.298 mo
191.022 79.298 li
190.105 85.672 mo
190.105 71.726 li
191.022 74.991 mo
192.966 74.991 li
192.017 82.454 mo
192.017 67.202 li
192.966 71.073 mo
194.94 71.073 li
193.976 79.064 mo
193.976 61.808 li
194.94 79.873 mo
196.992 79.873 li
195.982 86.8069 mo
195.982 71.493 li
196.992 73.405 mo
199.045 73.405 li
198.034 81.568 mo
198.034 64.435 li
199.045 81.0229 mo
201.174 81.0229 li
200.133 86.7599 mo
200.133 73.032 li
201.174 76.95 mo
203.367 76.95 li
202.294 84.381 mo
202.294 68.259 li
203.367 75.085 mo
205.823 75.085 li
204.61 83.309 mo
204.61 66.238 li
205.823 76.67 mo
208.45 76.67 li
207.16 84.102 mo
207.16 67.762 li
208.45 85.501 mo
208.715 85.501 li
0.8896 gry
@
67.877 88.874 mo
148.316 88.874 li
128.696 92.03 mo
128.696 85.641 li
148.316 91.766 mo
159.385 91.766 li
154.332 94.782 mo
154.332 88.7029 li
159.385 88.937 mo
167.112 88.937 li
163.489 91.782 mo
163.489 86.076 li
167.112 86.076 mo
173.812 86.076 li
170.641 89.31 mo
170.641 82.78 li
173.812 85.314 mo
180.046 85.314 li
177.077 88.439 mo
177.077 82.127 li
180.046 84.599 mo
185.581 84.599 li
182.938 88.004 mo
182.938 80.573 li
185.581 80.386 mo
190.649 80.386 li
188.208 84.91 mo
188.208 75.3329 li
190.649 84.2729 mo
195.624 84.2729 li
193.23 87.771 mo
193.23 79.391 li
195.624 84.6609 mo
200.288 84.6609 li
198.05 88.2679 mo
198.05 80.324 li
200.288 81.599 mo
204.828 81.599 li
202.651 85.921 mo
202.651 76.188 li
204.828 79.422 mo
208.715 79.422 li
207.176 84.1479 mo
207.176 73.825 li
0.8528 gry
@
67.877 119.533 mo
75.153 119.533 li
71.717 120.263 mo
71.717 118.833 li
75.153 117.729 mo
87.062 117.729 li
81.667 118.382 mo
81.667 117.123 li
87.062 114.045 mo
94.571 114.045 li
91.042 115.071 mo
91.042 113.081 li
94.571 111.821 mo
100.556 111.821 li
97.696 112.832 mo
97.696 111.013 li
100.556 111.728 mo
105.36 111.728 li
103.044 112.708 mo
103.044 110.811 li
105.36 109.94 mo
109.729 109.94 li
107.63 110.873 mo
107.63 108.526 li
109.729 107.531 mo
113.693 107.531 li
111.781 109.023 mo
111.781 106.225 li
113.693 106.427 mo
117.113 106.427 li
115.45 107.888 mo
115.45 105.68 li
117.113 105.789 mo
120.207 105.789 li
118.699 107.251 mo
118.699 104.375 li
120.207 105.136 mo
123.052 105.136 li
121.669 106.644 mo
121.669 103.691 li
123.052 104.981 mo
125.726 104.981 li
124.42 106.551 mo
124.42 103.457 li
125.726 102.322 mo
128.245 102.322 li
127.017 103.861 mo
127.017 100.83 li
128.245 103.939 mo
130.592 103.939 li
129.442 105.463 mo
129.442 102.462 li
130.592 101.483 mo
132.784 101.483 li
131.712 103.038 mo
131.712 99.6169 li
132.784 101.794 mo
134.852 101.794 li
133.826 103.224 mo
133.826 99.882 li
134.852 101.483 mo
136.858 101.483 li
135.863 102.991 mo
135.863 98.98 li
136.858 99.1349 mo
138.708 99.1349 li
137.79 101.25 mo
137.79 97.021 li
138.708 98.871 mo
140.511 98.871 li
139.625 101.063 mo
139.625 96.741 li
140.511 95.777 mo
142.299 95.777 li
141.413 97.985 mo
141.413 93.616 li
142.299 99.524 mo
143.978 99.524 li
143.154 101.561 mo
143.154 97.347 li
143.978 98.467 mo
145.579 98.467 li
144.787 100.69 mo
144.787 96.275 li
145.579 99.897 mo
147.119 99.897 li
146.357 102.027 mo
146.357 97.658 li
147.119 97.752 mo
148.595 97.752 li
147.865 99.944 mo
147.865 95.5909 li
148.595 96.399 mo
150.026 96.399 li
149.326 98.576 mo
149.326 94.254 li
150.026 96.865 mo
151.409 96.865 li
150.725 99.213 mo
150.725 94.533 li
151.409 93.772 mo
152.746 93.772 li
152.093 96.026 mo
152.093 91.564 li
152.746 94.238 mo
154.13 94.238 li
153.446 96.555 mo
153.446 91.9839 li
154.13 93.088 mo
155.529 93.088 li
154.845 95.42 mo
154.845 90.818 li
155.529 90.258 mo
156.913 90.258 li
156.229 92.559 mo
156.229 86.589 li
156.913 88.175 mo
158.266 88.175 li
157.597 91.797 mo
157.597 84.615 li
158.266 88.439 mo
159.587 88.439 li
158.934 91.3459 mo
158.934 84.988 li
159.587 88.983 mo
160.893 88.983 li
160.255 92.139 mo
160.255 85.392 li
160.893 88.066 mo
162.199 88.066 li
161.561 91.004 mo
161.561 84.521 li
162.199 85.2209 mo
163.458 85.2209 li
162.836 88.672 mo
162.836 81.816 li
163.458 84.739 mo
164.733 84.739 li
164.111 88.222 mo
164.111 81.35 li
164.733 85.314 mo
165.946 85.314 li
165.339 88.921 mo
165.339 81.785 li
165.946 90.025 mo
167.143 90.025 li
166.552 92.59 mo
166.552 85.796 li
167.143 87.071 mo
168.324 87.071 li
167.733 90.585 mo
167.733 83.511 li
168.324 83.1219 mo
169.444 83.1219 li
168.884 86.931 mo
168.884 79.313 li
169.444 83.309 mo
170.579 83.309 li
170.019 86.916 mo
170.019 79.733 li
170.579 81.443 mo
171.667 81.443 li
171.123 84.972 mo
171.123 77.914 li
171.667 86.232 mo
172.74 86.232 li
172.211 90.103 mo
172.211 82.298 li
172.74 80.526 mo
173.812 80.526 li
173.284 84.428 mo
173.284 76.593 li
173.812 80.806 mo
174.885 80.806 li
174.356 84.475 mo
174.356 77.214 li
174.885 82.127 mo
175.927 82.127 li
175.398 85.998 mo
175.398 78.256 li
175.927 80.0909 mo
176.968 80.0909 li
176.44 83.884 mo
176.44 76.297 li
176.968 81.1479 mo
178.041 81.1479 li
177.512 84.848 mo
177.512 77.494 li
178.041 84.848 mo
179.114 84.848 li
178.585 88.688 mo
178.585 81.054 li
179.114 83.589 mo
180.217 83.589 li
179.658 87.429 mo
179.658 79.749 li
180.217 80.153 mo
181.306 80.153 li
180.762 83.744 mo
180.762 76.655 li
181.306 79.033 mo
182.41 79.033 li
181.865 82.905 mo
181.865 74.758 li
182.41 82.0959 mo
183.529 82.0959 li
182.969 85.998 mo
182.969 78.256 li
183.529 79.9969 mo
184.679 79.9969 li
184.104 84.1479 mo
184.104 75.613 li
184.679 79.329 mo
185.954 79.329 li
185.317 83.262 mo
185.317 74.618 li
185.954 83.2 mo
187.353 83.2 li
186.669 87.164 mo
186.669 79.22 li
187.353 79.951 mo
188.893 79.951 li
188.131 84.024 mo
188.131 75.8149 li
188.893 82.0179 mo
190.556 82.0179 li
189.732 85.858 mo
189.732 78.209 li
190.556 82.485 mo
192.499 82.485 li
191.535 86.6819 mo
191.535 78.225 li
192.499 84.879 mo
194.629 84.879 li
193.572 88.874 mo
193.572 80.93 li
194.629 86.263 mo
197.055 86.263 li
195.873 90.243 mo
195.873 82.081 li
197.055 91.3149 mo
199.853 91.3149 li
198.485 94.238 mo
198.485 87.724 li
199.853 91.02 mo
202.931 91.02 li
201.439 94.02 mo
201.439 87.024 li
202.931 94.689 mo
205.901 94.689 li
204.455 97.985 mo
204.455 91.4709 li
205.901 94.844 mo
208.715 94.844 li
207.502 98.296 mo
207.502 91.4399 li
0.8159 gry
@
67.877 112.07 mo
114.004 112.07 li
98.659 112.77 mo
98.659 111.417 li
114.004 103.022 mo
133.64 103.022 li
125.322 104.172 mo
125.322 100.97 li
133.64 99.089 mo
147.305 99.089 li
141.211 100.97 mo
141.211 97.27 li
147.305 87.662 mo
159.245 87.662 li
153.835 90.414 mo
153.835 85.003 li
159.245 81.692 mo
167.92 81.692 li
163.878 84.615 mo
163.878 78.831 li
167.92 79.0959 mo
175.258 79.0959 li
171.807 82.112 mo
171.807 74.634 li
175.258 79.889 mo
181.757 79.889 li
178.678 83.153 mo
178.678 75.691 li
181.757 79.344 mo
187.618 79.344 li
184.819 82.6089 mo
184.819 74.991 li
187.618 75.753 mo
193.65 75.753 li
190.774 80.93 mo
190.774 70.965 li
193.65 79.438 mo
199.76 79.438 li
196.852 82.951 mo
196.852 74.805 li
199.76 76.033 mo
208.715 76.033 li
204.595 81.0699 mo
204.595 70.778 li
0.7791 gry
@
67.877 80.697 mo
115.357 80.697 li
99.748 86.356 mo
99.748 74.572 li
115.357 80.153 mo
127.017 80.153 li
121.715 85.563 mo
121.715 74.183 li
127.017 79.982 mo
134.028 79.982 li
130.717 85.687 mo
130.717 74.012 li
134.028 82.905 mo
139.283 82.905 li
136.764 86.713 mo
136.764 76.142 li
139.283 83.7599 mo
143.558 83.7599 li
141.491 87.7859 mo
141.491 76.95 li
143.558 82.92 mo
147.352 82.92 li
145.517 86.853 mo
145.517 74.463 li
147.352 83.309 mo
150.71 83.309 li
149.077 87.211 mo
149.077 75.675 li
150.71 87.289 mo
153.633 87.289 li
152.202 91.051 mo
152.202 83.526 li
153.633 86.154 mo
156.291 86.154 li
154.985 90.056 mo
154.985 81.863 li
156.291 73.063 mo
158.701 73.063 li
157.519 79.22 mo
157.519 66.814 li
158.701 77.976 mo
160.971 77.976 li
159.851 83.977 mo
159.851 71.649 li
160.971 83.915 mo
163.054 83.915 li
162.028 88.019 mo
162.028 77.821 li
163.054 78.318 mo
164.997 78.318 li
164.049 84.506 mo
164.049 71.7729 li
164.997 77.277 mo
166.909 77.277 li
165.977 83.526 mo
165.977 70.918 li
166.91 76.8409 mo
168.728 76.8409 li
167.842 83.06 mo
167.842 70.498 li
168.728 79.0179 mo
170.439 79.0179 li
169.599 84.6769 mo
169.599 72.7679 li
170.439 84.008 mo
172.195 84.008 li
171.325 88.237 mo
171.325 77.525 li
172.195 83.713 mo
173.937 83.713 li
173.082 87.74 mo
173.082 76.313 li
173.937 78.8 mo
175.709 78.8 li
174.838 84.133 mo
174.838 72.644 li
175.709 75.9709 mo
177.31 75.9709 li
176.517 82.438 mo
176.517 69.503 li
177.31 84.817 mo
178.912 84.817 li
178.119 88.937 mo
178.119 78.645 li
178.912 83.402 mo
180.435 83.402 li
179.689 87.537 mo
179.689 76.282 li
180.435 78.349 mo
181.928 78.349 li
181.197 83.931 mo
181.197 72.053 li
181.928 80.9919 mo
183.436 80.9919 li
182.689 87.056 mo
182.689 74.587 li
183.436 89.139 mo
184.99 89.139 li
184.229 93.321 mo
184.229 84.91 li
184.99 85.718 mo
186.654 85.718 li
185.83 89.8849 mo
185.83 80.65 li
186.654 85.376 mo
188.473 85.376 li
187.571 89.683 mo
187.571 79.842 li
188.473 87.335 mo
190.416 87.335 li
189.468 91.3149 mo
189.468 83.355 li
190.416 87.942 mo
192.499 87.942 li
191.473 92.093 mo
191.473 83.775 li
192.499 87.522 mo
195.578 87.522 li
194.07 91.968 mo
194.07 82.982 li
195.578 88.9059 mo
201.765 88.9059 li
198.827 93.165 mo
198.827 84.615 li
201.765 95.777 mo
207.937 95.777 li
204.999 98.964 mo
204.999 90.631 li
207.937 95.389 mo
208.715 95.389 li
0.7422 gry
@
67.877 90.3669 mo
157.348 90.3669 li
137.153 96.1349 mo
137.153 84.521 li
157.348 92.668 mo
168.635 92.668 li
163.489 97.876 mo
163.489 86.838 li
168.635 99.462 mo
175.88 99.462 li
172.46 103.022 mo
172.46 95.373 li
175.88 88.548 mo
181.383 88.548 li
178.741 94.3 mo
178.741 80.448 li
181.383 78.878 mo
185.876 78.878 li
183.7 87.537 mo
183.7 69.752 li
185.876 83.558 mo
190.276 83.558 li
188.146 90.725 mo
188.146 74.882 li
190.276 86.869 mo
194.847 86.869 li
192.639 92.481 mo
192.639 78.629 li
194.847 75.256 mo
199.262 75.256 li
197.132 84.723 mo
197.132 64.14 li
199.262 74.478 mo
207.129 74.478 li
203.444 83.806 mo
203.444 62.476 li
207.129 82.827 mo
208.715 82.827 li
0.7053 gry
@
67.877 104.903 mo
96.452 104.903 li
85.258 106.738 mo
85.258 101.685 li
96.452 106.162 mo
112.683 106.162 li
105.593 107.251 mo
105.593 105.121 li
112.683 103.395 mo
121.156 103.395 li
117.191 105.758 mo
117.191 101.716 li
121.156 101.716 mo
127.312 101.716 li
124.389 103.426 mo
124.389 100.068 li
127.312 97.27 mo
132.178 97.27 li
129.846 98.887 mo
129.846 95.715 li
132.178 93.336 mo
136.267 93.336 li
134.292 96.959 mo
134.292 90.9269 li
136.267 91.72 mo
139.78 91.72 li
138.07 94.067 mo
138.07 89.31 li
139.78 89.014 mo
142.797 89.014 li
141.32 91.362 mo
141.32 86.651 li
142.797 91.688 mo
145.517 91.688 li
144.18 94.114 mo
144.18 89.279 li
145.517 88.082 mo
147.943 88.082 li
146.745 90.507 mo
146.745 85.672 li
147.943 89.2939 mo
150.181 89.2939 li
149.077 91.891 mo
149.077 88.035 li
150.181 87.662 mo
152.28 87.662 li
151.254 90.243 mo
151.254 85.1899 li
152.28 86.185 mo
154.254 86.185 li
153.275 88.7809 mo
153.275 83.728 li
154.254 86.34 mo
156.089 86.34 li
155.187 89.014 mo
155.187 83.728 li
156.089 83.526 mo
157.861 83.526 li
156.991 86.232 mo
156.991 80.464 li
157.861 85.921 mo
159.556 85.921 li
158.716 88.672 mo
158.716 83.2 li
159.556 80.541 mo
161.219 80.541 li
160.395 84.397 mo
160.395 76.375 li
161.219 85.112 mo
162.805 85.112 li
162.028 87.8329 mo
162.028 82.407 li
162.805 83.9 mo
164.422 83.9 li
163.629 86.62 mo
163.629 81.008 li
164.422 82.625 mo
166.039 82.625 li
165.23 85.283 mo
165.23 78.365 li
166.039 82.562 mo
167.578 82.562 li
166.816 83.931 mo
166.816 77.9919 li
167.578 84.926 mo
169.133 84.926 li
168.355 87.6769 mo
168.355 82.267 li
169.133 82.749 mo
170.672 82.749 li
169.91 85.47 mo
169.91 78.474 li
170.672 83.915 mo
172.149 83.915 li
171.418 86.698 mo
171.418 80.852 li
172.149 85.128 mo
173.595 85.128 li
172.879 87.879 mo
172.879 82.5 li
173.595 83.278 mo
175.025 83.278 li
174.325 86.309 mo
174.325 79.78 li
175.025 80.93 mo
176.44 80.93 li
175.74 84.599 mo
175.74 76.795 li
176.44 85.579 mo
177.839 85.579 li
177.155 88.517 mo
177.155 82.6559 li
177.839 86.884 mo
179.207 86.884 li
178.523 89.978 mo
178.523 83.884 li
179.207 79.593 mo
180.56 79.593 li
179.891 83.573 mo
179.891 75.24 li
180.56 80.852 mo
181.928 80.852 li
181.244 84.521 mo
181.244 76.733 li
181.928 83.215 mo
183.296 83.215 li
182.612 86.356 mo
182.612 78.66 li
183.296 84.537 mo
184.633 84.537 li
183.98 87.631 mo
183.98 81.179 li
184.633 82.6089 mo
186.001 82.6089 li
185.317 85.858 mo
185.317 77.759 li
186.001 84.475 mo
187.385 84.475 li
186.7 87.724 mo
186.7 80.961 li
187.385 80.93 mo
188.83 80.93 li
188.115 85.066 mo
188.115 76.251 li
188.83 84.879 mo
190.338 84.879 li
189.592 88.159 mo
189.592 81.723 li
190.338 76.903 mo
191.846 76.903 li
191.1 81.645 mo
191.1 72.162 li
191.846 82.267 mo
193.386 82.267 li
192.624 86.2469 mo
192.624 76.126 li
193.386 76.173 mo
194.909 76.173 li
194.147 82.749 mo
194.147 69.628 li
194.909 72.473 mo
196.464 72.473 li
195.702 78.3799 mo
195.702 66.425 li
196.464 82.594 mo
198.158 82.594 li
197.319 86.2159 mo
197.319 76.251 li
198.158 74.167 mo
199.946 74.167 li
199.06 80.246 mo
199.06 67.498 li
199.946 76.546 mo
202.014 76.546 li
200.988 82.594 mo
200.988 69.814 li
202.014 83.822 mo
204.439 83.822 li
203.242 87.7079 mo
203.242 78.909 li
204.439 83.184 mo
208.295 83.184 li
206.429 87.382 mo
206.429 77.043 li
208.295 84.226 mo
208.715 84.226 li
0.6685 gry
@
67.877 79.624 mo
134.339 79.624 li
115.994 82.671 mo
115.994 76.686 li
134.339 80.915 mo
149.995 80.915 li
143.123 84.21 mo
143.123 77.619 li
149.995 79.407 mo
160.007 79.407 li
155.389 82.796 mo
155.389 76.064 li
160.007 76.546 mo
167.625 76.546 li
164.049 80.184 mo
164.049 72.97 li
167.625 79.842 mo
174.341 79.842 li
171.169 83.6349 mo
171.169 76.111 li
174.341 81.288 mo
180.14 81.288 li
177.372 85.205 mo
177.372 77.323 li
180.14 75.9709 mo
185.892 75.9709 li
183.14 79.982 mo
183.14 72.037 li
185.892 81.132 mo
191.085 81.132 li
188.597 85.128 mo
188.597 76.981 li
191.085 88.735 mo
200.179 88.735 li
195.951 91.937 mo
195.951 85.516 li
200.179 107.017 mo
208.715 107.017 li
0.6316 gry
@
67.877 105.991 mo
117.86 105.991 li
101.815 107.297 mo
101.815 104.732 li
117.86 101.421 mo
135.101 101.421 li
127.638 103.271 mo
127.638 99.6169 li
135.101 95.326 mo
147.756 95.326 li
142.05 97.1609 mo
142.05 93.259 li
147.756 87.973 mo
158.716 87.973 li
153.71 91.004 mo
153.71 84.972 li
158.716 89.901 mo
168.324 89.901 li
163.878 93.0569 mo
163.878 86.7599 li
168.324 84.863 mo
177.295 84.863 li
173.128 88.097 mo
173.128 81.676 li
177.295 84.692 mo
186.203 84.692 li
182.068 88.035 mo
182.068 81.381 li
186.203 83.806 mo
195.702 83.806 li
191.302 87.3199 mo
191.302 79.888 li
195.702 73.374 mo
207.58 73.374 li
202.201 79.282 mo
202.201 70.436 li
207.58 92.59 mo
208.715 92.59 li
0.5947 gry
@
67.877 104.39 mo
101.054 104.39 li
88.601 108.308 mo
88.601 100.985 li
101.054 90.383 mo
124.669 90.383 li
114.999 91.4709 mo
114.999 89.388 li
124.669 87.7079 mo
140.729 87.7079 li
133.702 88.7809 mo
133.702 86.7289 li
140.729 87.149 mo
151.487 87.149 li
146.559 88.237 mo
146.559 84.039 li
151.487 79.562 mo
160.38 79.562 li
156.244 81.987 mo
156.244 77.3849 li
160.38 84.381 mo
169.63 84.381 li
165.339 87.164 mo
165.339 81.599 li
169.63 82.702 mo
178.259 82.702 li
174.248 85.672 mo
174.248 79.951 li
178.259 89.31 mo
191.955 89.31 li
185.83 90.849 mo
185.83 87.942 li
191.955 97.285 mo
206.6 97.285 li
200.117 99.197 mo
200.117 94.876 li
206.6 102.711 mo
208.715 102.711 li
0.5579 gry
@
67.877 83.324 mo
171.418 83.324 li
150.57 86.993 mo
150.57 79.64 li
171.418 83.433 mo
184.353 83.433 li
178.538 87.102 mo
178.538 79.795 li
184.353 79.546 mo
191.862 79.546 li
188.333 83.138 mo
188.333 76.017 li
191.862 78.769 mo
197.505 78.769 li
194.8 82.407 mo
194.8 75.209 li
197.505 80.23 mo
202.123 80.23 li
199.9 83.993 mo
199.9 76.53 li
202.123 81.303 mo
206.243 81.303 li
204.253 85.034 mo
204.253 77.603 li
206.243 77.043 mo
208.715 77.043 li
208.357 81.163 mo
208.357 72.239 li
0.521 gry
@
67.937 113.543 mo
67.937 113.569 67.916 113.59 67.89 113.59 cv
67.864 113.59 67.843 113.569 67.843 113.543 cv
67.843 113.517 67.864 113.496 67.89 113.496 cv
67.916 113.496 67.937 113.517 67.937 113.543 cv
0.4841 gry
f
67.877 113.64 mo
79.739 113.64 li
74.173 114.698 mo
74.173 112.614 li
79.739 107.391 mo
87.932 107.391 li
84.108 109.101 mo
84.108 105.712 li
87.932 104.965 mo
94.073 104.965 li
91.15 106.675 mo
91.15 103.271 li
94.073 104.514 mo
99.064 104.514 li
96.669 106.302 mo
96.669 102.322 li
99.064 101.872 mo
103.09 101.872 li
101.147 104.546 mo
101.147 98.949 li
103.09 102.867 mo
106.557 102.867 li
104.863 105.432 mo
104.863 100.068 li
106.557 97.798 mo
109.666 97.798 li
108.143 100.783 mo
108.143 94.782 li
109.666 96.663 mo
112.496 96.663 li
111.112 99.788 mo
111.112 93.461 li
112.496 97.86 mo
115.015 97.86 li
113.786 100.861 mo
113.786 94.86 li
115.015 98.467 mo
117.331 98.467 li
116.196 101.545 mo
116.196 95.357 li
117.331 98.513 mo
119.414 98.513 li
118.388 101.53 mo
118.388 95.4969 li
119.414 94.922 mo
121.295 94.922 li
120.363 97.985 mo
120.363 91.113 li
121.295 97.6429 mo
123.145 97.6429 li
122.228 100.519 mo
122.228 94.751 li
123.145 97.0049 mo
124.809 97.0049 li
123.985 100.115 mo
123.985 93.834 li
124.809 96.15 mo
126.41 96.15 li
125.617 99.337 mo
125.617 92.917 li
126.41 93.228 mo
127.918 93.228 li
127.172 96.337 mo
127.172 87.413 li
127.918 98.063 mo
129.364 98.063 li
128.649 101.094 mo
128.649 94.9839 li
129.364 93.274 mo
130.686 93.274 li
130.033 96.399 mo
130.033 87.7079 li
130.686 93.5229 mo
131.96 93.5229 li
131.339 96.446 mo
131.339 88.035 li
131.96 90.9269 mo
133.235 90.9269 li
132.613 95.202 mo
132.613 85.967 li
133.235 90.849 mo
134.464 90.849 li
133.857 95.14 mo
133.857 86.076 li
134.464 87.382 mo
135.645 87.382 li
135.07 92.201 mo
135.07 82.5779 li
135.645 94.704 mo
136.796 94.704 li
136.22 97.829 mo
136.22 90.849 li
136.796 93.974 mo
137.884 93.974 li
137.34 96.974 mo
137.34 90.072 li
137.884 90.3199 mo
138.957 90.3199 li
138.428 94.549 mo
138.428 85.376 li
138.956 86.542 mo
139.983 86.542 li
139.47 91.533 mo
139.47 81.521 li
139.983 94.378 mo
140.978 94.378 li
140.48 97.581 mo
140.48 90.165 li
140.978 92.746 mo
141.988 92.746 li
141.491 95.793 mo
141.491 87.8329 li
141.988 90.896 mo
142.968 90.896 li
142.486 95.264 mo
142.486 86.107 li
142.968 86.8069 mo
143.916 86.8069 li
143.449 91.595 mo
143.449 82.0179 li
143.916 93.741 mo
144.802 93.741 li
144.351 96.897 mo
144.351 87.74 li
144.802 95.28 mo
145.688 95.28 li
145.253 98.513 mo
145.253 91.424 li
145.688 88.921 mo
146.559 88.921 li
146.124 93.414 mo
146.124 84.039 li
146.559 96.041 mo
147.414 96.041 li
146.994 99.073 mo
146.994 92.963 li
147.414 90.118 mo
148.269 90.118 li
147.849 94.72 mo
147.849 85.205 li
148.269 88.47 mo
149.108 88.47 li
148.689 93.787 mo
148.689 83.107 li
149.109 88.7029 mo
149.917 88.7029 li
149.513 93.3669 mo
149.513 83.837 li
149.917 88.7029 mo
150.725 88.7029 li
150.321 93.538 mo
150.321 83.744 li
150.725 93.4449 mo
151.534 93.4449 li
151.13 96.741 mo
151.13 88.89 li
151.534 86.667 mo
152.311 86.667 li
151.922 91.502 mo
151.922 81.816 li
152.311 87.164 mo
153.088 87.164 li
152.7 92.124 mo
152.7 82.1429 li
153.088 90.569 mo
153.835 90.569 li
153.462 94.829 mo
153.462 85.687 li
153.835 87.164 mo
154.565 87.164 li
154.208 92.139 mo
154.208 82.1429 li
154.565 87.895 mo
155.312 87.895 li
154.939 92.668 mo
154.939 83.107 li
155.312 85.75 mo
156.027 85.75 li
155.669 90.989 mo
155.669 80.386 li
156.027 88.8589 mo
156.773 88.8589 li
156.4 93.414 mo
156.4 83.946 li
156.773 89.8539 mo
157.488 89.8539 li
157.131 94.129 mo
157.131 84.848 li
157.488 90.289 mo
158.219 90.289 li
157.861 94.347 mo
157.861 85.423 li
158.219 89.636 mo
158.934 89.636 li
158.576 94.611 mo
158.576 84.397 li
158.934 85.687 mo
159.649 85.687 li
159.292 90.709 mo
159.292 80.588 li
159.649 86.791 mo
160.349 86.791 li
160.007 91.813 mo
160.007 81.692 li
160.349 83.993 mo
161.064 83.993 li
160.706 88.672 mo
160.706 79.251 li
161.064 91.611 mo
161.764 91.611 li
161.422 95.42 mo
161.422 86.636 li
161.764 86.1689 mo
162.448 86.1689 li
162.106 91.284 mo
162.106 80.977 li
162.448 88.501 mo
163.132 88.501 li
162.79 93.43 mo
162.79 83.309 li
163.132 89.217 mo
163.8 89.217 li
163.474 93.647 mo
163.474 84.257 li
163.8 82.765 mo
164.484 82.765 li
164.142 88.097 mo
164.142 75.784 li
164.484 83.215 mo
165.168 83.215 li
164.826 88.144 mo
164.826 77.727 li
165.168 85.625 mo
165.852 85.625 li
165.51 90.538 mo
165.51 80.681 li
165.852 83.1689 mo
166.521 83.1689 li
166.179 88.253 mo
166.179 76.935 li
166.521 84.817 mo
167.189 84.817 li
166.863 89.978 mo
166.863 79.562 li
167.189 82.889 mo
167.842 82.889 li
167.516 88.144 mo
167.516 76.313 li
167.842 87.382 mo
168.511 87.382 li
168.169 92.248 mo
168.169 82.547 li
168.511 81.397 mo
169.164 81.397 li
168.837 86.123 mo
168.837 74.4 li
169.164 83.278 mo
169.832 83.278 li
169.49 88.424 mo
169.49 77.463 li
169.832 76.375 mo
170.47 76.375 li
170.159 83.262 mo
170.159 68.446 li
170.47 77.603 mo
171.123 77.603 li
170.812 83.511 mo
170.812 69.6429 li
171.123 82.842 mo
171.791 82.842 li
171.465 87.973 mo
171.465 76.235 li
171.791 82.702 mo
172.444 82.702 li
172.118 87.942 mo
172.118 75.131 li
172.444 82.392 mo
173.082 82.392 li
172.771 87.9109 mo
172.771 75.318 li
173.082 84.832 mo
173.75 84.832 li
173.424 90.087 mo
173.424 79.4839 li
173.75 82.158 mo
174.403 82.158 li
174.077 84.739 mo
174.077 75.722 li
174.403 84.7549 mo
175.072 84.7549 li
174.729 89.823 mo
174.729 79.655 li
175.072 86.154 mo
175.724 86.154 li
175.398 91.424 mo
175.398 80.775 li
175.724 87.351 mo
176.377 87.351 li
176.051 92.543 mo
176.051 82.1429 li
176.377 85.516 mo
177.03 85.516 li
176.704 90.9269 mo
176.704 79.9969 li
177.03 87.848 mo
177.699 87.848 li
177.372 92.792 mo
177.372 82.765 li
177.699 81.334 mo
178.367 81.334 li
178.041 86.9 mo
178.041 73.577 li
178.367 84.832 mo
179.036 84.832 li
178.709 89.8849 mo
178.709 79.826 li
179.036 78.831 mo
179.673 78.831 li
179.362 84.1479 mo
179.362 71.042 li
179.673 87.133 mo
180.326 87.133 li
180 92.3719 mo
180 81.863 li
180.326 85.594 mo
180.979 85.594 li
180.653 90.942 mo
180.653 80.184 li
180.979 82.967 mo
181.632 82.967 li
181.306 88.3149 mo
181.306 76.795 li
181.632 81.5049 mo
182.301 81.5049 li
181.974 86.698 mo
181.974 74.416 li
182.301 76.4059 mo
182.954 76.4059 li
182.627 82.64 mo
182.627 68.228 li
182.954 81.21 mo
183.607 81.21 li
183.28 86.636 mo
183.28 73.8409 li
183.607 73.405 mo
184.26 73.405 li
183.933 80.899 mo
183.933 65.275 li
184.26 87.631 mo
184.928 87.631 li
184.602 92.994 mo
184.602 82.158 li
184.928 84.988 mo
185.581 84.988 li
185.255 90.4449 mo
185.255 79.5 li
185.581 74.603 mo
186.234 74.603 li
185.908 81.91 mo
185.908 66.145 li
186.234 85.952 mo
186.918 85.952 li
186.576 91.409 mo
186.576 80.4789 li
186.918 85.532 mo
187.602 85.532 li
187.26 88.253 mo
187.26 80.1219 li
187.602 85.097 mo
188.271 85.097 li
187.929 90.227 mo
187.929 79.888 li
188.271 83.06 mo
188.939 83.06 li
188.597 88.3459 mo
188.597 76.764 li
188.939 87.258 mo
189.623 87.258 li
189.281 92.4969 mo
189.281 82.034 li
189.623 80.541 mo
190.323 80.541 li
189.965 86.123 mo
189.965 71.8199 li
190.323 77.821 mo
191.038 77.821 li
190.68 84.692 mo
190.68 69.239 li
191.038 87.631 mo
191.769 87.631 li
191.396 92.917 mo
191.396 82.189 li
191.769 82.92 mo
192.515 82.92 li
192.142 88.517 mo
192.142 75.722 li
192.515 85.237 mo
193.292 85.237 li
192.904 90.942 mo
192.904 79.4529 li
@
193.292 87.009 mo
194.085 87.009 li
193.696 92.668 mo
193.696 81.163 li
194.085 80.137 mo
194.878 80.137 li
194.489 85.7339 mo
194.489 71.555 li
194.878 76.826 mo
195.686 76.826 li
195.282 84.646 mo
195.282 67.358 li
195.686 83.107 mo
196.51 83.107 li
196.091 89.03 mo
196.091 75.613 li
196.51 75.582 mo
197.319 75.582 li
196.915 82.905 mo
196.915 67.062 li
197.319 81.179 mo
198.112 81.179 li
197.723 86.776 mo
197.723 72.473 li
198.112 88.61 mo
198.936 88.61 li
198.532 93.787 mo
198.532 82.998 li
198.936 69.876 mo
199.775 69.876 li
199.355 78.691 mo
199.355 58.092 li
199.775 86.698 mo
200.615 86.698 li
200.195 92.093 mo
200.195 81.319 li
200.615 83.791 mo
201.485 83.791 li
201.05 89.356 mo
201.05 77.463 li
201.485 71.96 mo
202.418 71.96 li
201.952 80.013 mo
201.952 63.564 li
202.418 80.448 mo
203.398 80.448 li
202.916 86.029 mo
202.916 70.592 li
203.398 86.278 mo
204.501 86.278 li
203.957 91.766 mo
203.957 80.744 li
204.501 74.416 mo
205.73 74.416 li
205.123 82.283 mo
205.123 66.254 li
205.73 85.299 mo
207.051 85.299 li
206.398 90.662 mo
206.398 79.873 li
207.051 71.68 mo
208.513 71.68 li
207.782 79.562 mo
207.782 63.86 li
208.513 78.614 mo
208.715 78.614 li
@
67.877 98.56 mo
104.287 98.56 li
91.026 101.016 mo
91.026 96.119 li
104.287 100.659 mo
114.175 100.659 li
109.604 103.069 mo
109.604 98.311 li
114.175 100.519 mo
120.627 100.519 li
117.564 102.867 mo
117.564 98.218 li
120.627 98.1559 mo
126.659 98.1559 li
123.783 99.6949 mo
123.783 96.71 li
126.659 95.233 mo
131.976 95.233 li
129.426 96.726 mo
129.426 93.383 li
131.976 89.543 mo
136.982 89.543 li
134.572 91.813 mo
134.572 87.351 li
136.982 92.015 mo
142.019 92.015 li
139.594 94.223 mo
139.594 89.776 li
142.019 87.46 mo
146.994 87.46 li
144.6 89.9319 mo
144.6 85.081 li
146.994 83.666 mo
151.627 83.666 li
149.404 86.076 mo
149.404 81.334 li
151.627 83.868 mo
155.871 83.868 li
153.819 86.403 mo
153.819 81.412 li
155.871 85.439 mo
159.696 85.439 li
157.846 88.004 mo
157.846 82.92 li
159.696 82.0179 mo
163.272 82.0179 li
161.53 84.6609 mo
161.53 78.3799 li
163.272 83.06 mo
166.738 83.06 li
165.059 85.75 mo
165.059 80.028 li
166.738 84.926 mo
169.91 84.926 li
168.371 87.74 mo
168.371 82.174 li
169.91 83.386 mo
172.895 83.386 li
171.434 86.123 mo
171.434 80.355 li
172.895 84.926 mo
175.942 84.926 li
174.465 87.7079 mo
174.465 82.174 li
175.942 82.0959 mo
179.129 82.0959 li
177.575 84.77 mo
177.575 78.365 li
179.129 81.5049 mo
182.223 81.5049 li
180.715 84.521 mo
180.715 76.9659 li
182.223 82.733 mo
185.301 82.733 li
183.809 85.812 mo
183.809 78.396 li
185.301 82.423 mo
188.333 82.423 li
186.856 85.376 mo
186.856 78.334 li
188.333 88.532 mo
191.411 88.532 li
189.919 91.688 mo
189.919 85.392 li
191.411 87.071 mo
195.111 87.071 li
193.308 90.351 mo
193.308 83.837 li
195.111 90.9579 mo
199.869 90.9579 li
197.568 94.223 mo
197.568 87.724 li
199.869 98.576 mo
207.471 98.576 li
203.895 101.234 mo
203.895 95.871 li
207.471 109.489 mo
208.715 109.489 li
0.4473 gry
@
67.877 107.142 mo
93.622 107.142 li
83.284 108.479 mo
83.284 105.82 li
93.622 105.68 mo
104.614 105.68 li
99.592 106.94 mo
99.592 104.468 li
104.614 101.84 mo
111.641 101.84 li
108.329 103.784 mo
108.329 100.068 li
111.641 98.731 mo
117.253 98.731 li
114.564 100.535 mo
114.564 97.829 li
117.253 99.804 mo
121.777 99.804 li
119.601 101.623 mo
119.601 98 li
121.777 98.451 mo
125.742 98.451 li
123.83 100.239 mo
123.83 96.694 li
125.742 98.949 mo
129.084 98.949 li
127.452 100.814 mo
127.452 97.1299 li
129.084 97.5649 mo
132.007 97.5649 li
130.577 99.462 mo
130.577 95.668 li
132.007 96.43 mo
134.697 96.43 li
133.375 98.265 mo
133.375 94.627 li
134.697 97.55 mo
137.169 97.55 li
135.956 99.415 mo
135.956 95.699 li
137.169 95.699 mo
139.532 95.699 li
138.366 97.612 mo
138.366 93.803 li
139.532 92.886 mo
141.724 92.886 li
140.651 94.704 mo
140.651 90.631 li
141.724 93.787 mo
143.916 93.787 li
142.843 95.668 mo
142.843 91.813 li
143.916 88.874 mo
145.999 88.874 li
144.973 91.3929 mo
144.973 86.356 li
145.999 86.403 mo
148.02 86.403 li
147.025 88.921 mo
147.025 83.946 li
148.02 88.579 mo
150.072 88.579 li
149.062 91.191 mo
149.062 86.061 li
150.072 88.486 mo
152.187 88.486 li
151.145 91.222 mo
151.145 85.7809 li
152.187 91.051 mo
154.379 91.051 li
153.306 93.5229 mo
153.306 88.424 li
154.379 88.144 mo
156.633 88.144 li
155.529 90.9269 mo
155.529 85.408 li
156.633 87.631 mo
158.903 87.631 li
157.784 90.351 mo
157.784 84.894 li
158.903 88.9059 mo
161.142 88.9059 li
160.038 91.517 mo
160.038 86.2939 li
161.142 87.3199 mo
163.38 87.3199 li
162.277 89.978 mo
162.277 84.646 li
163.38 87.537 mo
165.619 87.537 li
164.515 90.243 mo
164.515 84.91 li
165.619 86.542 mo
167.873 86.542 li
166.77 89.3409 mo
166.77 83.728 li
167.873 87.304 mo
170.174 87.304 li
169.055 90.289 mo
169.055 84.335 li
170.174 83.1689 mo
172.506 83.1689 li
171.371 85.998 mo
171.371 80.324 li
172.506 84.832 mo
175.04 84.832 li
173.797 87.7549 mo
173.797 81.894 li
175.04 83.6039 mo
177.497 83.6039 li
176.284 86.667 mo
176.284 80.5099 li
177.497 85.2679 mo
180 85.2679 li
178.772 88.361 mo
178.772 82.1429 li
180 80.168 mo
182.549 80.168 li
181.29 83.309 mo
181.29 75.224 li
182.549 83.853 mo
185.115 83.853 li
183.855 87.071 mo
183.855 80.6349 li
185.115 81.738 mo
187.851 81.738 li
186.514 84.988 mo
186.514 78.007 li
187.851 82.78 mo
190.587 82.78 li
189.25 86.185 mo
189.25 79.422 li
190.587 81.894 mo
193.541 81.894 li
192.095 85.392 mo
192.095 78.038 li
193.541 86.7599 mo
196.759 86.7599 li
195.189 90.3979 mo
195.189 83.076 li
196.759 82.407 mo
200.117 82.407 li
198.485 86.1689 mo
198.485 78.551 li
200.117 83.386 mo
203.584 83.386 li
201.905 87.351 mo
201.905 79.5 li
203.584 83.029 mo
207.673 83.029 li
205.699 87.164 mo
205.699 78.707 li
207.673 87.7079 mo
208.715 87.7079 li
0.4104 gry
@
67.877 99.959 mo
111.05 99.959 li
96.281 102.198 mo
96.281 97.798 li
111.05 96.726 mo
123.705 96.726 li
118 98.933 mo
118 94.642 li
123.705 94.098 mo
132.442 94.098 li
128.369 96.508 mo
128.369 92.015 li
132.442 92.761 mo
139.33 92.761 li
136.065 94.844 mo
136.065 90.756 li
139.33 91.4399 mo
144.958 91.4399 li
142.268 92.512 mo
142.268 89.077 li
144.958 91.922 mo
150.057 91.922 li
147.6 94.129 mo
147.6 88.8589 li
150.057 88.284 mo
154.674 88.284 li
152.451 91.238 mo
152.451 85.205 li
154.674 84.21 mo
159.012 84.21 li
156.928 87.444 mo
156.928 81.443 li
159.012 82.298 mo
163.085 82.298 li
161.111 85.392 mo
161.111 79.515 li
163.085 85.998 mo
166.894 85.998 li
165.044 89.481 mo
165.044 83.1689 li
166.894 85.159 mo
170.547 85.159 li
168.775 88.299 mo
168.775 82.283 li
170.547 88.501 mo
174.077 88.501 li
172.351 91.875 mo
172.351 85.361 li
174.077 83.977 mo
177.404 83.977 li
175.787 87.009 mo
175.787 80.946 li
177.404 84.801 mo
180.606 84.801 li
179.051 87.817 mo
179.051 81.801 li
180.606 83.6039 mo
183.762 83.6039 li
182.223 85.765 mo
182.223 79.593 li
183.762 86.061 mo
187.416 86.061 li
185.643 90.351 mo
185.643 81.5359 li
187.416 86.061 mo
191.209 86.061 li
189.359 90.087 mo
189.359 81.91 li
191.209 91.004 mo
195.282 91.004 li
193.308 95.0309 mo
193.308 86.154 li
195.282 87.056 mo
199.449 87.056 li
197.428 91.9529 mo
197.428 81.816 li
199.449 81.972 mo
203.615 81.972 li
201.594 91.175 mo
201.594 77.556 li
203.615 98.374 mo
208.155 98.374 li
205.963 102.68 mo
205.963 93.787 li
208.155 95.855 mo
208.715 95.855 li
0.3735 gry
@
67.877 99.866 mo
134.526 99.866 li
116.165 100.457 mo
116.165 99.2599 li
134.526 99.679 mo
143.729 99.679 li
139.47 100.301 mo
139.47 99.026 li
143.729 99.415 mo
150.041 99.415 li
147.041 100.037 mo
147.041 98.793 li
150.041 97.627 mo
155.965 97.627 li
153.135 98.249 mo
153.135 96.99 li
155.965 96.694 mo
162.494 96.694 li
159.4 97.347 mo
159.4 96.041 li
162.494 95.653 mo
168.309 95.653 li
165.526 96.306 mo
165.526 94.9839 li
168.309 95.171 mo
173.05 95.171 li
170.781 95.839 mo
170.781 94.487 li
173.05 93.787 mo
177.201 93.787 li
175.196 94.456 mo
175.196 93.088 li
177.201 92.761 mo
181.041 92.761 li
179.176 93.4449 mo
179.176 92.046 li
181.041 91.688 mo
184.975 91.688 li
183.063 92.435 mo
183.063 90.9109 li
184.975 90.3199 mo
189.095 90.3199 li
187.105 91.004 mo
187.105 89.636 li
189.095 88.408 mo
193.759 88.408 li
191.504 89.092 mo
191.504 87.724 li
193.759 85.408 mo
198.516 85.408 li
196.215 86.092 mo
196.215 84.739 li
198.516 84.039 mo
203.227 84.039 li
200.957 84.723 mo
200.957 83.355 li
203.227 83.573 mo
207.828 83.573 li
205.605 84.257 mo
205.605 82.889 li
207.828 82.951 mo
208.715 82.951 li
0.3367 gry
@
67.877 105.572 mo
95.674 105.572 li
84.714 106.225 mo
84.714 104.934 li
95.674 105.416 mo
109.698 105.416 li
103.448 106.085 mo
103.448 104.748 li
109.698 103.38 mo
118.777 103.38 li
114.564 104.017 mo
114.564 102.758 li
118.777 102.773 mo
126.348 102.773 li
122.788 103.457 mo
122.788 102.105 li
126.348 101.125 mo
133.049 101.125 li
129.877 101.778 mo
129.877 100.472 li
133.049 95.046 mo
139.843 95.046 li
136.624 95.948 mo
136.624 94.207 li
139.843 92.3719 mo
146.512 92.3719 li
143.356 93.212 mo
143.356 91.595 li
146.512 88.33 mo
154.099 88.33 li
150.539 89.03 mo
150.539 87.662 li
154.099 82.594 mo
162.339 82.594 li
158.483 84.226 mo
158.483 81.132 li
162.339 80.5099 mo
179.502 80.5099 li
172.055 81.941 mo
172.055 79.236 li
179.502 86.014 mo
205.232 86.014 li
194.909 89.077 mo
194.909 82.485 li
0.2998 gry
@
67.877 79.826 mo
139.858 79.826 li
120.953 84.506 mo
120.953 73.157 li
139.858 80.806 mo
152.607 80.806 li
146.87 85.47 mo
146.87 74.851 li
152.607 75.8 mo
160.411 75.8 li
156.742 82.205 mo
156.742 68.415 li
160.411 80.386 mo
166.661 80.386 li
163.691 85.361 mo
163.691 73.3279 li
166.661 83.06 mo
171.869 83.06 li
169.366 88.128 mo
169.366 77.852 li
171.869 65.1039 mo
176.362 65.1039 li
174.201 72.706 mo
174.201 55.123 li
176.362 69.068 mo
180.544 69.068 li
178.523 76.733 mo
178.523 61.543 li
180.544 75.349 mo
184.648 75.349 li
182.658 82.283 mo
182.658 67.404 li
184.648 67.202 mo
188.457 67.202 li
186.607 75.053 mo
186.607 57.7339 li
188.457 60.331 mo
191.753 60.331 li
190.152 69.845 mo
190.152 53.272 li
191.753 69.1769 mo
195.236 69.1769 li
193.541 77.09 mo
193.541 60.9059 li
195.236 83.1689 mo
198.765 83.1689 li
197.039 88.843 mo
197.039 76.795 li
198.765 83.526 mo
203.149 83.526 li
201.035 88.843 mo
201.035 78.132 li
203.149 81.35 mo
208.715 81.35 li
206.398 87.413 mo
206.398 73.126 li
0.2811 gry
@
67.877 89.03 mo
143.341 89.03 li
124.109 94.58 mo
124.109 82.423 li
143.341 90.756 mo
153.928 90.756 li
149.062 95.699 mo
149.062 84.319 li
153.928 92.264 mo
160.38 92.264 li
157.317 96.4919 mo
157.317 85.6559 li
160.38 90.585 mo
165.044 90.585 li
162.805 95.202 mo
162.805 84.2729 li
165.044 89.325 mo
168.791 89.325 li
166.972 94.642 mo
166.972 83.0909 li
168.791 88.999 mo
171.9 88.999 li
170.392 94.409 mo
170.392 82.625 li
171.9 91.875 mo
174.683 91.875 li
173.315 96.384 mo
173.315 85.547 li
174.683 83.0909 mo
177.155 83.0909 li
175.942 89.481 mo
175.942 73.685 li
177.155 89.17 mo
179.409 89.17 li
178.29 94.736 mo
178.29 82.469 li
179.409 92.963 mo
181.508 92.963 li
180.466 97.192 mo
180.466 85.858 li
181.508 91.284 mo
183.513 91.284 li
182.518 95.824 mo
182.518 85.1429 li
183.513 87.366 mo
185.395 87.366 li
184.462 92.886 mo
184.462 81.21 li
185.395 94.316 mo
187.229 94.316 li
186.327 98.451 mo
186.327 88.937 li
187.229 89.838 mo
189.001 89.838 li
188.131 95.249 mo
188.131 83.573 li
189.001 85.75 mo
190.758 85.75 li
189.888 91.735 mo
189.888 79.795 li
190.758 87.3979 mo
192.484 87.3979 li
191.629 93.4449 mo
191.629 81.459 li
192.484 80.526 mo
194.225 80.526 li
193.37 87.133 mo
193.37 69.1769 li
194.225 90.647 mo
196.044 90.647 li
195.142 95.575 mo
195.142 84.288 li
196.044 86.947 mo
197.832 86.947 li
196.946 92.886 mo
196.946 80.6349 li
197.832 82.749 mo
199.511 82.749 li
198.687 89.014 mo
198.687 74.634 li
199.511 81.941 mo
201.206 81.941 li
200.366 87.7549 mo
200.366 73.2339 li
201.206 80.806 mo
202.9 80.806 li
202.061 86.822 mo
202.061 69.939 li
202.9 80.712 mo
204.548 80.712 li
203.74 86.916 mo
203.74 70.2809 li
204.548 70.296 mo
206.32 70.296 li
205.45 79.826 mo
205.45 59.771 li
206.32 75.224 mo
208.248 75.224 li
207.3 83.728 mo
207.3 64.559 li
208.248 82.827 mo
208.715 82.827 li
0.2623 gry
@
67.877 82.78 mo
146.341 82.78 li
126.877 87.957 mo
126.877 76.8409 li
146.341 82.0649 mo
158.825 82.0649 li
153.182 86.962 mo
153.182 76.561 li
158.825 72.1769 mo
166.661 72.1769 li
162.976 79.717 mo
162.976 63.9839 li
166.661 83.573 mo
172.693 83.573 li
169.817 88.9059 mo
169.817 77.463 li
172.693 82.951 mo
177.761 82.951 li
175.32 88.2679 mo
175.32 76.39 li
177.761 71.804 mo
182.534 71.804 li
180.233 79.267 mo
180.233 63.798 li
182.534 86.745 mo
187.447 86.745 li
185.084 92.217 mo
185.084 81.101 li
187.447 80.324 mo
192.375 80.324 li
189.996 85.905 mo
189.996 71.618 li
192.375 85.812 mo
197.195 85.812 li
194.862 91.3149 mo
194.862 80.23 li
197.195 82.423 mo
202.045 82.423 li
199.698 88.237 mo
199.698 75.24 li
202.045 93.663 mo
206.973 93.663 li
204.61 97.347 mo
204.61 87.895 li
206.973 82.827 mo
208.715 82.827 li
0.2436 gry
@
67.877 96.321 mo
84.776 96.321 li
77.438 98.995 mo
77.438 93.663 li
84.776 98 mo
95.737 98 li
90.731 100.69 mo
90.731 96.601 li
95.737 96.99 mo
102.266 96.99 li
99.157 99.819 mo
99.157 95.575 li
102.266 102.167 mo
106.619 102.167 li
104.505 103.209 mo
104.505 100.13 li
106.619 101.032 mo
109.915 101.032 li
108.298 102.991 mo
108.298 98.125 li
109.915 104.841 mo
112.698 104.841 li
111.33 106.613 mo
111.33 102.882 li
112.698 104.732 mo
115.077 104.732 li
113.911 106.629 mo
113.911 102.913 li
115.077 102.291 mo
117.207 102.291 li
116.165 104.281 mo
116.165 100.379 li
117.207 103.504 mo
119.197 103.504 li
118.217 105.354 mo
118.217 101.732 li
119.197 99.928 mo
121 99.928 li
120.114 102.027 mo
120.114 97.176 li
121 98.995 mo
122.71 98.995 li
121.871 101.296 mo
121.871 96.43 li
122.71 100.643 mo
124.187 100.643 li
123.456 101.607 mo
123.456 97.938 li
124.187 101.048 mo
125.602 101.048 li
124.902 102.929 mo
124.902 98.529 li
125.602 101.405 mo
126.97 101.405 li
126.286 103.224 mo
126.286 99.1039 li
126.97 98.778 mo
128.198 98.778 li
127.592 101.172 mo
127.592 96.042 li
128.198 102.043 mo
129.333 102.043 li
128.773 103.784 mo
128.773 100.379 li
129.333 100.363 mo
130.437 100.363 li
129.893 102.214 mo
129.893 97.581 li
130.437 102.385 mo
131.494 102.385 li
130.965 104.359 mo
130.965 100.488 li
131.494 101.436 mo
132.52 101.436 li
132.007 103.333 mo
132.007 99.322 li
132.52 101.016 mo
133.5 101.016 li
133.018 103.006 mo
133.018 98.358 li
133.5 102.151 mo
134.464 102.151 li
133.997 104.048 mo
133.997 100.348 li
134.464 98.358 mo
135.412 98.358 li
134.945 100.954 mo
134.945 95.731 li
135.412 99.6479 mo
136.267 99.6479 li
135.832 101.934 mo
135.832 96.974 li
136.267 100.845 mo
137.153 100.845 li
136.702 102.68 mo
136.702 98.187 li
137.153 97.192 mo
138.008 97.192 li
137.588 99.975 mo
137.588 94.5179 li
138.008 98.094 mo
138.848 98.094 li
138.428 100.566 mo
138.428 96.741 li
138.848 97.845 mo
139.625 97.845 li
139.236 100.69 mo
139.236 95.015 li
139.625 99.431 mo
140.418 99.431 li
140.014 101.809 mo
140.014 96.71 li
140.418 101.592 mo
141.195 101.592 li
140.807 103.317 mo
140.807 99.664 li
141.195 99.151 mo
141.957 99.151 li
141.568 101.296 mo
141.568 96.508 li
141.957 97.5959 mo
142.688 97.5959 li
142.33 100.301 mo
142.33 94.907 li
142.688 99.353 mo
143.418 99.353 li
143.061 101.809 mo
143.061 96.6169 li
143.418 98.265 mo
144.118 98.265 li
143.776 100.737 mo
143.776 95.6219 li
144.118 98.995 mo
144.818 98.995 li
144.476 101.358 mo
144.476 96.275 li
144.818 99.726 mo
145.502 99.726 li
145.16 101.794 mo
145.16 96.928 li
145.502 97.285 mo
146.155 97.285 li
145.828 99.835 mo
145.828 95.964 li
146.155 98.638 mo
146.808 98.638 li
146.481 101.079 mo
146.481 95.9789 li
146.808 97.783 mo
147.476 97.783 li
147.15 100.426 mo
147.15 95.14 li
147.476 99.011 mo
148.129 99.011 li
147.803 101.452 mo
147.803 96.275 li
148.129 98.933 mo
148.813 98.933 li
148.471 101.11 mo
148.471 96.306 li
148.813 98.824 mo
149.466 98.824 li
149.14 101.141 mo
149.14 96.212 li
149.466 97.6429 mo
150.119 97.6429 li
149.793 100.348 mo
149.793 94.9529 li
150.119 97.456 mo
150.756 97.456 li
150.446 100.208 mo
150.446 94.736 li
150.756 92.73 mo
151.347 92.73 li
151.052 95.56 mo
151.052 90.009 li
151.347 96.0099 mo
151.954 96.0099 li
151.658 98.653 mo
151.658 93.414 li
151.954 93.803 mo
152.529 93.803 li
152.249 96.4919 mo
152.249 91.144 li
152.529 97.239 mo
153.12 97.239 li
152.824 99.99 mo
152.824 94.5179 li
153.12 92.9319 mo
153.695 92.9319 li
153.415 95.668 mo
153.415 90.18 li
153.695 93.772 mo
154.286 93.772 li
153.99 96.586 mo
153.99 90.989 li
154.286 95.575 mo
154.876 95.575 li
154.581 98.327 mo
154.581 92.8539 li
154.876 92.823 mo
155.452 92.823 li
155.156 95.699 mo
155.156 89.978 li
155.452 90.709 mo
156.042 90.709 li
155.747 93.383 mo
155.747 87.382 li
156.042 90.289 mo
156.618 90.289 li
156.322 92.901 mo
156.322 86.791 li
156.618 91.548 mo
157.177 91.548 li
156.897 94.129 mo
156.897 88.9059 li
157.177 92.388 mo
157.768 92.388 li
157.473 93.663 mo
157.473 89.901 li
157.768 90.351 mo
158.328 90.351 li
158.048 92.87 mo
158.048 86.791 li
158.328 91.58 mo
158.918 91.58 li
158.623 94.456 mo
158.623 89.947 li
158.918 92.404 mo
159.509 92.404 li
159.214 95.295 mo
159.214 89.559 li
159.509 92.295 mo
160.1 92.295 li
159.805 95.015 mo
159.805 89.574 li
160.1 86.154 mo
160.691 86.154 li
160.395 90.056 mo
160.395 81.91 li
160.691 89.652 mo
161.297 89.652 li
161.002 92.683 mo
161.002 84.957 li
161.297 88.253 mo
161.903 88.253 li
161.608 92.17 mo
161.608 83.9 li
161.903 91.797 mo
162.479 91.797 li
162.199 94.5649 mo
162.199 89.03 li
162.479 85.1899 mo
163.054 85.1899 li
162.774 89.356 mo
162.774 80.883 li
163.054 89.481 mo
163.645 89.481 li
163.349 92.077 mo
163.349 84.957 li
163.645 85.174 mo
164.22 85.174 li
163.94 89.434 mo
163.94 80.806 li
164.22 91.035 mo
164.826 91.035 li
164.515 93.849 mo
164.515 87.724 li
164.826 84.071 mo
165.417 84.071 li
165.122 88.61 mo
165.122 79.5309 li
165.417 87.537 mo
166.008 87.537 li
165.712 91.082 mo
165.712 83.153 li
166.008 89.139 mo
166.63 89.139 li
166.319 91.9059 mo
166.319 85.003 li
166.63 82.905 mo
167.252 82.905 li
166.941 87.444 mo
166.941 78.225 li
167.252 87.7079 mo
167.858 87.7079 li
167.562 91.4709 mo
167.562 83.355 li
167.858 88.7809 mo
168.48 88.7809 li
168.169 91.704 mo
168.169 84.506 li
168.48 85.921 mo
169.133 85.921 li
168.806 90.087 mo
168.806 81.5049 li
169.133 85.641 mo
169.77 85.641 li
169.444 89.621 mo
169.444 81.365 li
169.77 84.102 mo
170.423 84.102 li
170.097 88.424 mo
170.097 79.811 li
170.423 90.118 mo
171.06 90.118 li
170.734 91.626 mo
170.734 85.905 li
171.06 82.034 mo
171.698 82.034 li
171.371 86.869 mo
171.371 76.8719 li
171.698 85.7339 mo
172.366 85.7339 li
172.04 89.9319 mo
172.04 81.039 li
172.366 85.454 mo
173.019 85.454 li
172.693 89.73 mo
172.693 80.759 li
173.019 81.008 mo
173.657 81.008 li
173.33 85.439 mo
173.33 76.53 li
173.657 81.039 mo
174.294 81.039 li
173.983 85.6559 mo
173.983 76.499 li
174.294 79.375 mo
174.947 79.375 li
174.621 84.055 mo
174.621 73.623 li
174.947 80.541 mo
175.6 80.541 li
175.274 85.252 mo
175.274 75.147 li
175.6 87.133 mo
176.253 87.133 li
175.927 90.989 mo
175.927 82.563 li
176.253 81.707 mo
176.906 81.707 li
176.58 86.061 mo
176.58 77.277 li
176.906 79.002 mo
177.543 79.002 li
177.233 83.6349 mo
177.233 73.763 li
177.543 84.6609 mo
178.181 84.6609 li
177.87 89.092 mo
177.87 80.215 li
178.181 81.5519 mo
178.818 81.5519 li
178.507 85.998 mo
178.507 77.09 li
178.818 82.283 mo
179.471 82.283 li
179.145 86.947 mo
179.145 77.4789 li
179.471 80.013 mo
180.124 80.013 li
179.798 84.801 mo
179.798 74.976 li
180.124 79.826 mo
180.762 79.826 li
180.451 84.413 mo
180.451 75.131 li
180.762 82.158 mo
181.43 82.158 li
181.104 86.791 mo
181.104 77.448 li
181.43 79.282 mo
182.099 79.282 li
181.757 83.962 mo
181.757 74.136 li
182.099 78.9709 mo
182.752 78.9709 li
182.425 83.526 mo
182.425 73.825 li
182.752 82.267 mo
183.405 82.267 li
183.078 87.009 mo
183.078 77.417 li
183.405 85.019 mo
184.073 85.019 li
183.747 89.652 mo
183.747 80.075 li
184.073 77.075 mo
184.757 77.075 li
184.415 81.956 mo
184.415 70.436 li
184.757 86.387 mo
185.441 86.387 li
185.099 90.476 mo
185.099 81.6609 li
185.441 75.364 mo
186.125 75.364 li
185.783 80.821 mo
185.783 66.503 li
0.2249 gry
@
186.125 80.5569 mo
186.825 80.5569 li
186.483 85.501 mo
186.483 75.4579 li
@
67.877 80.246 mo
131.137 80.246 li
113.164 84.428 mo
113.164 74.649 li
131.137 76.95 mo
142.112 76.95 li
137.091 81.785 mo
137.091 70.405 li
142.112 83.371 mo
148.518 83.371 li
145.471 87.693 mo
145.471 78.9399 li
148.518 82.687 mo
153.151 82.687 li
150.927 86.931 mo
150.927 78.349 li
153.151 80.93 mo
156.835 80.93 li
155.047 85.361 mo
155.047 75.442 li
156.835 82.951 mo
160.038 82.951 li
158.483 87.2729 mo
158.483 78.52 li
160.038 79.438 mo
162.836 79.438 li
161.468 83.6349 mo
161.468 73.903 li
162.836 83.418 mo
165.277 83.418 li
164.08 87.584 mo
164.08 79.142 li
165.277 85.641 mo
167.376 85.641 li
166.35 89.916 mo
166.35 81.225 li
167.376 82.873 mo
169.288 82.873 li
168.355 87.118 mo
168.355 78.567 li
169.288 86.014 mo
171.06 86.014 li
170.19 89.994 mo
170.19 82.003 li
171.06 86.138 mo
172.755 86.138 li
171.916 90.351 mo
171.916 81.847 li
172.755 83.34 mo
174.294 83.34 li
173.532 87.537 mo
173.532 79.0649 li
174.294 81.676 mo
175.787 81.676 li
175.056 85.921 mo
175.056 76.779 li
175.787 89.45 mo
177.17 89.45 li
176.486 93.259 mo
176.486 85.2679 li
177.17 80.852 mo
178.476 80.852 li
177.823 85.066 mo
177.823 75.52 li
178.476 81.847 mo
179.704 81.847 li
179.098 86.185 mo
179.098 76.8719 li
179.704 86.465 mo
180.886 86.465 li
180.311 90.725 mo
180.311 82.112 li
180.886 75.784 mo
182.005 75.784 li
181.446 81.132 mo
181.446 69.348 li
182.005 82.5 mo
183.094 82.5 li
182.549 86.791 mo
182.549 78.116 li
183.094 80.448 mo
184.166 80.448 li
183.638 84.832 mo
183.638 75.069 li
184.166 81.319 mo
185.161 81.319 li
184.664 85.594 mo
184.664 76.4059 li
185.161 84.848 mo
186.156 84.848 li
185.659 89.123 mo
185.659 80.495 li
186.156 85.594 mo
187.12 85.594 li
186.638 89.947 mo
186.638 81.179 li
187.12 89.123 mo
188.1 89.123 li
187.618 92.87 mo
187.618 85.003 li
188.1 85.672 mo
189.095 85.672 li
188.597 90.056 mo
188.597 81.194 li
189.095 80.324 mo
190.105 80.324 li
189.608 84.894 mo
189.608 74.198 li
190.105 85.439 mo
191.069 85.439 li
190.587 89.667 mo
190.587 81.1169 li
191.069 85.097 mo
191.986 85.097 li
191.52 89.434 mo
191.52 80.744 li
191.986 84.584 mo
192.873 84.584 li
192.437 88.89 mo
192.437 80.199 li
192.873 84.1949 mo
193.759 84.1949 li
193.323 88.719 mo
193.323 79.5309 li
193.759 82.749 mo
194.614 82.749 li
194.194 87.366 mo
194.194 77.976 li
194.614 87.771 mo
195.484 87.771 li
195.065 92.062 mo
195.065 83.1689 li
0.2061 gry
@
67.877 91.9529 mo
103.774 91.9529 li
90.637 93.678 mo
90.637 81.5519 li
103.774 83.993 mo
113.849 83.993 li
109.2 94.673 mo
109.2 82.625 li
113.849 98.2339 mo
119.896 98.2339 li
117.02 100.115 mo
117.02 96.461 li
119.896 102.291 mo
124.514 102.291 li
122.29 103.566 mo
122.29 98.311 li
124.514 94.378 mo
128.012 94.378 li
126.301 98.171 mo
126.301 92.699 li
128.012 94.767 mo
132.069 94.767 li
130.11 102.322 mo
130.11 88.361 li
132.069 85.61 mo
135.785 85.61 li
133.982 92.777 mo
133.982 80.588 li
135.785 79.469 mo
139.065 79.469 li
137.464 80.806 mo
137.464 77.3849 li
0.1874 gry
@
67.937 117.923 mo
67.937 117.949 67.916 117.97 67.89 117.97 cv
67.864 117.97 67.843 117.949 67.843 117.923 cv
67.843 117.897 67.864 117.876 67.89 117.876 cv
67.916 117.876 67.937 117.897 67.937 117.923 cv
0.1686 gry
f
67.877 123.015 mo
68.81 123.015 li
68.81 122.813 mo
72.292 122.813 li
70.598 123.108 mo
70.598 122.518 li
72.292 122.113 mo
75.448 122.113 li
73.909 122.362 mo
73.909 121.88 li
75.448 120.17 mo
78.231 120.17 li
76.863 120.792 mo
76.863 119.579 li
78.231 120.217 mo
80.734 120.217 li
79.506 120.87 mo
79.506 119.61 li
80.734 119.253 mo
83.05 119.253 li
81.916 119.844 mo
81.916 118.709 li
83.05 117.854 mo
85.274 117.854 li
84.185 118.367 mo
84.185 117.372 li
85.274 117.449 mo
87.341 117.449 li
86.315 117.9 mo
86.315 117.03 li
87.341 117.185 mo
89.285 117.185 li
88.321 117.62 mo
88.321 116.796 li
89.285 116.765 mo
91.073 116.765 li
90.186 117.154 mo
90.186 116.408 li
91.073 113.563 mo
92.767 113.563 li
91.928 114.449 mo
91.928 112.692 li
92.767 117.123 mo
94.322 117.123 li
93.56 117.527 mo
93.56 116.734 li
94.322 117.48 mo
95.737 117.48 li
95.037 117.916 mo
95.037 117.061 li
95.737 117.201 mo
97.043 117.201 li
96.39 117.62 mo
96.39 116.796 li
97.043 117.356 mo
98.286 117.356 li
97.664 117.776 mo
97.664 116.952 li
98.286 118.273 mo
99.468 118.273 li
98.877 118.771 mo
98.877 117.807 li
99.468 118.04 mo
100.634 118.04 li
100.043 118.506 mo
100.043 117.605 li
100.634 116.594 mo
101.784 116.594 li
101.209 116.967 mo
101.209 116.237 li
101.784 116.143 mo
102.935 116.143 li
102.36 116.485 mo
102.36 115.817 li
102.935 113.158 mo
104.085 113.158 li
103.51 114.014 mo
103.51 112.334 li
104.085 111.821 mo
105.22 111.821 li
104.645 112.63 mo
104.645 111.075 li
105.22 111.853 mo
106.339 111.853 li
105.78 112.676 mo
105.78 111.091 li
106.339 111.79 mo
107.428 111.79 li
106.884 112.583 mo
106.884 111.044 li
107.428 110.313 mo
108.5 110.313 li
107.972 111.029 mo
107.972 109.645 li
108.5 109.925 mo
109.542 109.925 li
109.029 110.64 mo
109.029 109.256 li
109.542 108.93 mo
110.584 108.93 li
110.071 109.552 mo
110.071 108.339 li
110.584 106.054 mo
111.579 106.054 li
111.081 107.375 mo
111.081 104.81 li
111.579 108.883 mo
112.605 108.883 li
112.107 109.521 mo
112.107 108.277 li
112.605 105.09 mo
113.6 105.09 li
113.102 106.38 mo
113.102 103.877 li
113.6 104.095 mo
114.61 104.095 li
114.097 105.323 mo
114.097 102.929 li
114.61 104.11 mo
115.574 104.11 li
115.092 105.354 mo
115.092 102.96 li
115.574 103.1 mo
116.554 103.1 li
116.072 104.312 mo
116.072 101.98 li
116.554 101.234 mo
117.502 101.234 li
117.036 102.369 mo
117.036 100.161 li
117.502 100.892 mo
118.435 100.892 li
117.984 102.011 mo
117.984 99.85 li
118.435 101.903 mo
119.352 101.903 li
118.901 103.084 mo
118.901 100.783 li
119.352 102.773 mo
120.254 102.773 li
119.803 104.001 mo
119.803 101.607 li
120.254 101.125 mo
121.14 101.125 li
120.705 102.338 mo
120.705 100.021 li
121.14 100.939 mo
122.026 100.939 li
121.591 102.058 mo
121.591 99.897 li
122.026 101.001 mo
122.897 101.001 li
122.461 102.167 mo
122.461 99.913 li
122.897 100.643 mo
123.767 100.643 li
123.332 101.778 mo
123.332 99.586 li
123.767 100.566 mo
124.622 100.566 li
124.203 101.747 mo
124.203 99.462 li
124.622 96.928 mo
125.446 96.928 li
125.042 98.84 mo
125.042 95.1089 li
125.446 99.602 mo
126.286 99.602 li
125.882 100.69 mo
125.882 96.757 li
126.286 98.094 mo
127.125 98.094 li
126.706 100.13 mo
126.706 96.197 li
127.125 95.249 mo
127.949 95.249 li
127.545 97.145 mo
127.545 93.43 li
127.949 94.58 mo
128.742 94.58 li
128.354 96.415 mo
128.354 92.823 li
128.742 95.311 mo
129.52 95.311 li
129.131 97.239 mo
129.131 93.476 li
129.52 94.9839 mo
130.313 94.9839 li
129.924 96.959 mo
129.924 93.103 li
130.313 95.0779 mo
131.059 95.0779 li
130.686 96.99 mo
130.686 93.243 li
131.059 95.015 mo
131.789 95.015 li
131.432 96.974 mo
131.432 93.15 li
131.789 93.476 mo
132.52 93.476 li
132.163 95.404 mo
132.163 91.626 li
132.52 95.311 mo
133.235 95.311 li
132.878 97.285 mo
132.878 93.4449 li
133.235 93.989 mo
133.935 93.989 li
133.577 95.964 mo
133.577 92.124 li
133.935 93.4449 mo
134.635 93.4449 li
134.277 95.373 mo
134.277 91.611 li
134.635 94.4709 mo
135.303 94.4709 li
134.977 96.461 mo
134.977 92.59 li
135.303 93.119 mo
135.972 93.119 li
135.645 95.093 mo
135.645 91.253 li
135.972 93.5699 mo
136.624 93.5699 li
136.298 95.528 mo
136.298 91.704 li
136.624 93.196 mo
137.277 93.196 li
136.951 95.062 mo
136.951 91.409 li
137.277 95.28 mo
137.915 95.28 li
137.604 97.068 mo
137.604 93.3669 li
137.915 93.787 mo
138.552 93.787 li
138.241 95.715 mo
138.241 91.937 li
138.552 94.145 mo
139.174 94.145 li
138.863 96.166 mo
138.863 92.217 li
139.174 92.248 mo
139.796 92.248 li
139.485 94.254 mo
139.485 90.3669 li
139.796 94.067 mo
140.402 94.067 li
140.107 96.0099 mo
140.107 92.233 li
140.402 91.735 mo
141.009 91.735 li
140.713 93.71 mo
140.713 89.869 li
141.009 92.606 mo
141.584 92.606 li
141.304 94.533 mo
141.304 90.771 li
141.584 91.8589 mo
142.175 91.8589 li
141.879 93.849 mo
141.879 89.994 li
142.175 92.062 mo
142.765 92.062 li
142.47 93.088 mo
142.47 90.149 li
142.765 90.351 mo
143.356 90.351 li
143.061 92.077 mo
143.061 88.47 li
143.356 90.631 mo
143.947 90.631 li
143.652 92.652 mo
143.652 88.735 li
143.947 89.823 mo
144.522 89.823 li
144.242 91.782 mo
144.242 87.988 li
144.522 90.3669 mo
145.113 90.3669 li
144.818 92.4659 mo
144.818 88.532 li
145.113 90.056 mo
145.704 90.056 li
145.408 92.217 mo
145.408 88.051 li
145.704 88.968 mo
146.295 88.968 li
145.999 91.098 mo
145.999 87.662 li
146.295 87.04 mo
146.885 87.04 li
146.59 89.527 mo
146.59 84.039 li
146.885 85.2209 mo
147.476 85.2209 li
147.181 88.175 mo
147.181 82.252 li
147.476 88.097 mo
148.051 88.097 li
147.771 90.289 mo
147.771 84.941 li
148.051 85.579 mo
148.642 85.579 li
148.347 88.579 mo
148.347 82.749 li
148.642 85.7339 mo
149.233 85.7339 li
148.937 88.626 mo
148.937 82.951 li
149.233 82.796 mo
149.839 82.796 li
149.544 85.921 mo
149.544 79.951 li
149.839 83.262 mo
150.43 83.262 li
150.135 86.371 mo
150.135 80.324 li
150.43 85.718 mo
151.052 85.718 li
150.741 88.75 mo
150.741 82.594 li
151.052 81.599 mo
151.658 81.599 li
151.363 84.335 mo
151.363 78.723 li
151.658 84.381 mo
152.28 84.381 li
151.969 87.615 mo
151.969 81.257 li
152.28 84.599 mo
152.871 84.599 li
152.575 87.8329 mo
152.575 81.459 li
152.871 84.7079 mo
153.477 84.7079 li
153.182 87.848 mo
153.182 81.5829 li
153.477 86.232 mo
154.068 86.232 li
153.773 89.45 mo
153.773 83.1689 li
154.068 84.475 mo
154.674 84.475 li
154.379 87.662 mo
154.379 81.381 li
154.674 85.516 mo
155.281 85.516 li
154.985 88.579 mo
154.985 82.298 li
155.281 83.6349 mo
155.887 83.6349 li
155.591 86.916 mo
155.591 80.4789 li
155.887 85.252 mo
156.509 85.252 li
156.198 88.3459 mo
156.198 82.158 li
156.509 84.723 mo
157.146 84.723 li
156.835 87.7549 mo
156.835 81.676 li
157.146 83.589 mo
157.768 83.589 li
157.457 86.7599 mo
157.457 80.5569 li
157.768 82.702 mo
158.421 82.702 li
158.095 85.641 mo
158.095 79.702 li
158.421 82.174 mo
159.074 82.174 li
158.747 85.33 mo
158.747 79.142 li
159.074 83.324 mo
159.742 83.324 li
159.416 86.527 mo
159.416 80.308 li
159.742 83.744 mo
160.458 83.744 li
160.1 87.04 mo
160.1 80.541 li
160.458 83.278 mo
161.204 83.278 li
160.831 86.418 mo
160.831 80.293 li
161.204 80.028 mo
161.966 80.028 li
161.577 82.967 mo
161.577 77.012 li
161.966 82.407 mo
162.821 82.407 li
162.401 85.547 mo
162.401 80.821 li
162.821 82.252 mo
163.691 82.252 li
163.256 85.579 mo
163.256 79.002 li
163.691 84.848 mo
164.64 84.848 li
@
164.173 87.926 mo
164.173 81.723 li
164.64 85.345 mo
165.604 85.345 li
165.122 88.408 mo
165.122 82.034 li
165.604 79.935 mo
166.614 79.935 li
166.117 83.371 mo
166.117 76.748 li
166.614 75.862 mo
167.64 75.862 li
167.127 79.344 mo
167.127 72.2549 li
167.64 79.562 mo
168.713 79.562 li
168.184 83.06 mo
168.184 76.188 li
168.713 76.4839 mo
169.817 76.4839 li
169.273 79.951 mo
169.273 73.157 li
169.817 77.9449 mo
170.967 77.9449 li
170.408 81.288 mo
170.408 74.774 li
170.967 75.038 mo
172.133 75.038 li
171.558 78.396 mo
171.558 70.389 li
172.133 79.438 mo
173.33 79.438 li
172.74 82.936 mo
172.74 76.064 li
173.33 79.764 mo
174.481 79.764 li
173.906 83.371 mo
173.906 76.344 li
174.481 82.562 mo
175.553 82.562 li
175.025 86.371 mo
175.025 78.754 li
175.553 81.132 mo
176.564 81.132 li
176.051 84.832 mo
176.051 77.525 li
176.564 78.629 mo
177.528 78.629 li
177.046 82.345 mo
177.046 75.007 li
177.528 80.246 mo
178.476 80.246 li
177.994 84.164 mo
177.994 76.344 li
178.476 79.593 mo
179.409 79.593 li
178.943 83.48 mo
178.943 75.8459 li
179.409 78.069 mo
180.326 78.069 li
179.875 81.91 mo
179.875 74.338 li
180.326 81.832 mo
181.228 81.832 li
180.777 85.921 mo
180.777 77.712 li
181.228 82.0179 mo
182.161 82.0179 li
181.694 85.718 mo
181.694 78.412 li
182.161 81.754 mo
183.094 81.754 li
182.643 85.827 mo
182.643 77.821 li
183.094 79.671 mo
183.995 79.671 li
183.544 83.48 mo
183.544 75.9709 li
183.995 79.935 mo
184.866 79.935 li
184.431 84.024 mo
184.431 75.955 li
184.866 81.086 mo
185.783 81.086 li
185.332 85.1899 mo
185.332 77.183 li
185.783 83.542 mo
186.654 83.542 li
186.219 87.569 mo
186.219 79.764 li
186.654 82.64 mo
187.509 82.64 li
187.089 86.6819 mo
187.089 78.769 li
187.509 82.314 mo
188.364 82.314 li
187.944 86.589 mo
187.944 80.215 li
188.364 86.947 mo
189.25 86.947 li
188.815 90.756 mo
188.815 82.796 li
189.25 85.299 mo
190.23 85.299 li
189.748 89.217 mo
189.748 80.9919 li
190.23 81.894 mo
191.302 81.894 li
190.774 86.48 mo
190.774 77.323 li
191.302 84.024 mo
192.297 84.024 li
191.8 88.812 mo
191.8 79.236 li
192.297 77.012 mo
193.354 77.012 li
192.826 81.723 mo
192.826 72.193 li
193.354 77.059 mo
194.52 77.059 li
193.93 81.847 mo
193.93 71.789 li
194.52 73.748 mo
195.655 73.748 li
195.096 78.738 mo
195.096 66.736 li
195.655 82.189 mo
196.899 82.189 li
196.277 87.258 mo
196.277 77.152 li
196.899 80.573 mo
198.221 80.573 li
197.568 85.765 mo
197.568 75.4579 li
198.221 76.717 mo
200.537 76.717 li
199.402 81.754 mo
199.402 71.929 li
200.537 79.5779 mo
203.102 79.5779 li
201.843 85.1899 mo
201.843 74.2289 li
203.102 85.532 mo
206.631 85.532 li
204.921 91.424 mo
204.921 79.251 li
@
67.877 84.055 mo
110.242 84.055 li
95.643 88.999 mo
95.643 79.002 li
110.242 85.967 mo
121.653 85.967 li
116.46 90.864 mo
116.46 80.961 li
121.653 85.2679 mo
128.105 85.2679 li
125.042 90.149 mo
125.042 80.293 li
128.105 82.283 mo
132.629 82.283 li
130.452 87.258 mo
130.452 77.199 li
132.629 87.973 mo
136.314 87.973 li
134.526 92.248 mo
134.526 83.06 li
136.314 90.212 mo
139.299 90.212 li
137.837 93.4919 mo
137.837 85.299 li
139.299 91.4399 mo
141.817 91.4399 li
140.573 95.202 mo
140.573 86.511 li
141.817 86.574 mo
144.009 86.574 li
142.936 91.4709 mo
142.936 81.5829 li
144.009 89.792 mo
146.015 89.792 li
145.035 93.181 mo
145.035 84.863 li
146.015 85.998 mo
147.896 85.998 li
146.979 90.9109 mo
146.979 80.9919 li
147.896 90.149 mo
149.559 90.149 li
148.735 93.616 mo
148.735 85.066 li
149.559 86.309 mo
151.083 86.309 li
150.337 91.284 mo
150.337 81.241 li
151.083 92.823 mo
152.482 92.823 li
151.798 96.632 mo
151.798 88.766 li
152.482 86.838 mo
153.788 86.838 li
153.151 92.077 mo
153.151 81.225 li
153.788 91.611 mo
155.001 91.611 li
154.41 95.264 mo
154.41 87.6769 li
155.001 86.916 mo
156.136 86.916 li
155.576 91.937 mo
155.576 81.381 li
156.136 83.34 mo
157.193 83.34 li
156.68 88.47 mo
156.68 78.101 li
157.193 88.47 mo
158.203 88.47 li
157.706 92.575 mo
157.706 83.262 li
158.203 82.22 mo
159.183 82.22 li
158.701 87.444 mo
158.701 76.81 li
159.183 84.646 mo
160.084 84.646 li
159.634 90.009 mo
159.634 78.9399 li
160.085 84.863 mo
160.971 84.863 li
160.535 89.8539 mo
160.535 79.78 li
160.971 83.449 mo
161.795 83.449 li
161.375 89.185 mo
161.375 78.256 li
161.795 84.055 mo
162.588 84.055 li
162.199 89.123 mo
162.199 78.8929 li
162.587 84.133 mo
163.365 84.133 li
162.992 89.3409 mo
162.992 78.816 li
163.365 81.334 mo
164.127 81.334 li
163.754 86.574 mo
163.754 75.551 li
164.127 84.257 mo
164.857 84.257 li
164.5 89.45 mo
164.5 78.9709 li
164.857 81.0229 mo
165.588 81.0229 li
165.23 86.232 mo
165.23 75.3329 li
165.588 78.085 mo
166.272 78.085 li
165.93 83.0439 mo
165.93 71.602 li
166.272 80.308 mo
166.941 80.308 li
166.614 85.796 mo
166.614 73.405 li
166.941 82.298 mo
167.594 82.298 li
167.267 87.631 mo
167.267 76.608 li
167.594 79.951 mo
168.215 79.951 li
167.904 85.812 mo
167.904 73.623 li
168.215 80.79 mo
168.837 80.79 li
168.526 86.123 mo
168.526 74.603 li
168.837 73.126 mo
169.444 73.126 li
169.148 79.935 mo
169.148 65.259 li
169.444 81.443 mo
170.034 81.443 li
169.739 86.8069 mo
169.739 75.738 li
170.034 85.532 mo
170.625 85.532 li
170.33 90.8019 mo
170.33 80.153 li
170.625 81.288 mo
171.185 81.288 li
170.905 87.304 mo
170.905 74.416 li
171.185 70.483 mo
171.745 70.483 li
171.465 78.909 mo
171.465 61.606 li
171.745 75.566 mo
172.304 75.566 li
172.024 82.749 mo
172.024 67.902 li
172.304 70.685 mo
172.864 70.685 li
172.584 78.178 mo
172.584 63.098 li
172.864 79.935 mo
173.392 79.935 li
173.128 85.33 mo
173.128 73.639 li
173.392 64.839 mo
173.937 64.839 li
173.672 73.561 mo
173.672 55.262 li
173.937 76.111 mo
174.465 76.111 li
174.201 81.5519 mo
174.201 68.508 li
174.465 74.012 mo
174.978 74.012 li
174.714 80.37 mo
174.714 66.316 li
174.978 68.446 mo
175.491 68.446 li
175.227 76.717 mo
175.227 60.4709 li
175.491 74.043 mo
175.989 74.043 li
175.74 80.541 mo
175.74 66.316 li
175.989 83.34 mo
176.486 83.34 li
176.238 89.03 mo
176.238 77.137 li
176.486 72.535 mo
176.999 72.535 li
176.751 80.246 mo
176.751 63.549 li
176.999 73.219 mo
177.497 73.219 li
177.248 80.806 mo
177.248 64.59 li
177.497 65.554 mo
177.994 65.554 li
177.746 74.525 mo
177.746 54.236 li
177.994 74.012 mo
178.492 74.012 li
178.243 80.168 mo
178.243 66.425 li
178.492 76.08 mo
178.974 76.08 li
178.741 82.034 mo
178.741 67.389 li
178.974 73.312 mo
179.456 73.312 li
179.207 80.339 mo
179.207 65.772 li
179.456 70.856 mo
179.922 70.856 li
179.689 78.334 mo
179.689 63.222 li
179.922 67.871 mo
180.389 67.871 li
180.155 75.4579 mo
180.155 60.098 li
180.389 66.472 mo
180.855 66.472 li
180.622 74.882 mo
180.622 55.651 li
180.855 66.658 mo
181.306 66.658 li
181.088 75.862 mo
181.088 57.455 li
181.306 64.186 mo
181.757 64.186 li
181.539 73.032 mo
181.539 53.6299 li
181.757 68.322 mo
182.207 68.322 li
181.99 76.3589 mo
181.99 60.455 li
182.207 69.006 mo
182.658 69.006 li
182.441 77.106 mo
182.441 60.921 li
182.658 76.297 mo
183.109 76.297 li
182.876 81.863 mo
182.876 68.6479 li
183.109 64.746 mo
183.56 64.746 li
183.327 73.483 mo
183.327 53.925 li
183.56 65.212 mo
184.011 65.212 li
183.778 72.939 mo
183.778 55.0909 li
184.011 68.291 mo
184.493 68.291 li
184.244 76.4059 mo
184.244 59.476 li
184.493 66.192 mo
184.975 66.192 li
184.726 74.167 mo
184.726 56.428 li
184.975 68.71 mo
185.457 68.71 li
185.224 76.67 mo
185.224 60.269 li
185.457 66.814 mo
185.954 66.814 li
185.705 75.3019 mo
185.705 55.8069 li
185.954 59.662 mo
186.452 59.662 li
186.203 69.814 mo
186.203 53.272 li
186.452 67.638 mo
186.965 67.638 li
186.716 75.349 mo
186.716 59.118 li
186.965 62.134 mo
187.493 62.134 li
187.229 71.073 mo
187.229 53.2729 li
187.493 79.826 mo
188.037 79.826 li
187.758 84.599 mo
187.758 72.053 li
188.037 67.995 mo
188.582 67.995 li
188.302 76.126 mo
188.302 59.009 li
188.582 55.48 mo
189.126 55.48 li
188.846 66.58 mo
188.846 53.272 li
189.126 63.051 mo
189.685 63.051 li
189.406 71.089 mo
189.406 53.272 li
189.685 70.094 mo
190.245 70.094 li
189.965 77.79 mo
189.965 62.352 li
190.245 63.191 mo
190.836 63.191 li
190.541 71.835 mo
190.541 53.272 li
190.836 67.389 mo
191.442 67.389 li
191.131 75.877 mo
191.131 57.936 li
191.442 66.347 mo
192.064 66.347 li
191.753 74.805 mo
191.753 56.071 li
192.064 56.662 mo
192.717 56.662 li
192.391 66.409 mo
192.391 53.272 li
192.717 55.2469 mo
193.386 55.2469 li
193.044 65.694 mo
193.044 53.2729 li
193.728 62.989 mo
193.728 53.2729 li
194.054 66.067 mo
194.754 66.067 li
194.412 74.338 mo
194.412 57.081 li
195.158 62.5229 mo
195.158 53.2729 li
195.547 60.673 mo
196.339 60.673 li
195.935 69.597 mo
195.935 53.2729 li
196.339 66.705 mo
197.163 66.705 li
196.759 75.4269 mo
196.759 56.133 li
197.163 59.4449 mo
198.05 59.4449 li
197.614 69.55 mo
197.614 53.2729 li
198.05 64.217 mo
198.998 64.217 li
198.532 72.519 mo
198.532 53.475 li
198.998 73.079 mo
200.366 73.079 li
199.698 81.054 mo
199.698 63.58 li
200.366 78.054 mo
202.636 78.054 li
201.516 84.5519 mo
201.516 68.228 li
0.1499 gry
@
grestore
253.163 137.473 mo
393.985 137.473 li
393.985 53.272 li
253.163 53.272 li
cp
false sop
1 gry
f
253.163 137.473 mo
253.163 53.272 li
393.985 53.272 li
393.985 137.473 li
253.163 137.473 li
@
253.163 137.473 mo
393.985 137.473 li
253.163 53.272 mo
393.985 53.272 li
253.163 137.473 mo
253.163 53.272 li
393.985 137.473 mo
393.985 53.272 li
253.163 137.473 mo
393.985 137.473 li
253.163 137.473 mo
253.163 53.272 li
291.485 137.473 mo
291.485 136.758 li
291.485 53.272 mo
291.485 53.972 li
288.127 137.473 mo
288.127 136.758 li
288.127 53.272 mo
288.127 53.972 li
284.38 137.473 mo
284.38 136.758 li
284.38 53.272 mo
284.38 53.972 li
280.136 137.473 mo
280.136 136.758 li
280.136 53.272 mo
280.136 53.972 li
275.223 137.473 mo
275.223 136.758 li
275.223 53.272 mo
275.223 53.972 li
269.425 137.473 mo
269.425 136.758 li
269.425 53.272 mo
269.425 53.972 li
262.32 137.473 mo
262.32 136.758 li
262.32 53.272 mo
262.32 53.972 li
253.163 137.473 mo
253.163 136.758 li
253.163 53.272 mo
253.163 53.972 li
291.485 137.473 mo
291.485 136.059 li
291.485 53.272 mo
291.485 54.672 li
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
287.132 142.169 mo
(0.01)
[2.4895 1.24472 2.4895 0 ]xsh
313.562 137.473 mo
313.562 136.758 li
313.562 53.272 mo
313.562 53.972 li
326.465 137.473 mo
326.465 136.758 li
326.465 53.272 mo
326.465 53.972 li
335.622 137.473 mo
335.622 136.758 li
335.622 53.272 mo
335.622 53.972 li
342.727 137.473 mo
342.727 136.758 li
342.727 53.272 mo
342.727 53.972 li
348.542 137.473 mo
348.542 136.758 li
348.542 53.272 mo
348.542 53.972 li
353.439 137.473 mo
353.439 136.758 li
353.439 53.272 mo
353.439 53.972 li
357.699 137.473 mo
357.699 136.758 li
357.699 53.272 mo
357.699 53.972 li
361.446 137.473 mo
361.446 136.758 li
361.446 53.272 mo
361.446 53.972 li
364.804 137.473 mo
364.804 136.758 li
364.804 53.272 mo
364.804 53.972 li
364.804 137.473 mo
364.804 136.059 li
364.804 53.272 mo
364.804 54.672 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
361.694 142.169 mo
(0.1)
[2.4895 1.24472 0 ]xsh
386.88 137.473 mo
386.88 136.758 li
386.88 53.272 mo
386.88 53.972 li
253.163 111.961 mo
253.862 111.961 li
393.985 111.961 mo
393.27 111.961 li
253.163 113.127 mo
253.862 113.127 li
393.985 113.127 mo
393.27 113.127 li
253.163 114.433 mo
253.862 114.433 li
393.985 114.433 mo
393.27 114.433 li
253.163 115.91 mo
253.862 115.91 li
393.985 115.91 mo
393.27 115.91 li
253.163 117.62 mo
253.862 117.62 li
393.985 117.62 mo
393.27 117.62 li
253.163 119.641 mo
253.862 119.641 li
393.985 119.641 mo
393.27 119.641 li
253.163 122.113 mo
253.862 122.113 li
393.985 122.113 mo
393.27 122.113 li
253.163 125.3 mo
253.862 125.3 li
393.985 125.3 mo
393.27 125.3 li
253.163 129.793 mo
253.862 129.793 li
393.985 129.793 mo
393.27 129.793 li
253.163 111.961 mo
254.562 111.961 li
393.985 111.961 mo
392.57 111.961 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
243.912 113.625 mo
(0.01)
[2.48949 1.24475 2.48949 0 ]xsh
253.163 104.281 mo
253.862 104.281 li
393.985 104.281 mo
393.27 104.281 li
253.163 99.788 mo
253.862 99.788 li
393.985 99.788 mo
393.27 99.788 li
253.163 96.601 mo
253.862 96.601 li
393.985 96.601 mo
393.27 96.601 li
253.163 94.129 mo
253.862 94.129 li
393.985 94.129 mo
393.27 94.129 li
253.163 92.108 mo
253.862 92.108 li
393.985 92.108 mo
393.27 92.108 li
253.163 90.3979 mo
253.862 90.3979 li
393.985 90.3979 mo
393.27 90.3979 li
253.163 88.921 mo
253.862 88.921 li
393.985 88.921 mo
393.27 88.921 li
253.163 87.615 mo
253.862 87.615 li
393.985 87.615 mo
393.27 87.615 li
253.163 86.449 mo
253.862 86.449 li
393.985 86.449 mo
393.27 86.449 li
253.163 86.449 mo
254.562 86.449 li
393.985 86.449 mo
392.57 86.449 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
246.4 88.1127 mo
(0.1)
[2.48949 1.24475 0 ]xsh
253.163 78.769 mo
253.862 78.769 li
393.985 78.769 mo
393.27 78.769 li
253.163 74.276 mo
253.862 74.276 li
393.985 74.276 mo
393.27 74.276 li
253.163 71.089 mo
253.862 71.089 li
393.985 71.089 mo
393.27 71.089 li
253.163 68.6169 mo
253.862 68.6169 li
393.985 68.6169 mo
393.27 68.6169 li
253.163 66.5959 mo
253.862 66.5959 li
393.985 66.5959 mo
393.27 66.5959 li
253.163 64.901 mo
253.862 64.901 li
393.985 64.901 mo
393.27 64.901 li
253.163 63.409 mo
253.862 63.409 li
393.985 63.409 mo
393.27 63.409 li
253.163 62.103 mo
253.862 62.103 li
393.985 62.103 mo
393.27 62.103 li
253.163 60.937 mo
253.862 60.937 li
393.985 60.937 mo
393.27 60.937 li
253.163 60.937 mo
254.562 60.937 li
393.985 60.937 mo
392.57 60.937 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
250.131 62.6006 mo
(1)sh
253.163 53.272 mo
253.862 53.272 li
393.985 53.272 mo
393.27 53.272 li
253.163 137.473 mo
393.985 137.473 li
253.163 53.272 mo
393.985 53.272 li
253.163 137.473 mo
253.163 53.272 li
393.985 137.473 mo
393.985 53.272 li
false sop
0 gry
@
gsave
394 53.257 mo
253.162 53.257 li
253.162 137.489 li
394 137.489 li
cp
clp
253.163 83.1219 mo
358.165 83.1219 li
0.0621 gry
@
grestore
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A7
7988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE
33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C3
12D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1
E4FEB02B613916D7> |-
/K <1C60D8A8C9B64EDFA3F30AEA5DF4FD401A7F234D8B48713128AD4E4576F5
1EA758FCC04623E76F0392C65BD3153165595668DEA1A39FCBD3CCA6EA172D73
74581D5F> |-
/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D7
2A7354004DF70944005F20755FAB3631> |-
/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8
090086BA063BC631F5BCB6255A1F02FF856D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 50 /two put
dup 75 /K put
dup 105 /i put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[46{/.notdef}rp /period /slash /zero /one /two 5{/.notdef}rp /eight 
3{/.notdef}rp /less /.notdef /greater 12{/.notdef}rp /K 8{/.notdef}rp /T 
20{/.notdef}rp /i /.notdef /k 6{/.notdef}rp /r 3{/.notdef}rp /v 
137{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4775 0 0 -4.4775 0 0 ]msf
319.594 145.449 mo
(r/r)
[1.49097 1.24475 0 ]xsh
BDXWHW+Helvetica*1 [3.5447 0 0 -3.5447 0 0 ]msf
323.807 147.688 mo
(vir)
[1.77234 0.786926 0 ]xsh
BDXWHW+Helvetica*1 [0 -4.4775 -4.4775 0 0 0 ]msf
240.026 101.934 mo
(K/K)
[-2.98651 -1.24475 0 ]ysh
BDXWHW+Helvetica*1 [0 -3.5447 -3.5447 0 0 0 ]msf
242.264 94.7201 mo
(200)
[-1.97083 -1.97089 0 ]ysh
gsave
394 53.257 mo
253.162 53.257 li
253.162 137.489 li
394 137.489 li
cp
clp
358.165 79.158 mo
371.318 79.158 li
365.41 81.039 mo
365.41 77.494 li
371.318 79.407 mo
379.884 79.407 li
375.888 80.759 mo
375.888 78.116 li
379.884 78.4269 mo
386.756 78.4269 li
383.506 79.811 mo
383.506 77.075 li
386.756 80.79 mo
393.472 80.79 li
390.3 82.951 mo
390.3 77.899 li
393.472 74.012 mo
394 74.012 li
false sop
0.0621 gry
@
253.163 93.849 mo
337.737 93.849 li
317.837 94.844 mo
317.837 92.3409 li
337.737 89.388 mo
356.813 89.388 li
348.682 90.522 mo
348.682 87.693 li
356.813 86.542 mo
370.68 86.542 li
364.493 87.724 mo
364.493 85.376 li
370.68 81.521 mo
382.138 81.521 li
376.915 82.936 mo
376.915 79.9659 li
382.138 78.909 mo
394 78.909 li
388.761 80.106 mo
388.761 77.774 li
0.069 gry
@
253.163 80.728 mo
370.261 80.728 li
348.993 81.49 mo
348.993 79.764 li
370.261 80.573 mo
383.366 80.573 li
377.49 81.381 mo
377.49 79.842 li
383.366 79.593 mo
391.917 79.593 li
387.937 80.433 mo
387.937 78.831 li
391.917 78.769 mo
394 78.769 li
0.0759 gry
@
253.163 90.491 mo
331.425 90.491 li
311.976 91.191 mo
311.976 89.838 li
331.425 87.056 mo
349.957 87.056 li
342.028 87.817 mo
342.028 86.34 li
349.957 84.319 mo
361.414 84.319 li
356.191 85.112 mo
356.191 83.573 li
361.414 81.365 mo
370.96 81.365 li
366.545 82.205 mo
366.545 80.573 li
370.96 80.153 mo
379.822 80.153 li
375.702 81.0699 mo
375.702 79.204 li
379.822 78.754 mo
387.906 78.754 li
384.128 79.5779 mo
384.128 77.899 li
387.906 75.4269 mo
394 75.4269 li
391.979 76.4529 mo
391.979 74.369 li
0.0828 gry
@
253.163 83.526 mo
353.548 83.526 li
332.809 84.7079 mo
332.809 82.438 li
353.548 82.345 mo
365.923 82.345 li
360.326 83.542 mo
360.326 81.039 li
365.923 81.692 mo
374.365 81.692 li
370.416 82.967 mo
370.416 80.448 li
374.365 81.35 mo
381.376 81.35 li
378.065 82.376 mo
378.065 79.9969 li
381.376 79.002 mo
388.03 79.002 li
384.875 80.262 mo
384.875 77.619 li
388.03 77.556 mo
394 77.556 li
391.653 78.769 mo
391.653 76.235 li
0.0897 gry
@
253.163 84.2729 mo
351.216 84.2729 li
330.585 82.951 mo
330.585 85.672 li
351.216 81.101 mo
366.529 81.101 li
359.782 80.168 mo
359.782 82.0959 li
366.529 79.438 mo
376.028 79.438 li
371.644 78.5359 mo
371.644 80.402 li
376.028 78.132 mo
384.626 78.132 li
380.63 76.8719 mo
380.63 78.8929 li
384.626 74.696 mo
394 74.696 li
0.0966 gry
@
253.163 94.922 mo
327.289 94.922 li
308.183 95.435 mo
308.183 94.627 li
327.289 91.657 mo
345.697 91.657 li
337.815 92.279 mo
337.815 91.067 li
345.697 87.926 mo
358.787 87.926 li
352.91 88.564 mo
352.91 87.211 li
358.787 85.066 mo
371.038 85.066 li
365.488 85.765 mo
365.488 84.413 li
371.038 81.5519 mo
383.133 81.5519 li
377.661 82.392 mo
377.661 80.79 li
383.133 77.961 mo
393.69 77.961 li
388.854 79.127 mo
388.854 76.9189 li
0.1035 gry
@
253.163 126.886 mo
281.473 126.886 li
270.373 127.477 mo
270.373 126.295 li
281.473 124.165 mo
294.548 124.165 li
288.671 124.725 mo
288.671 123.621 li
294.548 121.414 mo
303.55 121.414 li
299.368 122.051 mo
299.368 120.668 li
303.55 119.439 mo
310.748 119.439 li
307.343 120.108 mo
307.343 118.755 li
310.748 116.579 mo
317.231 116.579 li
314.152 117.278 mo
314.152 115.895 li
317.231 115.49 mo
323.014 115.49 li
320.262 116.19 mo
320.262 114.822 li
323.014 112.894 mo
328.891 112.894 li
326.092 113.578 mo
326.092 112.226 li
328.891 109.225 mo
335.358 109.225 li
332.295 109.894 mo
332.295 108.215 li
335.358 104.95 mo
342.401 104.95 li
339.074 105.867 mo
339.074 104.079 li
342.401 101.996 mo
349.646 101.996 li
346.225 102.867 mo
346.225 101.156 li
349.646 98.918 mo
357.124 98.918 li
353.61 99.7729 mo
353.61 98.0309 li
357.124 94.5649 mo
365.021 94.5649 li
361.321 95.606 mo
361.321 93.5229 li
365.021 91.424 mo
374.007 91.424 li
369.825 92.326 mo
369.825 90.274 li
374.007 84.428 mo
385.714 84.428 li
380.397 85.547 mo
380.397 82.765 li
385.714 77.836 mo
394 77.836 li
0.1104 gry
@
253.163 87.366 mo
333.633 87.366 li
314.013 88.75 mo
314.013 86.076 li
333.633 86.371 mo
345.37 86.371 li
340.038 87.7859 mo
340.038 84.739 li
345.37 88.222 mo
352.32 88.222 li
349.039 89.2939 mo
349.039 86.9 li
352.32 87.1949 mo
357.559 87.1949 li
355.056 88.61 mo
355.056 85.7339 li
357.559 85.874 mo
361.43 85.874 li
359.564 87.2729 mo
359.564 84.2729 li
361.43 87.817 mo
364.648 87.817 li
363.078 88.9059 mo
363.078 86.511 li
364.648 86.791 mo
367.462 86.791 li
366.078 88.113 mo
366.078 85.376 li
367.462 86.636 mo
370.09 86.636 li
368.799 87.724 mo
368.799 85.205 li
370.09 86.698 mo
372.53 86.698 li
371.333 87.817 mo
371.333 85.361 li
372.53 84.863 mo
374.847 84.863 li
373.696 86.2469 mo
373.696 83.402 li
374.847 84.77 mo
377.132 84.77 li
376.013 85.858 mo
376.013 83.2 li
377.132 84.988 mo
379.293 84.988 li
378.221 86.154 mo
378.221 83.697 li
379.293 84.257 mo
381.485 84.257 li
380.413 85.547 mo
380.413 82.454 li
381.485 83.184 mo
383.662 83.184 li
382.589 84.335 mo
382.589 81.676 li
383.662 83.2469 mo
385.761 83.2469 li
384.719 84.506 mo
384.719 81.738 li
385.761 82.5309 mo
387.891 82.5309 li
386.849 83.806 mo
386.849 81.163 li
387.891 80.028 mo
390.02 80.028 li
388.979 81.5829 mo
388.979 78.52 li
390.02 81.039 mo
392.119 81.039 li
391.078 82.329 mo
391.078 79.515 li
392.119 80.79 mo
394 80.79 li
393.161 82.081 mo
393.161 79.5309 li
0.1472 gry
@
253.163 80.5099 mo
363.467 80.5099 li
342.37 81.5519 mo
342.37 79.515 li
363.467 78.629 mo
379.184 78.629 li
372.282 79.733 mo
372.282 77.463 li
379.184 75.504 mo
390.518 75.504 li
385.356 76.748 mo
385.356 74.276 li
390.518 73.032 mo
394 73.032 li
0.1841 gry
@
253.163 88.61 mo
336.353 88.61 li
316.531 89.123 mo
316.531 87.957 li
336.353 85.485 mo
353.47 85.485 li
346.054 86.029 mo
346.054 84.6769 li
353.47 82.842 mo
364.757 82.842 li
359.611 83.791 mo
359.611 82.485 li
364.757 82.22 mo
374.505 82.22 li
369.996 82.998 mo
369.996 81.5049 li
374.505 78.474 mo
383.926 78.474 li
379.558 79.298 mo
379.558 77.743 li
383.926 74.976 mo
394 74.976 li
0.2209 gry
@
253.163 112.552 mo
290.444 112.552 li
276.98 112.925 mo
276.98 112.132 li
290.444 111.293 mo
302.695 111.293 li
297.16 111.884 mo
297.16 110.842 li
302.695 109.147 mo
311.525 109.147 li
307.405 109.629 mo
307.405 108.681 li
311.525 105.805 mo
318.894 105.805 li
315.412 106.256 mo
315.412 105.105 li
318.894 103.1 mo
324.911 103.1 li
322.035 103.659 mo
322.035 102.556 li
324.911 102.68 mo
330.026 102.68 li
327.569 103.286 mo
327.569 102.105 li
330.026 100.332 mo
334.534 100.332 li
332.358 100.892 mo
332.358 99.555 li
334.534 99.882 mo
338.732 99.882 li
336.695 100.488 mo
336.695 99.306 li
338.732 98.762 mo
342.603 98.762 li
340.722 99.322 mo
340.722 98.218 li
342.603 97.954 mo
346.101 97.954 li
344.406 98.529 mo
344.406 97.394 li
346.101 97.021 mo
349.35 97.021 li
347.764 97.612 mo
347.764 96.337 li
349.35 95.357 mo
352.382 95.357 li
350.905 96.119 mo
350.905 94.611 li
352.382 95.357 mo
355.242 95.357 li
353.843 95.917 mo
353.843 94.658 li
355.242 93.274 mo
357.948 93.274 li
356.626 94.067 mo
356.626 92.528 li
357.948 93.088 mo
360.513 93.088 li
359.254 93.865 mo
359.254 92.357 li
360.513 92.388 mo
363.109 92.388 li
361.834 93.243 mo
361.834 91.564 li
363.109 90.693 mo
365.581 90.693 li
364.368 91.4399 mo
364.368 89.963 li
365.581 90.227 mo
367.991 90.227 li
366.809 91.004 mo
366.809 89.481 li
367.991 89.325 mo
370.338 89.325 li
369.188 90.103 mo
369.188 88.439 li
370.338 88.89 mo
372.701 88.89 li
371.535 89.698 mo
371.535 88.082 li
372.701 88.206 mo
375.142 88.206 li
373.945 88.999 mo
373.945 87.3979 li
375.142 87.506 mo
377.583 87.506 li
376.386 88.3459 mo
376.386 86.7289 li
377.583 85.687 mo
379.962 85.687 li
378.796 86.449 mo
378.796 84.6769 li
379.962 86.2939 mo
382.232 86.2939 li
381.112 87.164 mo
381.112 85.439 li
382.232 86.107 mo
384.455 86.107 li
383.366 86.884 mo
383.366 85.1429 li
384.455 82.842 mo
387.564 82.842 li
386.04 83.651 mo
386.04 81.599 li
387.564 82.267 mo
390.953 82.267 li
389.305 83.2 mo
389.305 81.381 li
390.953 80.4789 mo
394 80.4789 li
392.726 81.397 mo
392.726 79.5 li
0.2578 gry
@
253.163 103.348 mo
312.442 103.348 li
294.968 103.566 mo
294.968 102.944 li
312.442 92.543 mo
340.629 92.543 li
329.559 93.119 mo
329.559 91.999 li
340.629 86.776 mo
359.238 86.776 li
351.278 87.382 mo
351.278 86.107 li
359.238 82.049 mo
376.106 82.049 li
368.768 82.78 mo
368.768 81.381 li
376.106 77.23 mo
394 77.23 li
387.16 78.116 mo
387.16 76.126 li
0.2947 gry
@
253.163 93.243 mo
325.502 93.243 li
306.55 93.476 mo
306.55 93.025 li
325.502 88.019 mo
344.033 88.019 li
336.104 88.175 mo
336.104 87.864 li
344.033 83.449 mo
359.456 83.449 li
352.677 83.589 mo
352.677 83.324 li
359.456 79.6089 mo
372.857 79.6089 li
366.856 79.749 mo
366.856 79.0959 li
372.857 77.3849 mo
384.082 77.3849 li
378.967 77.603 mo
378.967 77.183 li
384.082 74.276 mo
394 74.276 li
391.202 74.774 mo
391.202 73.887 li
0.3315 gry
@
253.163 90.74 mo
351.34 90.74 li
330.694 92.201 mo
330.694 89.356 li
351.34 86.853 mo
367.447 86.853 li
360.404 88.066 mo
360.404 85.7809 li
367.447 86.185 mo
377.816 86.185 li
373.059 87.18 mo
373.059 84.599 li
377.816 86.884 mo
387.269 86.884 li
382.9 87.693 mo
382.9 86.154 li
387.269 76.779 mo
394 76.779 li
0.3684 gry
@
392.207 74.2729 mo
392.207 74.299 392.186 74.3199 392.16 74.3199 cv
392.134 74.3199 392.113 74.299 392.113 74.2729 cv
392.113 74.2469 392.134 74.226 392.16 74.226 cv
392.186 74.226 392.207 74.2469 392.207 74.2729 cv
f
253.163 82.64 mo
346.474 82.64 li
326.061 83.293 mo
326.061 81.847 li
346.474 80.946 mo
361.741 80.946 li
355.009 81.754 mo
355.009 80.215 li
361.741 79.951 mo
371.582 79.951 li
367.042 80.852 mo
367.042 79.142 li
371.582 78.443 mo
379.806 78.443 li
375.966 79.391 mo
375.966 77.448 li
379.806 77.277 mo
387.067 77.277 li
383.646 78.178 mo
383.646 76.173 li
387.067 77.8669 mo
394 77.8669 li
393.145 78.9709 mo
393.145 76.8409 li
0.4053 gry
@
253.163 105.665 mo
285.422 105.665 li
273.218 106.582 mo
273.218 105.012 li
285.422 99.1819 mo
304.342 99.1819 li
296.274 99.7729 mo
296.274 98.063 li
304.342 92.901 mo
316.92 92.901 li
311.245 95.948 mo
311.245 80.464 li
316.92 92.715 mo
327.336 92.715 li
322.548 93.259 mo
322.548 92.279 li
327.336 90.896 mo
335.094 90.896 li
331.44 91.3459 mo
331.44 90.46 li
335.094 90.025 mo
341.468 90.025 li
338.436 90.507 mo
338.436 89.559 li
341.468 89.761 mo
346.863 89.761 li
344.282 90.274 mo
344.282 89.263 li
346.863 71.929 mo
351.62 71.929 li
349.335 72.442 mo
349.335 71.462 li
351.62 79.033 mo
356.082 79.033 li
353.937 79.5779 mo
353.937 78.52 li
356.082 83.076 mo
361.648 83.076 li
358.989 83.6039 mo
358.989 82.563 li
361.648 82.625 mo
369.81 82.625 li
365.985 83.215 mo
365.985 82.0649 li
369.81 78.8 mo
385.621 78.8 li
378.687 79.282 mo
378.687 78.241 li
385.621 76.204 mo
394 76.204 li
392.694 76.826 mo
392.694 75.644 li
0.4421 gry
@
253.163 116.439 mo
282.111 116.439 li
270.808 117.9 mo
270.808 103.582 li
282.111 116.734 mo
293.709 116.734 li
288.438 117.48 mo
288.438 116.05 li
293.709 115.77 mo
301.529 115.77 li
297.859 116.408 mo
297.859 114.324 li
301.529 113.609 mo
307.343 113.609 li
304.56 114.713 mo
304.56 111.977 li
307.343 113.967 mo
311.945 113.967 li
309.722 114.511 mo
309.722 113.376 li
311.945 113.5 mo
316.096 113.5 li
314.09 113.889 mo
314.09 113.158 li
316.096 111.293 mo
319.92 111.293 li
318.07 111.806 mo
318.07 110.795 li
319.92 109.987 mo
323.387 109.987 li
321.708 110.484 mo
321.708 109.552 li
323.387 109.132 mo
326.807 109.132 li
325.144 109.645 mo
325.144 108.665 li
326.807 107.049 mo
330.274 107.049 li
328.58 107.546 mo
328.58 106.598 li
330.274 104.452 mo
333.835 104.452 li
332.109 105.074 mo
332.109 103.908 li
333.835 102.369 mo
337.612 102.369 li
335.778 102.96 mo
335.778 101.825 li
337.612 99.788 mo
341.546 99.788 li
339.634 100.332 mo
339.634 99.275 li
341.546 98.389 mo
345.557 98.389 li
343.614 98.964 mo
343.614 97.86 li
345.557 96.71 mo
349.444 96.71 li
347.562 97.254 mo
347.562 96.088 li
349.444 95.0309 mo
353.315 95.0309 li
351.434 95.839 mo
351.434 94.316 li
353.315 92.901 mo
357.201 92.901 li
355.32 93.601 mo
355.32 92.248 li
357.201 90.8329 mo
361.104 90.8329 li
359.207 91.502 mo
359.207 90.212 li
361.104 89.605 mo
364.959 89.605 li
363.094 90.3199 mo
363.094 88.968 li
364.959 86.403 mo
368.939 86.403 li
367.011 87.351 mo
367.011 85.516 li
368.939 83.013 mo
373.463 83.013 li
371.287 84.1169 mo
371.287 82.127 li
373.463 78.754 mo
386.149 78.754 li
380.444 79.593 mo
380.444 77.9919 li
386.149 74.572 mo
394 74.572 li
0.479 gry
@
253.163 93.5699 mo
320.775 93.5699 li
302.306 94.331 mo
302.306 92.839 li
320.775 90.896 mo
333.959 90.896 li
328.051 91.611 mo
328.051 90.227 li
333.959 90.025 mo
342.479 90.025 li
338.514 90.8329 mo
338.514 89.2939 li
342.479 88.688 mo
349.086 88.688 li
345.961 89.543 mo
345.961 87.942 li
349.086 86.62 mo
354.496 86.62 li
351.9 87.506 mo
351.9 85.61 li
354.496 85.936 mo
359.238 85.936 li
356.953 86.698 mo
356.953 84.848 li
359.238 85.05 mo
363.373 85.05 li
361.368 85.905 mo
361.368 83.993 li
363.373 85.563 mo
367.073 85.563 li
365.27 86.527 mo
365.27 84.6769 li
367.074 84.1479 mo
370.432 84.1479 li
368.799 85.034 mo
368.799 83.0909 li
370.432 81.832 mo
373.727 81.832 li
372.126 82.967 mo
372.126 80.806 li
373.728 73.732 mo
377.257 73.732 li
375.546 74.711 mo
375.546 72.582 li
377.257 79.002 mo
381.283 79.002 li
379.34 80.028 mo
379.34 77.9919 li
381.283 74.245 mo
394 74.245 li
0.5159 gry
@
253.163 98.902 mo
327.46 98.902 li
308.338 99.431 mo
308.338 97.954 li
327.46 89.667 mo
347.625 89.667 li
339.12 90.476 mo
339.12 89.108 li
347.625 84.6299 mo
360.248 84.6299 li
354.558 85.952 mo
354.558 83.837 li
360.248 85.376 mo
369.141 85.376 li
365.006 86.962 mo
365.006 83.9 li
369.141 83.6039 mo
377.257 83.6039 li
373.463 87.102 mo
373.463 80.246 li
377.257 81.925 mo
386.165 81.925 li
382.029 83.0909 mo
382.029 80.402 li
386.165 77.8669 mo
394 77.8669 li
390.502 79.002 mo
390.502 76.764 li
0.5527 gry
@
253.163 86.449 mo
333.897 86.449 li
314.261 87.102 mo
314.261 85.874 li
333.897 85.159 mo
345.743 85.159 li
340.364 85.952 mo
340.364 84.35 li
345.743 84.226 mo
353.408 84.226 li
349.801 84.879 mo
349.801 83.34 li
353.408 82.842 mo
359.456 82.842 li
356.564 83.464 mo
356.564 81.894 li
359.456 81.832 mo
364.788 81.832 li
362.223 82.5 mo
362.223 80.899 li
364.788 81.272 mo
370.634 81.272 li
367.851 82.112 mo
367.851 80.5099 li
370.634 73.592 mo
376.837 73.592 li
373.883 74.4 mo
373.883 72.753 li
376.837 78.754 mo
383.087 78.754 li
380.117 79.5779 mo
380.117 77.9919 li
383.087 77.4789 mo
387.517 77.4789 li
385.388 78.318 mo
385.388 76.701 li
387.517 78.147 mo
391.606 78.147 li
389.632 78.878 mo
389.632 77.308 li
391.606 76.8409 mo
394 76.8409 li
0.5896 gry
@
253.163 95.435 mo
302.197 95.435 li
286.308 95.902 mo
286.308 95 li
302.197 93.896 mo
315.07 93.896 li
309.271 94.378 mo
309.271 93.4449 li
315.07 93.414 mo
322.967 93.414 li
319.267 93.912 mo
319.267 92.963 li
322.967 92.59 mo
328.751 92.59 li
325.984 93.088 mo
325.984 92.077 li
328.751 91.673 mo
333.633 91.673 li
331.285 92.17 mo
331.285 91.191 li
333.633 90.8799 mo
337.83 90.8799 li
335.794 91.377 mo
335.794 90.382 li
337.83 96.181 mo
342.043 96.181 li
340.007 96.632 mo
340.007 95.731 li
342.043 97.705 mo
346.832 97.705 li
344.531 98.265 mo
344.531 97.207 li
346.832 87.413 mo
352.46 87.413 li
349.77 87.973 mo
349.77 86.884 li
352.46 85.641 mo
358.088 85.641 li
355.398 86.2 mo
355.398 85.128 li
358.087 85.314 mo
363.094 85.314 li
360.684 85.921 mo
360.684 84.739 li
363.094 84.257 mo
368.271 84.257 li
365.783 84.91 mo
365.783 83.62 li
368.271 86.154 mo
373.479 86.154 li
370.976 86.853 mo
370.976 85.237 li
373.479 91.486 mo
379.029 91.486 li
376.37 92.108 mo
376.37 90.756 li
379.029 84.692 mo
383.024 84.692 li
381.097 85.563 mo
381.097 83.542 li
383.024 73.9189 mo
390.502 73.9189 li
386.989 75.4109 mo
386.989 72.364 li
0.6265 gry
@
253.163 108.821 mo
301.295 108.821 li
285.578 109.567 mo
285.578 108.106 li
301.295 106.302 mo
313.764 106.302 li
308.136 106.986 mo
308.136 105.23 li
313.764 105.307 mo
321.693 105.307 li
317.977 105.991 mo
317.977 104.204 li
321.693 103.753 mo
327.787 103.753 li
324.895 104.577 mo
324.895 102.804 li
327.787 103.302 mo
333.088 103.302 li
330.554 104.001 mo
330.554 102.462 li
333.088 101.809 mo
337.659 101.809 li
335.451 102.742 mo
335.451 100.892 li
337.659 99.524 mo
341.624 99.524 li
339.696 100.41 mo
339.696 98.6219 li
341.624 99.1039 mo
345.246 99.1039 li
343.489 100.021 mo
343.489 98.265 li
345.246 99.368 mo
348.542 99.368 li
346.94 100.27 mo
346.94 98.467 li
348.542 97.472 mo
351.651 97.472 li
350.128 98.374 mo
350.128 96.539 li
351.651 96.368 mo
354.465 96.368 li
353.081 97.285 mo
353.081 95.14 li
354.465 97.472 mo
357.17 97.472 li
355.849 98.42 mo
355.849 96.555 li
357.17 95.233 mo
359.627 95.233 li
358.43 96.1349 mo
358.43 93.9579 li
359.627 93.336 mo
362.052 93.336 li
360.87 94.4709 mo
360.87 92.248 li
362.052 93.881 mo
364.415 93.881 li
363.249 94.767 mo
363.249 92.777 li
364.415 93.072 mo
366.638 93.072 li
365.55 93.943 mo
365.55 91.922 li
366.638 92.963 mo
368.861 92.963 li
367.773 93.865 mo
367.773 91.999 li
368.861 90.9269 mo
371.1 90.9269 li
370.012 91.999 mo
370.012 89.823 li
371.1 90.476 mo
373.308 90.476 li
372.219 91.688 mo
372.219 89.3409 li
373.308 90.134 mo
375.484 90.134 li
374.412 91.098 mo
374.412 88.968 li
375.484 87.973 mo
377.754 87.973 li
376.635 89.17 mo
376.635 86.884 li
377.754 88.719 mo
380.086 88.719 li
378.936 89.621 mo
378.936 87.6769 li
380.086 86.2159 mo
382.636 86.2159 li
381.376 87.009 mo
381.376 84.413 li
382.636 84.319 mo
385.31 84.319 li
384.004 85.594 mo
384.004 82.78 li
385.31 83.7599 mo
387.906 83.7599 li
386.631 85.003 mo
386.631 82.6559 li
387.906 81.754 mo
391.14 81.754 li
389.57 83.0439 mo
389.57 80.464 li
391.14 78.5829 mo
394 78.5829 li
393.503 80.106 mo
393.503 76.81 li
0.6633 gry
@
253.163 90.072 mo
337.768 90.072 li
317.853 90.8799 mo
317.853 89.217 li
337.768 88.532 mo
352.289 88.532 li
345.837 89.217 mo
345.837 87.506 li
352.289 85.392 mo
362.736 85.392 li
357.932 86.2159 mo
357.932 84.506 li
362.736 81.568 mo
371.364 81.568 li
367.338 82.6089 mo
367.338 80.37 li
371.364 80.526 mo
378.547 80.526 li
375.158 81.77 mo
375.158 79.375 li
378.547 79.546 mo
384.983 79.546 li
381.936 80.837 mo
381.936 78.178 li
384.983 78.614 mo
391.622 78.614 li
388.481 79.546 mo
388.481 77.4319 li
391.622 73.903 mo
394 73.903 li
0.7002 gry
@
253.163 115.148 mo
269.642 115.148 li
262.46 115.646 mo
262.46 114.682 li
269.642 114.853 mo
281.271 114.853 li
275.985 115.351 mo
275.985 114.402 li
281.271 114.169 mo
288.267 114.169 li
284.971 114.651 mo
284.971 113.718 li
288.267 113.361 mo
293.771 113.361 li
291.143 113.858 mo
291.143 112.894 li
293.771 112.288 mo
298.155 112.288 li
296.041 112.77 mo
296.041 111.853 li
298.155 112.956 mo
301.731 112.956 li
299.989 113.469 mo
299.989 112.474 li
301.731 112.412 mo
304.871 112.412 li
303.348 112.91 mo
303.348 111.946 li
304.871 111.231 mo
307.716 111.231 li
306.332 111.697 mo
306.332 110.795 li
307.716 110.655 mo
310.406 110.655 li
309.1 111.153 mo
309.1 110.189 li
310.406 110.002 mo
312.955 110.002 li
311.712 110.484 mo
311.712 109.552 li
312.955 109.039 mo
315.365 109.039 li
314.184 109.489 mo
314.184 108.603 li
315.365 108.93 mo
317.666 108.93 li
316.547 109.427 mo
316.547 108.479 li
317.666 107.81 mo
319.874 107.81 li
318.785 108.261 mo
318.785 107.375 li
319.874 107.577 mo
321.972 107.577 li
320.931 108.044 mo
320.931 107.142 li
321.972 106.582 mo
323.9 106.582 li
322.952 107.033 mo
322.952 105.929 li
323.9 106.753 mo
325.719 106.753 li
324.818 107.22 mo
324.818 106.318 li
325.719 105.012 mo
327.476 105.012 li
326.605 105.587 mo
326.605 104.468 li
327.476 105.276 mo
329.264 105.276 li
328.378 105.727 mo
328.378 104.779 li
329.264 104.608 mo
330.99 104.608 li
330.134 105.043 mo
330.134 103.939 li
330.99 104.748 mo
332.731 104.748 li
331.86 105.23 mo
331.86 104.297 li
332.731 103.97 mo
334.441 103.97 li
333.586 104.437 mo
333.586 103.519 li
334.441 103.162 mo
336.198 103.162 li
335.327 103.613 mo
335.327 102.68 li
336.198 102.447 mo
337.97 102.447 li
337.099 102.913 mo
337.099 101.903 li
337.97 100.814 mo
339.742 100.814 li
338.872 101.39 mo
338.872 100.255 li
339.742 100.519 mo
341.515 100.519 li
340.644 101.094 mo
340.644 99.959 li
341.515 100.301 mo
343.334 100.301 li
342.432 100.768 mo
342.432 99.524 li
343.334 99.337 mo
345.09 99.337 li
344.22 99.975 mo
344.22 98.762 li
345.09 99.7729 mo
346.863 99.7729 li
345.992 100.27 mo
345.992 99.322 li
346.863 98.793 mo
348.573 98.793 li
347.733 99.2599 mo
347.733 98.187 li
348.573 98.482 mo
350.33 98.482 li
349.459 98.98 mo
349.459 98.0309 li
350.33 97.814 mo
352.071 97.814 li
351.216 98.311 mo
351.216 97.285 li
352.071 97.379 mo
353.781 97.379 li
352.942 97.86 mo
352.942 96.912 li
353.781 96.384 mo
355.445 96.384 li
354.621 96.85 mo
354.621 95.699 li
355.445 96.555 mo
357.093 96.555 li
356.284 97.0519 mo
356.284 96.088 li
357.093 95.186 mo
358.694 95.186 li
357.901 95.793 mo
357.901 94.58 li
358.694 95.855 mo
360.202 95.855 li
359.456 96.368 mo
359.456 95.373 li
360.202 95.233 mo
361.663 95.233 li
360.948 95.746 mo
360.948 94.549 li
361.663 94.767 mo
363.094 94.767 li
362.394 95.264 mo
362.394 93.881 li
363.094 94.549 mo
364.493 94.549 li
363.809 95.062 mo
363.809 93.943 li
364.493 94.067 mo
365.814 94.067 li
365.161 94.689 mo
365.161 93.4449 li
365.814 93.352 mo
367.136 93.352 li
366.483 93.989 mo
366.483 92.73 li
367.136 93.212 mo
368.426 93.212 li
367.789 93.912 mo
367.789 92.59 li
368.426 92.559 mo
369.685 92.559 li
369.063 93.196 mo
369.063 91.9529 li
369.685 92.59 mo
370.929 92.59 li
370.307 93.243 mo
370.307 91.9529 li
370.929 91.517 mo
372.142 91.517 li
371.551 92.17 mo
371.551 90.896 li
372.142 90.709 mo
373.448 90.709 li
372.81 91.3459 mo
372.81 90.118 li
373.448 90.009 mo
374.8 90.009 li
374.132 90.647 mo
374.132 89.403 li
374.8 89.185 mo
376.308 89.185 li
375.562 89.8539 mo
375.562 88.548 li
376.308 72.613 mo
377.956 72.613 li
377.148 73.2339 mo
377.148 72.022 li
377.956 77.665 mo
379.775 77.665 li
378.873 78.334 mo
378.873 77.028 li
379.775 79.158 mo
381.765 79.158 li
380.786 79.826 mo
380.786 78.52 li
381.765 80.075 mo
383.926 80.075 li
382.869 80.775 mo
382.869 79.407 li
383.926 79.671 mo
386.351 79.671 li
385.154 80.402 mo
385.154 78.987 li
386.351 78.474 mo
388.917 78.474 li
387.657 79.22 mo
387.657 77.774 li
388.917 78.054 mo
391.855 78.054 li
390.409 78.878 mo
390.409 77.261 li
391.855 75.909 mo
394 75.909 li
393.55 76.764 mo
393.55 75.1 li
0.712 gry
@
253.163 84.801 mo
344.904 84.801 li
324.569 85.796 mo
324.569 83.837 li
344.904 84.366 mo
359.176 84.366 li
352.833 85.2209 mo
352.833 83.464 li
359.176 83.6349 mo
368.053 83.6349 li
363.918 84.521 mo
363.918 82.796 li
368.053 81.972 mo
375.22 81.972 li
371.846 82.873 mo
371.846 81.132 li
375.22 80.852 mo
381.454 80.852 li
378.485 81.878 mo
378.485 79.92 li
381.454 78.754 mo
386.927 78.754 li
384.315 79.764 mo
384.315 77.619 li
386.927 77.23 mo
393.301 77.23 li
390.269 78.209 mo
390.269 76.017 li
393.301 75.4269 mo
394 75.4269 li
0.7239 gry
@
253.163 82.189 mo
361.306 82.189 li
340.286 83.153 mo
340.286 80.899 li
361.306 81.707 mo
374.101 81.707 li
368.348 82.547 mo
368.348 80.821 li
374.101 81.132 mo
382.247 81.132 li
378.438 82.034 mo
378.438 80.277 li
382.247 80.526 mo
388.792 80.526 li
385.683 81.412 mo
385.683 79.64 li
388.792 80.402 mo
394 80.402 li
391.777 81.163 mo
391.777 79.5309 li
0.7357 gry
@
253.163 86.154 mo
332.404 86.154 li
312.878 87.2729 mo
312.878 84.91 li
332.404 82.858 mo
346.738 82.858 li
340.38 84.2419 mo
340.38 81.459 li
346.738 82.998 mo
354.807 82.998 li
351.029 84.1169 mo
351.029 81.832 li
354.807 68.741 mo
360.948 68.741 li
358.025 70.063 mo
358.025 67.405 li
360.948 75.442 mo
365.954 75.442 li
363.56 76.826 mo
363.56 74.121 li
365.954 75.738 mo
370.945 75.738 li
368.55 77.075 mo
368.55 74.3849 li
370.945 73.405 mo
375.764 73.405 li
373.448 74.929 mo
373.448 72.006 li
375.764 76.266 mo
380.086 76.266 li
378.003 77.743 mo
378.003 75.038 li
380.086 78.007 mo
385.823 78.007 li
383.087 79.78 mo
383.087 76.422 li
385.823 77.075 mo
394 77.075 li
390.922 78.551 mo
390.922 75.224 li
0.7476 gry
@
253.163 104.561 mo
281.427 104.561 li
270.326 104.95 mo
270.326 104.25 li
281.427 100.923 mo
299.057 100.923 li
291.454 101.25 mo
291.454 100.643 li
299.057 95.217 mo
314.805 95.217 li
307.903 95.824 mo
307.903 94.611 li
314.805 91.377 mo
326.885 91.377 li
321.413 91.999 mo
321.413 90.864 li
326.885 88.408 mo
336.633 88.408 li
332.124 89.014 mo
332.124 87.942 li
336.633 87.2419 mo
344.966 87.2419 li
341.064 88.035 mo
341.064 86.62 li
344.966 85.019 mo
352.942 85.019 li
349.21 85.905 mo
349.21 84.319 li
352.942 83.402 mo
359.704 83.402 li
356.502 84.288 mo
356.502 82.7339 li
359.704 81.956 mo
365.301 81.956 li
362.627 82.796 mo
362.627 81.303 li
365.301 73.39 mo
373.028 73.39 li
369.406 74.509 mo
369.406 72.55 li
373.028 72.41 mo
394 72.41 li
391.482 73.157 mo
391.482 71.3069 li
0.7594 gry
@
253.163 98.2339 mo
321.584 98.2339 li
303.037 99.291 mo
303.037 97.332 li
321.584 97.363 mo
336.4 97.363 li
329.839 98.125 mo
329.839 96.461 li
336.4 93.881 mo
346.661 93.881 li
341.95 95.046 mo
341.95 92.917 li
346.661 91.222 mo
355.538 91.222 li
351.402 92.326 mo
351.402 90.212 li
355.538 88.299 mo
363.327 88.299 li
359.673 89.403 mo
359.673 87.118 li
363.327 86.2 mo
370.509 86.2 li
367.12 87.149 mo
367.12 85.392 li
370.509 85.299 mo
377.101 85.299 li
373.976 86.449 mo
373.976 84.179 li
377.101 83.293 mo
383.615 83.293 li
380.521 84.319 mo
380.521 82.127 li
383.615 69.457 mo
390.907 69.457 li
387.471 70.514 mo
387.471 68.166 li
390.907 77.121 mo
394 77.121 li
0.7712 gry
@
253.163 93.507 mo
330.523 93.507 li
311.136 94.487 mo
311.136 92.59 li
330.523 90.616 mo
344.5 90.616 li
338.265 91.517 mo
338.265 89.3409 li
344.5 88.921 mo
353.703 88.921 li
349.428 89.823 mo
349.428 87.6769 li
353.703 87.009 mo
360.575 87.009 li
357.326 88.1899 mo
357.326 85.843 li
360.575 86.527 mo
366.047 86.527 li
363.42 87.631 mo
363.42 85.237 li
366.047 84.879 mo
370.525 84.879 li
368.364 86.123 mo
368.364 83.7599 li
370.525 88.672 mo
375.655 88.672 li
373.199 89.9319 mo
373.199 86.8069 li
375.655 91.751 mo
383.133 91.751 li
379.62 93.0099 mo
379.62 89.434 li
383.133 78.474 mo
389.414 78.474 li
386.429 79.811 mo
386.429 76.204 li
389.414 80.184 mo
394 80.184 li
392.275 81.225 mo
392.275 78.8929 li
0.7831 gry
@
253.163 110.36 mo
286.821 110.36 li
274.244 110.702 mo
274.244 109.458 li
286.821 106.022 mo
301.746 106.022 li
295.154 106.458 mo
295.154 105.634 li
301.746 104.032 mo
310.794 104.032 li
306.581 104.608 mo
306.581 103.504 li
310.794 101.996 mo
317.417 101.996 li
314.277 102.509 mo
314.277 101.53 li
317.417 101.84 mo
322.657 101.84 li
320.154 102.4 mo
320.154 101.327 li
322.657 101.016 mo
327.196 101.016 li
325.004 101.592 mo
325.004 100.472 li
327.196 98.482 mo
331.161 98.482 li
329.248 99.166 mo
329.248 97.798 li
331.161 98.265 mo
334.83 98.265 li
333.057 98.762 mo
333.057 97.5959 li
334.83 98.125 mo
338.328 98.125 li
336.633 98.7 mo
336.633 97.581 li
338.328 96.865 mo
341.608 96.865 li
340.007 97.41 mo
340.007 96.337 li
341.608 95.948 mo
344.733 95.948 li
343.209 96.4919 mo
343.209 95.342 li
344.733 95.015 mo
347.687 95.015 li
346.241 95.5439 mo
346.241 94.394 li
347.687 93.259 mo
350.516 93.259 li
349.133 94.0049 mo
349.133 92.575 li
350.516 93.181 mo
353.268 93.181 li
351.915 93.71 mo
351.915 92.388 li
353.268 92.279 mo
355.864 92.279 li
354.589 92.9319 mo
354.589 91.564 li
355.864 90.8329 mo
358.507 90.8329 li
357.217 91.58 mo
357.217 90.149 li
358.507 90.305 mo
361.166 90.305 li
359.86 91.004 mo
359.86 89.59 li
361.166 89.605 mo
363.747 89.605 li
362.487 90.258 mo
362.487 88.89 li
363.747 89.108 mo
366.374 89.108 li
365.084 89.667 mo
365.084 88.222 li
366.374 87.3199 mo
369.468 87.3199 li
367.96 88.035 mo
367.96 86.558 li
369.468 87.8329 mo
373.93 87.8329 li
371.784 88.626 mo
371.784 87.056 li
373.93 86.62 mo
380.941 86.62 li
377.63 87.335 mo
377.63 85.936 li
380.941 77.9449 mo
394 77.9449 li
392.772 78.754 mo
392.772 77.214 li
0.7949 gry
@
253.163 101.623 mo
310.297 101.623 li
293.133 102.198 mo
293.133 101.063 li
310.297 99.664 mo
324.289 99.664 li
318.055 100.286 mo
318.055 98.793 li
324.289 98.607 mo
333.415 98.607 li
329.171 99.213 mo
329.171 98.0309 li
333.415 97.394 mo
339.882 97.394 li
336.804 98 mo
336.804 96.694 li
339.882 96.632 mo
345.168 96.632 li
342.634 97.27 mo
342.634 96.042 li
345.168 94.5959 mo
349.786 94.5959 li
347.562 95.357 mo
347.562 93.834 li
349.786 94.4399 mo
353.968 94.4399 li
351.931 95.093 mo
351.931 93.461 li
353.968 93.29 mo
357.994 93.29 li
356.035 93.9269 mo
356.035 92.3719 li
357.994 92.155 mo
361.896 92.155 li
360 92.746 mo
360 91.409 li
361.896 90.305 mo
365.705 90.305 li
363.855 91.113 mo
363.855 89.512 li
365.705 88.75 mo
369.452 88.75 li
367.633 89.652 mo
367.633 87.895 li
369.452 87.693 mo
373.106 87.693 li
371.333 88.548 mo
371.333 86.869 li
373.106 86.838 mo
376.852 86.838 li
375.033 87.506 mo
375.033 85.967 li
376.852 84.801 mo
380.584 84.801 li
378.78 85.7029 mo
378.78 83.946 li
380.584 82.733 mo
384.47 82.733 li
382.589 83.6349 mo
382.589 81.443 li
384.47 82.702 mo
388.652 82.702 li
386.631 83.449 mo
386.631 81.816 li
388.652 70.1559 mo
393.565 70.1559 li
391.202 70.98 mo
391.202 69.115 li
393.565 71.618 mo
394 71.618 li
0.8186 gry
@
253.163 105.618 mo
314.759 105.618 li
296.973 106.256 mo
296.973 105.027 li
314.759 101.809 mo
331.503 101.809 li
324.211 102.431 mo
324.211 101.25 li
331.503 98 mo
344.344 98 li
338.561 98.6219 mo
338.561 97.441 li
344.344 92.9789 mo
356.844 92.9789 li
351.2 93.538 mo
351.2 92.03 li
356.844 87.258 mo
370.043 87.258 li
364.12 88.159 mo
364.12 86.123 li
370.043 82.283 mo
386.367 82.283 li
379.247 82.64 mo
379.247 81.459 li
386.367 74.494 mo
394 74.494 li
0.8304 gry
@
253.163 92.326 mo
335.887 92.326 li
316.096 93.072 mo
316.096 91.3149 li
335.887 88.766 mo
352.646 88.766 li
345.355 89.59 mo
345.355 87.771 li
352.646 87.864 mo
364.12 87.864 li
358.896 88.983 mo
358.896 86.884 li
364.12 71.618 mo
374.583 71.618 li
369.779 72.753 mo
369.779 70.685 li
374.583 77.137 mo
392.088 77.137 li
384.532 78.598 mo
384.532 75.831 li
392.088 62.803 mo
394 62.803 li
0.8423 gry
@
253.163 104.39 mo
313.468 104.39 li
295.854 104.592 mo
295.854 103.659 li
313.468 96.026 mo
334.332 96.026 li
325.579 96.368 mo
325.579 95.746 li
334.332 89.3719 mo
352.133 89.3719 li
344.453 90.18 mo
344.453 88.7029 li
352.133 67.902 mo
369.359 67.902 li
361.896 68.508 mo
361.896 66.985 li
369.359 75.753 mo
394 75.753 li
389.943 77.012 mo
389.943 74.68 li
0.8541 gry
@
253.163 123.279 mo
291.687 123.279 li
277.929 123.73 mo
277.929 122.829 li
291.687 115.553 mo
311.245 115.553 li
302.943 116.143 mo
302.943 114.977 li
311.245 107.111 mo
326.87 107.111 li
320.014 107.795 mo
320.014 106.411 li
326.87 99.12 mo
341.297 99.12 li
334.892 100.037 mo
334.892 97.923 li
341.297 93.538 mo
354.325 93.538 li
348.48 94.673 mo
348.48 92.4659 li
354.325 89.232 mo
367.182 89.232 li
361.399 90.414 mo
361.399 88.019 li
367.182 82.5 mo
382.014 82.5 li
375.453 83.791 mo
375.453 80.681 li
382.014 71.415 mo
394 71.415 li
0.866 gry
@
253.163 94.829 mo
329.062 94.829 li
309.799 96.819 mo
309.799 92.823 li
329.062 93.912 mo
341.033 93.912 li
335.607 95.886 mo
335.607 91.704 li
341.033 93.803 mo
348.2 93.803 li
344.826 95.684 mo
344.826 91.813 li
348.2 92.559 mo
353.532 92.559 li
350.983 94.5649 mo
350.983 90.072 li
353.532 93.352 mo
357.87 93.352 li
355.771 95.264 mo
355.771 91.424 li
357.87 94.3 mo
361.523 94.3 li
359.751 96.1349 mo
359.751 92.31 li
361.523 93.5229 mo
364.71 93.5229 li
363.156 95.373 mo
363.156 91.175 li
364.71 92.217 mo
367.695 92.217 li
366.234 94.098 mo
366.234 90.305 li
367.695 92.59 mo
370.447 92.59 li
369.11 94.456 mo
369.11 90.569 li
370.447 92.45 mo
373.106 92.45 li
371.8 94.238 mo
371.8 90.554 li
373.106 91.3929 mo
375.702 91.3929 li
374.427 93.274 mo
374.427 89.356 li
375.702 90.3199 mo
378.36 90.3199 li
377.055 92.217 mo
377.055 87.6 li
378.36 88.175 mo
381.128 88.175 li
379.775 90.212 mo
379.775 86.1689 li
381.128 84.459 mo
384.113 84.459 li
382.667 86.465 mo
382.667 82.252 li
384.113 83.775 mo
387.284 83.775 li
385.745 86.107 mo
385.745 81.054 li
387.284 83.278 mo
390.611 83.278 li
388.994 85.345 mo
388.994 81.132 li
390.611 79.64 mo
394 79.64 li
392.368 81.91 mo
392.368 76.639 li
0.8778 gry
@
253.163 120.015 mo
278.379 120.015 li
268.212 120.481 mo
268.212 119.33 li
278.379 119.191 mo
290.817 119.191 li
285.204 119.626 mo
285.204 118.74 li
290.817 115.475 mo
299.243 115.475 li
295.31 116.05 mo
295.31 114.931 li
299.243 112.692 mo
305.804 112.692 li
302.695 113.454 mo
302.695 111.961 li
305.804 111.231 mo
311.152 111.231 li
308.587 111.977 mo
308.587 110.5 li
311.152 109.956 mo
315.878 109.956 li
313.593 110.733 mo
313.593 109.085 li
315.878 107.981 mo
319.982 107.981 li
317.993 108.805 mo
317.993 107.064 li
319.982 108.106 mo
323.636 108.106 li
321.864 108.836 mo
321.864 107.157 li
323.636 106.815 mo
326.854 106.815 li
325.284 107.639 mo
325.284 105.898 li
326.854 105.836 mo
329.761 105.836 li
328.347 106.815 mo
328.347 104.919 li
329.761 104.328 mo
332.482 104.328 li
331.161 105.292 mo
331.161 103.348 li
332.482 104.95 mo
335.032 104.95 li
333.788 105.914 mo
333.788 104.001 li
335.032 104.437 mo
337.457 104.437 li
336.275 105.385 mo
336.275 103.519 li
337.457 103.146 mo
339.68 103.146 li
338.592 104.126 mo
338.592 102.229 li
339.68 102.245 mo
341.826 102.245 li
340.784 103.146 mo
340.784 101.39 li
341.826 101.623 mo
343.924 101.623 li
342.898 102.525 mo
342.898 100.768 li
343.924 101.25 mo
345.93 101.25 li
344.951 102.182 mo
344.951 100.379 li
345.93 100.426 mo
347.858 100.426 li
346.909 101.343 mo
346.909 99.431 li
347.858 99.633 mo
349.708 99.633 li
348.806 100.643 mo
348.806 98.42 li
349.708 98.358 mo
351.558 98.358 li
350.641 99.477 mo
350.641 97.1609 li
351.558 98.1559 mo
353.392 98.1559 li
352.475 99.1039 mo
352.475 96.974 li
353.392 98.7 mo
355.165 98.7 li
354.279 99.664 mo
354.279 97.767 li
355.165 95.653 mo
356.922 95.653 li
356.051 96.865 mo
356.051 94.549 li
356.922 94.891 mo
358.647 94.891 li
357.792 96.119 mo
357.792 93.461 li
358.647 95.093 mo
360.388 95.093 li
359.533 96.321 mo
359.533 93.896 li
360.388 95.5439 mo
362.099 95.5439 li
361.259 96.508 mo
361.259 93.9579 li
362.099 93.974 mo
363.793 93.974 li
362.954 95.186 mo
362.954 92.823 li
363.793 94.0829 mo
365.488 94.0829 li
364.648 95.0779 mo
364.648 92.8539 li
365.488 93.399 mo
367.198 93.399 li
366.358 94.642 mo
366.358 92.139 li
367.198 91.564 mo
368.986 91.564 li
368.1 92.808 mo
368.1 90.3979 li
368.986 91.548 mo
370.758 91.548 li
369.872 92.652 mo
369.872 90.351 li
370.758 89.714 mo
372.608 89.714 li
371.691 90.989 mo
371.691 88.486 li
372.608 89.496 mo
374.443 89.496 li
373.541 90.771 mo
373.541 88.299 li
374.443 89.481 mo
376.308 89.481 li
375.391 90.647 mo
375.391 88.253 li
376.308 87.957 mo
378.252 87.957 li
377.303 89.232 mo
377.303 86.7599 li
378.252 86.636 mo
380.226 86.636 li
379.262 87.926 mo
379.262 85.299 li
380.226 87.335 mo
382.278 87.335 li
381.268 88.61 mo
381.268 85.967 li
382.278 85.376 mo
384.33 85.376 li
383.32 86.745 mo
383.32 84.039 li
384.33 85.7339 mo
386.46 85.7339 li
385.419 86.8069 mo
385.419 84.413 li
386.46 84.164 mo
388.652 84.164 li
387.58 85.47 mo
387.58 82.811 li
388.652 82.329 mo
391.109 82.329 li
389.896 83.7599 mo
389.896 80.9919 li
391.109 81.086 mo
393.736 81.086 li
392.446 82.392 mo
392.446 79.686 li
393.736 82.547 mo
394 82.547 li
0.8896 gry
@
253.163 93.803 mo
333.601 93.803 li
313.981 94.456 mo
313.981 93.165 li
333.601 94.269 mo
344.671 94.269 li
339.618 94.938 mo
339.618 93.647 li
344.671 92.233 mo
352.397 92.233 li
348.775 92.823 mo
348.775 91.657 li
352.397 90.149 mo
359.098 90.149 li
355.927 90.8019 mo
355.927 89.543 li
359.098 88.066 mo
365.332 88.066 li
362.363 88.672 mo
362.363 87.475 li
365.332 86.791 mo
370.867 86.791 li
368.224 87.444 mo
368.224 86.045 li
370.867 84.646 mo
375.935 84.646 li
373.494 85.47 mo
373.494 83.791 li
375.935 83.915 mo
380.91 83.915 li
378.516 84.599 mo
378.516 83.0439 li
380.91 82.687 mo
385.574 82.687 li
383.335 83.386 mo
383.335 81.894 li
385.574 80.775 mo
390.114 80.775 li
387.937 81.568 mo
387.937 79.842 li
390.114 78.8 mo
394 78.8 li
392.461 79.655 mo
392.461 77.8669 li
0.8528 gry
@
253.163 120.357 mo
260.439 120.357 li
257.003 120.699 mo
257.003 120.046 li
260.439 118.88 mo
272.347 118.88 li
266.953 119.16 mo
266.953 118.615 li
272.347 116.143 mo
279.856 116.143 li
276.327 116.532 mo
276.327 115.786 li
279.856 114.464 mo
285.842 114.464 li
282.981 114.837 mo
282.981 114.185 li
285.842 113.516 mo
290.646 113.516 li
288.329 113.874 mo
288.329 113.205 li
290.646 111.93 mo
295.014 111.93 li
292.916 112.241 mo
292.916 111.464 li
295.014 110.189 mo
298.979 110.189 li
297.067 110.655 mo
297.067 109.785 li
298.979 109.614 mo
302.399 109.614 li
300.736 110.049 mo
300.736 109.381 li
302.399 109.318 mo
305.493 109.318 li
303.985 109.754 mo
303.985 108.899 li
305.493 108.23 mo
308.338 108.23 li
306.954 108.665 mo
306.954 107.81 li
308.338 107.95 mo
311.012 107.95 li
309.706 108.417 mo
309.706 107.531 li
311.012 106.536 mo
313.531 106.536 li
312.302 106.955 mo
312.302 106.131 li
313.531 106.629 mo
315.878 106.629 li
314.728 107.064 mo
314.728 106.225 li
315.878 105.758 mo
318.07 105.758 li
316.997 106.178 mo
316.997 105.276 li
318.07 105.136 mo
320.138 105.136 li
319.112 105.525 mo
319.112 104.639 li
320.138 104.732 mo
322.143 104.732 li
321.148 105.136 mo
321.148 104.095 li
322.143 103.768 mo
323.994 103.768 li
323.076 104.297 mo
323.076 103.24 li
323.994 103.177 mo
325.797 103.177 li
324.911 103.737 mo
324.911 102.664 li
325.797 102.151 mo
327.585 102.151 li
326.699 102.664 mo
326.699 101.654 li
327.585 102.4 mo
329.264 102.4 li
328.44 102.929 mo
328.44 101.872 li
329.264 101.747 mo
330.865 101.747 li
330.072 102.307 mo
330.072 101.219 li
330.865 102.182 mo
332.404 102.182 li
331.643 102.742 mo
331.643 101.638 li
332.404 101.203 mo
333.881 101.203 li
333.151 101.747 mo
333.151 100.69 li
333.881 100.628 mo
335.312 100.628 li
334.612 101.156 mo
334.612 100.13 li
335.312 100.535 mo
336.695 100.535 li
336.011 101.11 mo
336.011 99.99 li
336.695 99.555 mo
338.032 99.555 li
337.379 100.068 mo
337.379 99.073 li
338.032 98.778 mo
339.416 98.778 li
338.732 99.322 mo
338.732 98.28 li
339.416 97.907 mo
340.815 97.907 li
340.131 98.436 mo
340.131 97.425 li
340.815 96.881 mo
342.199 96.881 li
341.515 97.379 mo
341.515 96.15 li
342.199 96.446 mo
343.551 96.446 li
342.883 97.192 mo
342.883 95.746 li
343.551 96.0569 mo
344.873 96.0569 li
344.22 96.663 mo
344.22 95.389 li
344.873 96.073 mo
346.179 96.073 li
345.541 96.741 mo
345.541 95.357 li
346.179 95.233 mo
347.485 95.233 li
346.847 95.824 mo
346.847 94.533 li
347.485 94.16 mo
348.744 94.16 li
348.122 94.844 mo
348.122 93.538 li
348.744 93.756 mo
350.019 93.756 li
349.397 94.4399 mo
349.397 93.134 li
350.019 93.787 mo
351.231 93.787 li
350.625 94.502 mo
350.625 93.134 li
351.231 94.456 mo
352.429 94.456 li
351.838 95 mo
351.838 93.616 li
352.429 93.5229 mo
353.61 93.5229 li
353.019 94.238 mo
353.019 92.839 li
353.61 92.575 mo
354.729 92.575 li
354.17 93.29 mo
354.17 91.891 li
354.729 91.9529 mo
355.864 91.9529 li
355.305 92.637 mo
355.305 91.3149 li
355.864 91.269 mo
356.953 91.269 li
356.408 91.922 mo
356.408 90.662 li
356.953 92.186 mo
358.025 92.186 li
357.497 92.963 mo
357.497 91.455 li
358.025 90.3669 mo
359.098 90.3669 li
358.569 91.082 mo
358.569 89.698 li
359.098 90.118 mo
360.171 90.118 li
359.642 90.787 mo
359.642 89.496 li
360.171 90.056 mo
361.212 90.056 li
360.684 90.771 mo
360.684 89.3719 li
361.212 89.263 mo
362.254 89.263 li
361.725 89.947 mo
361.725 88.61 li
362.254 88.719 mo
363.327 88.719 li
362.798 89.403 mo
362.798 88.082 li
363.327 89.092 mo
364.399 89.092 li
363.871 89.8539 mo
363.871 88.408 li
364.399 88.47 mo
365.503 88.47 li
364.944 89.217 mo
364.944 87.7859 li
365.503 87.227 mo
366.592 87.227 li
366.047 87.864 mo
366.047 86.62 li
366.592 86.636 mo
367.695 86.636 li
367.151 87.3199 mo
367.151 85.921 li
367.695 86.511 mo
368.815 86.511 li
368.255 87.2419 mo
368.255 85.843 li
368.815 85.936 mo
369.965 85.936 li
369.39 86.6819 mo
369.39 85.1899 li
369.965 86.931 mo
371.24 86.931 li
370.603 87.646 mo
370.603 86.154 li
371.24 87.2419 mo
372.639 87.2419 li
371.955 87.988 mo
371.955 86.527 li
372.639 85.516 mo
374.178 85.516 li
373.417 86.263 mo
373.417 84.817 li
374.178 84.692 mo
375.842 84.692 li
375.018 85.408 mo
375.018 84.024 li
375.842 84.008 mo
377.785 84.008 li
376.821 84.7859 mo
376.821 83.262 li
377.785 83.651 mo
379.915 83.651 li
378.858 84.428 mo
378.858 82.92 li
379.915 85.128 mo
382.34 85.128 li
381.159 85.921 mo
381.159 84.335 li
382.34 85.237 mo
385.139 85.237 li
383.771 85.889 mo
383.771 84.506 li
385.139 82.252 mo
388.217 82.252 li
386.725 82.905 mo
386.725 81.428 li
388.217 81.723 mo
391.186 81.723 li
389.741 82.5 mo
389.741 81.008 li
391.186 80.573 mo
394 80.573 li
392.788 81.381 mo
392.788 79.811 li
0.8159 gry
@
253.163 110.236 mo
299.29 110.236 li
283.945 110.484 mo
283.945 110.018 li
299.29 103.053 mo
318.925 103.053 li
310.608 103.38 mo
310.608 102.509 li
318.925 98.731 mo
332.591 98.731 li
326.497 99.197 mo
326.497 98.28 li
332.591 92.668 mo
344.531 92.668 li
339.12 93.228 mo
339.12 92.155 li
344.531 89.683 mo
353.206 89.683 li
349.164 90.212 mo
349.164 89.185 li
353.206 87.429 mo
360.544 87.429 li
357.093 87.973 mo
357.093 86.698 li
360.544 85.905 mo
367.042 85.905 li
363.964 86.496 mo
363.964 85.205 li
367.042 84.086 mo
372.904 84.086 li
370.105 84.6609 mo
370.105 83.355 li
372.904 81.039 mo
378.936 81.039 li
376.06 81.925 mo
376.06 80.277 li
378.936 79.204 mo
385.046 79.204 li
382.138 79.826 mo
382.138 78.4269 li
385.046 76.157 mo
394 76.157 li
389.881 77.012 mo
389.881 75.3329 li
0.7791 gry
@
253.163 98.98 mo
300.642 98.98 li
285.033 100.037 mo
285.033 97.954 li
300.642 98.374 mo
312.302 98.374 li
307.001 99.368 mo
307.001 97.379 li
312.302 97.985 mo
319.314 97.985 li
316.003 99.026 mo
316.003 96.99 li
319.314 97.985 mo
324.569 97.985 li
322.05 98.7 mo
322.05 96.803 li
324.569 97.798 mo
328.844 97.798 li
326.776 98.576 mo
326.776 96.601 li
328.844 96.819 mo
332.638 96.819 li
330.803 97.55 mo
330.803 95.357 li
332.638 96.352 mo
335.996 96.352 li
334.363 97.099 mo
334.363 95.0309 li
335.996 96.679 mo
338.918 96.679 li
337.488 97.441 mo
337.488 95.964 li
338.918 96.073 mo
341.577 96.073 li
340.271 96.865 mo
340.271 95.28 li
341.577 93.4919 mo
343.987 93.4919 li
342.805 94.502 mo
342.805 92.543 li
343.987 93.943 mo
346.256 93.943 li
345.137 95.015 mo
345.137 92.917 li
346.256 94.611 mo
348.34 94.611 li
347.314 95.389 mo
347.314 93.5229 li
348.34 93.4449 mo
350.283 93.4449 li
349.335 94.549 mo
349.335 92.388 li
350.283 92.715 mo
352.195 92.715 li
351.263 93.818 mo
351.263 91.704 li
352.195 92.17 mo
354.014 92.17 li
353.128 93.259 mo
353.128 91.16 li
354.014 92.264 mo
355.724 92.264 li
354.885 93.29 mo
354.885 91.253 li
355.724 92.4969 mo
357.481 92.4969 li
356.611 93.321 mo
356.611 91.3459 li
357.481 77.214 mo
359.222 77.214 li
358.367 77.9919 mo
358.367 75.924 li
359.222 80.712 mo
360.995 80.712 li
360.124 81.6609 mo
360.124 79.702 li
360.995 82.283 mo
362.596 82.283 li
361.803 83.402 mo
361.803 81.272 li
362.596 84.444 mo
364.197 84.444 li
363.404 85.252 mo
363.404 83.34 li
364.197 84.335 mo
365.721 84.335 li
364.975 85.128 mo
364.975 83.107 li
365.721 83.48 mo
367.213 83.48 li
366.483 84.475 mo
366.483 82.454 li
367.213 83.6349 mo
368.721 83.6349 li
367.975 84.77 mo
367.975 82.562 li
368.721 84.988 mo
370.276 84.988 li
369.514 85.874 mo
369.514 84.164 li
370.276 86.962 mo
371.94 86.962 li
371.116 87.7859 mo
371.116 86.029 li
371.94 87.133 mo
373.759 87.133 li
372.857 87.988 mo
372.857 86.123 li
373.759 87.118 mo
375.702 87.118 li
374.754 87.942 mo
374.754 86.371 li
375.702 86.962 mo
377.785 86.962 li
376.759 87.8329 mo
376.759 86.1689 li
377.785 90.212 mo
380.863 90.212 li
379.355 91.129 mo
379.355 89.3409 li
380.863 83.293 mo
387.051 83.293 li
384.113 84.1949 mo
384.113 82.454 li
387.051 78.691 mo
393.223 78.691 li
390.285 79.469 mo
390.285 77.556 li
393.223 77.681 mo
394 77.681 li
0.7422 gry
@
253.163 90.787 mo
342.634 90.787 li
322.439 92.062 mo
322.439 89.636 li
342.634 91.004 mo
353.921 91.004 li
348.775 92.201 mo
348.775 89.8069 li
353.921 91.72 mo
361.166 91.72 li
357.745 92.652 mo
357.745 90.74 li
361.166 88.797 mo
366.669 88.797 li
364.026 90.025 mo
364.026 87.2729 li
366.669 86.449 mo
371.162 86.449 li
368.986 88.051 mo
368.986 84.988 li
371.162 67.886 mo
375.562 67.886 li
373.432 69.301 mo
373.432 66.394 li
375.562 76.95 mo
380.133 76.95 li
377.925 78.101 mo
377.925 75.442 li
380.133 75.769 mo
384.548 75.769 li
382.418 77.4319 mo
382.418 74.09 li
384.548 77.23 mo
392.415 77.23 li
388.73 78.831 mo
388.73 75.442 li
392.415 71.276 mo
394 71.276 li
0.7053 gry
@
253.163 108.697 mo
281.738 108.697 li
270.544 109.225 mo
270.544 107.81 li
281.738 105.649 mo
297.968 105.649 li
290.879 105.976 mo
290.879 105.338 li
297.968 104.235 mo
306.441 104.235 li
302.477 104.919 mo
302.477 103.784 li
306.441 103.286 mo
312.598 103.286 li
309.675 103.753 mo
309.675 102.867 li
312.598 101.514 mo
317.464 101.514 li
315.132 101.903 mo
315.132 101.141 li
317.464 100.255 mo
321.553 100.255 li
319.578 101.094 mo
319.578 99.7419 li
321.553 99.571 mo
325.066 99.571 li
323.356 100.084 mo
323.356 99.073 li
325.066 98.6219 mo
328.082 98.6219 li
326.605 99.1039 mo
326.605 98.14 li
328.082 99.026 mo
330.803 99.026 li
329.466 99.555 mo
329.466 98.529 li
330.803 98.047 mo
333.228 98.047 li
332.031 98.545 mo
332.031 97.581 li
333.228 98.063 mo
335.467 98.063 li
334.363 98.607 mo
334.363 97.814 li
335.467 97.363 mo
337.566 97.363 li
336.54 97.892 mo
336.54 96.881 li
337.566 96.85 mo
339.54 96.85 li
338.561 97.363 mo
338.561 96.384 li
339.54 96.897 mo
341.375 96.897 li
340.473 97.425 mo
340.473 96.399 li
341.375 95.606 mo
343.147 95.606 li
342.276 96.119 mo
342.276 95.047 li
343.147 95.948 mo
344.842 95.948 li
344.002 96.4919 mo
344.002 95.435 li
344.842 94.4399 mo
346.505 94.4399 li
345.681 95.14 mo
345.681 93.725 li
346.505 94.813 mo
348.091 94.813 li
347.314 95.342 mo
347.314 94.3 li
348.091 94.0359 mo
349.708 94.0359 li
348.915 94.549 mo
348.915 93.507 li
349.708 93.088 mo
351.325 93.088 li
350.516 93.585 mo
350.516 92.3409 li
351.325 92.652 mo
352.864 92.652 li
352.102 92.901 mo
352.102 91.844 li
352.864 92.559 mo
354.418 92.559 li
353.641 93.103 mo
353.641 92.077 li
354.418 91.9529 mo
355.958 91.9529 li
355.196 92.4659 mo
355.196 91.191 li
355.958 91.611 mo
357.435 91.611 li
356.704 92.139 mo
356.704 91.051 li
357.435 91.486 mo
358.88 91.486 li
358.165 92.015 mo
358.165 91.004 li
358.88 90.8799 mo
360.311 90.8799 li
359.611 91.455 mo
359.611 90.258 li
360.311 89.8849 mo
361.725 89.8849 li
361.026 90.553 mo
361.026 89.185 li
361.725 90.538 mo
363.125 90.538 li
362.441 91.113 mo
362.441 89.994 li
363.125 90.429 mo
364.493 90.429 li
363.809 91.051 mo
363.809 89.8539 li
364.493 88.532 mo
365.845 88.532 li
365.177 89.248 mo
365.177 87.8019 li
365.845 87.879 mo
367.213 87.879 li
366.529 88.532 mo
366.529 87.164 li
367.213 88.237 mo
368.582 88.237 li
367.897 88.8279 mo
367.897 87.429 li
368.582 88.019 mo
369.919 88.019 li
369.266 88.626 mo
369.266 87.413 li
369.919 87.211 mo
371.287 87.211 li
370.603 87.817 mo
370.603 86.356 li
371.287 86.9 mo
372.67 86.9 li
371.986 87.537 mo
371.986 86.263 li
372.67 85.485 mo
374.116 85.485 li
373.401 86.232 mo
373.401 84.6769 li
374.116 85.345 mo
375.624 85.345 li
374.878 85.983 mo
374.878 84.7549 li
375.624 83.355 mo
377.132 83.355 li
376.386 84.179 mo
376.386 82.594 li
377.132 83.495 mo
378.671 83.495 li
377.91 84.102 mo
377.91 82.702 li
378.671 82.92 mo
380.195 82.92 li
379.433 83.542 mo
379.433 82.081 li
380.195 81.5519 mo
381.75 81.5519 li
380.988 82.267 mo
380.988 80.759 li
381.75 82.0649 mo
383.444 82.0649 li
382.605 82.765 mo
382.605 81.443 li
383.444 80.433 mo
385.232 80.433 li
384.346 81.132 mo
384.346 79.546 li
385.232 83.433 mo
387.3 83.433 li
386.274 84.2419 mo
386.274 82.687 li
387.3 81.707 mo
389.725 81.707 li
388.528 82.485 mo
388.528 81.0229 li
389.725 78.5829 mo
393.581 78.5829 li
391.715 79.375 mo
391.715 77.852 li
393.581 66.456 mo
394 66.456 li
0.6685 gry
@
253.163 94.549 mo
319.625 94.549 li
301.28 95.093 mo
301.28 94.051 li
319.625 92.481 mo
335.28 92.481 li
328.409 93.088 mo
328.409 91.922 li
335.28 90.507 mo
345.293 90.507 li
340.675 91.098 mo
340.675 89.947 li
345.293 88.579 mo
352.91 88.579 li
349.335 89.185 mo
349.335 87.988 li
352.91 87.382 mo
359.627 87.382 li
356.455 88.066 mo
356.455 86.7599 li
359.627 86.527 mo
365.426 86.527 li
362.658 87.2419 mo
362.658 85.843 li
365.426 83.433 mo
371.178 83.433 li
368.426 84.102 mo
368.426 82.796 li
371.178 82.827 mo
376.37 82.827 li
373.883 83.558 mo
373.883 82.112 li
376.37 82.003 mo
385.465 82.003 li
381.237 82.671 mo
381.237 81.365 li
385.465 70.0779 mo
394 70.0779 li
0.6316 gry
@
253.163 110.205 mo
303.145 110.205 li
287.101 110.593 mo
287.101 109.831 li
303.145 105.354 mo
320.387 105.354 li
312.924 105.851 mo
312.924 104.888 li
320.387 100.752 mo
333.042 100.752 li
327.336 101.187 mo
327.336 100.286 li
333.042 96.181 mo
344.002 96.181 li
338.996 96.803 mo
338.996 95.5909 li
344.002 93.974 mo
353.61 93.974 li
349.164 94.642 mo
349.164 93.336 li
353.61 90.134 mo
362.581 90.134 li
358.414 90.756 mo
358.414 89.543 li
362.581 87.087 mo
371.489 87.087 li
367.353 87.74 mo
367.353 86.48 li
371.489 83.278 mo
380.988 83.278 li
376.588 83.962 mo
376.588 82.5779 li
380.988 76.499 mo
392.865 76.499 li
387.486 77.4789 mo
387.486 76.033 li
392.866 68.602 mo
394 68.602 li
0.5947 gry
@
253.163 107.686 mo
286.339 107.686 li
273.886 107.935 mo
273.886 107.453 li
286.339 99.446 mo
309.955 99.446 li
300.285 99.788 mo
300.285 99.166 li
309.955 93.274 mo
326.015 93.274 li
318.987 93.849 mo
318.987 92.761 li
326.015 91.377 mo
336.773 91.377 li
331.845 92.124 mo
331.845 90.771 li
336.773 87.553 mo
345.666 87.553 li
341.53 88.144 mo
341.53 87.087 li
345.666 86.325 mo
354.916 86.325 li
350.625 87.102 mo
350.625 85.6559 li
354.916 83.558 mo
363.544 83.558 li
359.533 84.366 mo
359.533 82.889 li
363.544 80.619 mo
377.241 80.619 li
371.116 80.837 mo
371.116 80.277 li
377.241 78.101 mo
391.886 78.101 li
385.403 78.769 mo
385.403 77.3539 li
391.886 77.463 mo
394 77.463 li
0.5579 gry
@
253.163 82.6559 mo
356.704 82.6559 li
335.856 83.34 mo
335.856 81.987 li
356.704 81.412 mo
369.639 81.412 li
363.824 82.0959 mo
363.824 80.759 li
369.639 80.059 mo
377.148 80.059 li
373.619 80.697 mo
373.619 79.469 li
377.148 79.236 mo
382.791 79.236 li
380.086 79.873 mo
380.086 78.645 li
382.791 78.956 mo
387.409 78.956 li
385.185 79.64 mo
385.185 78.334 li
387.409 78.256 mo
391.529 78.256 li
389.539 78.9399 mo
389.539 77.619 li
391.529 76.095 mo
394 76.095 li
393.643 76.81 mo
393.643 75.318 li
0.521 gry
@
253.217 121.958 mo
253.217 121.984 253.196 122.005 253.17 122.005 cv
253.144 122.005 253.123 121.984 253.123 121.958 cv
253.123 121.932 253.144 121.911 253.17 121.911 cv
253.196 121.911 253.217 121.932 253.217 121.958 cv
0.4841 gry
f
253.163 121.118 mo
264.745 121.118 li
259.117 121.523 mo
259.117 120.73 li
264.745 117.947 mo
273.016 117.947 li
269.145 118.506 mo
269.145 117.434 li
273.016 116.283 mo
279.203 116.283 li
276.25 116.796 mo
276.25 115.599 li
279.203 115.77 mo
284.054 115.77 li
281.722 116.299 mo
281.722 115.226 li
284.054 114.9 mo
288.127 114.9 li
286.153 115.63 mo
286.153 114.122 li
288.127 114.449 mo
291.734 114.449 li
289.977 114.962 mo
289.977 113.594 li
291.734 112.661 mo
294.859 112.661 li
293.335 113.392 mo
293.335 111.977 li
294.859 112.148 mo
297.704 112.148 li
296.305 112.925 mo
296.305 111.402 li
297.704 111.93 mo
300.223 111.93 li
298.979 112.692 mo
298.979 111.215 li
300.223 112.07 mo
302.555 112.07 li
301.404 112.848 mo
301.404 111.34 li
302.555 111.588 mo
304.638 111.588 li
303.612 112.366 mo
303.612 110.842 li
304.638 110.749 mo
306.519 110.749 li
305.602 111.464 mo
305.602 110.065 li
306.519 110.36 mo
308.369 110.36 li
307.467 111.075 mo
307.467 109.691 li
308.369 110.438 mo
310.048 110.438 li
309.224 111.215 mo
309.224 109.707 li
310.048 110.298 mo
311.649 110.298 li
310.857 111.075 mo
310.857 109.552 li
311.649 109.365 mo
313.157 109.365 li
312.411 110.08 mo
312.411 108.23 li
313.157 109.769 mo
314.603 109.769 li
313.888 110.515 mo
313.888 109.054 li
314.603 108.634 mo
315.94 108.634 li
315.287 109.334 mo
315.287 107.437 li
315.94 107.826 mo
317.215 107.826 li
316.578 108.868 mo
316.578 106.878 li
317.215 107.531 mo
318.49 107.531 li
317.853 108.494 mo
317.853 106.567 li
318.49 107.328 mo
319.718 107.328 li
319.112 108.323 mo
319.112 106.365 li
319.718 107.328 mo
320.9 107.328 li
320.325 108.246 mo
320.325 106.365 li
320.9 107.841 mo
322.05 107.841 li
321.475 108.541 mo
321.475 106.924 li
322.05 107.36 mo
323.154 107.36 li
322.61 108.059 mo
322.61 106.442 li
323.154 105.929 mo
324.211 105.929 li
323.683 106.94 mo
323.683 104.981 li
324.211 105.991 mo
325.237 105.991 li
324.74 107.017 mo
324.74 105.027 li
325.237 107.064 mo
326.248 107.064 li
325.75 107.795 mo
325.75 106.022 li
326.248 106.38 mo
327.212 106.38 li
326.73 107.111 mo
326.73 105.37 li
327.212 105.634 mo
328.145 105.634 li
327.678 106.691 mo
327.678 104.67 li
328.145 105.478 mo
329.108 105.478 li
328.626 106.411 mo
328.626 104.53 li
329.108 105.463 mo
330.026 105.463 li
329.575 106.473 mo
329.575 104.499 li
330.026 106.458 mo
330.927 106.458 li
330.477 107.204 mo
330.477 105.743 li
330.927 104.872 mo
331.798 104.872 li
331.363 105.851 mo
331.363 103.893 li
331.798 105.712 mo
332.653 105.712 li
332.233 106.442 mo
332.233 105.307 li
332.653 105.23 mo
333.508 105.23 li
333.088 105.96 mo
333.088 103.97 li
333.508 103.83 mo
334.348 103.83 li
333.928 104.919 mo
333.928 102.82 li
334.348 104.095 mo
335.172 104.095 li
334.767 105.074 mo
334.767 103.146 li
335.172 103.286 mo
335.965 103.286 li
335.576 104.281 mo
335.576 102.338 li
335.965 104.95 mo
336.773 104.95 li
336.369 105.743 mo
336.369 104.048 li
336.773 103.162 mo
337.566 103.162 li
337.177 104.157 mo
337.177 102.245 li
337.566 103.519 mo
338.328 103.519 li
337.954 104.437 mo
337.954 102.525 li
338.328 102.727 mo
339.089 102.727 li
338.701 103.737 mo
338.701 101.794 li
339.089 102.618 mo
339.851 102.618 li
339.463 103.582 mo
339.463 101.685 li
339.851 102.245 mo
340.582 102.245 li
340.224 103.224 mo
340.224 101.343 li
340.582 102.229 mo
341.313 102.229 li
340.955 103.286 mo
340.955 101.25 li
341.313 101.872 mo
342.028 101.872 li
341.67 102.882 mo
341.67 100.923 li
342.028 102.027 mo
342.743 102.027 li
342.385 103.069 mo
342.385 101.001 li
342.743 102.027 mo
343.474 102.027 li
343.116 102.851 mo
343.116 101.063 li
343.474 102.167 mo
344.189 102.167 li
343.831 103.24 mo
343.831 101.094 li
344.189 100.566 mo
344.904 100.566 li
344.546 101.561 mo
344.546 99.6479 li
344.904 100.768 mo
345.619 100.768 li
345.261 101.809 mo
345.261 99.819 li
345.619 100.053 mo
346.334 100.053 li
345.977 100.985 mo
345.977 99.197 li
346.334 100.752 mo
347.034 100.752 li
346.676 101.716 mo
346.676 99.788 li
347.034 99.928 mo
347.702 99.928 li
347.376 100.954 mo
347.376 98.949 li
347.702 100.768 mo
348.402 100.768 li
348.06 101.701 mo
348.06 99.726 li
348.402 99.944 mo
349.07 99.944 li
348.744 100.97 mo
348.744 99.011 li
349.07 99.058 mo
349.754 99.058 li
349.412 100.084 mo
349.412 98.016 li
349.754 98.529 mo
350.423 98.529 li
350.096 99.477 mo
350.096 97.534 li
350.423 99.073 mo
351.091 99.073 li
350.765 100.099 mo
350.765 98.1089 li
351.091 98.358 mo
351.776 98.358 li
351.434 99.322 mo
351.434 97.425 li
351.776 98.56 mo
352.46 98.56 li
352.118 99.6169 mo
352.118 97.5649 li
352.46 97.876 mo
353.097 97.876 li
352.786 98.887 mo
352.786 96.632 li
353.097 98.202 mo
353.781 98.202 li
353.439 99.1819 mo
353.439 97.301 li
353.781 97.0359 mo
354.434 97.0359 li
354.108 97.938 mo
354.108 95.917 li
354.434 97.239 mo
355.103 97.239 li
354.776 98.218 mo
354.776 96.181 li
355.103 95.886 mo
355.771 95.886 li
355.429 97.0519 mo
355.429 94.673 li
355.771 95.839 mo
356.424 95.839 li
356.098 96.803 mo
356.098 94.58 li
356.424 96.586 mo
357.077 96.586 li
356.75 97.612 mo
356.75 95.4659 li
357.077 96.041 mo
357.73 96.041 li
357.403 97.0049 mo
357.403 94.907 li
357.73 96.073 mo
358.383 96.073 li
358.056 97.1299 mo
358.056 94.72 li
358.383 95.948 mo
359.036 95.948 li
358.709 96.959 mo
358.709 94.876 li
359.036 95.389 mo
359.704 95.389 li
359.378 96.352 mo
359.378 94.362 li
359.704 95.699 mo
360.373 95.699 li
360.046 96.726 mo
360.046 94.751 li
360.373 95.4969 mo
361.041 95.4969 li
360.699 96.5229 mo
360.699 94.533 li
361.041 95.839 mo
361.694 95.839 li
361.368 96.928 mo
361.368 94.844 li
361.694 95.342 mo
362.347 95.342 li
362.021 96.446 mo
362.021 94.331 li
362.347 95.0779 mo
363.016 95.0779 li
362.674 96.088 mo
362.674 94.098 li
363.016 94.191 mo
363.669 94.191 li
363.342 95.264 mo
363.342 93.025 li
363.669 94.145 mo
364.337 94.145 li
364.011 95.155 mo
364.011 93.212 li
364.337 93.072 mo
364.99 93.072 li
364.664 94.02 mo
364.664 91.782 li
364.99 94.487 mo
365.643 94.487 li
365.317 95.56 mo
365.317 93.507 li
365.643 94.425 mo
366.312 94.425 li
365.985 95.4659 mo
365.985 93.383 li
366.312 92.839 mo
366.965 92.839 li
366.638 93.865 mo
366.638 91.688 li
366.965 92.652 mo
367.633 92.652 li
367.307 93.663 mo
367.307 91.533 li
367.633 91.486 mo
368.271 91.486 li
367.96 92.543 mo
367.96 90.243 li
368.271 92.046 mo
368.924 92.046 li
368.597 93.041 mo
368.597 90.818 li
368.924 90.4449 mo
369.577 90.4449 li
369.25 91.766 mo
369.25 89.232 li
369.577 92.715 mo
370.245 92.715 li
369.919 93.818 mo
369.919 91.688 li
370.245 92.201 mo
370.898 92.201 li
370.572 93.305 mo
370.572 91.206 li
370.898 89.823 mo
371.551 89.823 li
371.224 91.144 mo
371.224 88.579 li
371.551 92.046 mo
372.235 92.046 li
371.893 93.15 mo
371.893 91.004 li
372.235 91.3 mo
372.919 91.3 li
372.577 92.3719 mo
372.577 90.3199 li
372.919 90.585 mo
373.572 90.585 li
373.246 91.595 mo
373.246 89.356 li
373.572 90.507 mo
374.241 90.507 li
373.914 91.533 mo
373.914 89.963 li
374.241 90.553 mo
374.925 90.553 li
374.583 91.626 mo
374.583 89.574 li
374.925 89.2939 mo
375.624 89.2939 li
375.282 90.336 mo
375.282 87.74 li
375.624 89.201 mo
376.324 89.201 li
375.982 90.243 mo
375.982 87.8019 li
376.324 90.04 mo
377.07 90.04 li
376.697 91.144 mo
376.697 89.014 li
377.07 88.486 mo
377.816 88.486 li
377.443 89.543 mo
377.443 86.993 li
377.816 88.797 mo
378.594 88.797 li
378.205 89.963 mo
378.205 87.6769 li
@
378.594 88.797 mo
379.387 88.797 li
378.982 89.994 mo
378.982 87.6769 li
379.386 87.351 mo
380.179 87.351 li
379.791 88.424 mo
379.791 86.123 li
380.179 86.34 mo
380.972 86.34 li
380.584 87.693 mo
380.584 84.863 li
380.972 87.3199 mo
381.796 87.3199 li
381.392 88.564 mo
381.392 86.2 li
381.796 85.905 mo
382.605 85.905 li
382.2 86.993 mo
382.2 84.459 li
382.605 85.858 mo
383.398 85.858 li
383.009 86.978 mo
383.009 84.366 li
383.398 86.869 mo
384.222 86.869 li
383.817 87.926 mo
383.817 85.718 li
384.222 84.5519 mo
385.061 84.5519 li
384.641 85.625 mo
384.641 82.889 li
385.061 86.076 mo
385.901 86.076 li
385.481 87.2419 mo
385.481 84.957 li
385.901 85.579 mo
386.771 85.579 li
386.336 86.7289 mo
386.336 84.459 li
386.771 83.2469 mo
387.704 83.2469 li
387.253 84.335 mo
387.253 81.847 li
387.704 83.153 mo
388.683 83.153 li
388.201 84.335 mo
388.201 82.0179 li
388.683 86.745 mo
389.787 86.745 li
389.243 87.662 mo
389.243 85.454 li
389.787 84.6299 mo
391.015 84.6299 li
390.409 85.827 mo
390.409 83.48 li
391.015 85.345 mo
392.337 85.345 li
391.684 86.325 mo
391.684 84.2729 li
392.337 82.749 mo
393.783 82.749 li
393.068 83.993 mo
393.068 81.599 li
393.783 83.495 mo
394 83.495 li
@
253.163 107.95 mo
289.573 107.95 li
276.312 108.572 mo
276.312 107.375 li
289.573 109.163 mo
299.461 109.163 li
294.89 109.8 mo
294.89 108.572 li
299.461 108.759 mo
305.913 108.759 li
302.85 109.396 mo
302.85 108.184 li
305.913 105.82 mo
311.945 105.82 li
309.069 106.209 mo
309.069 105.478 li
311.945 104.001 mo
317.262 104.001 li
314.712 104.343 mo
314.712 103.582 li
317.262 101.607 mo
322.268 101.607 li
319.858 102.074 mo
319.858 101.156 li
322.268 100.426 mo
327.305 100.426 li
324.88 100.908 mo
324.88 99.959 li
327.305 97.705 mo
332.28 97.705 li
329.886 98.202 mo
329.886 97.239 li
332.28 95.917 mo
336.913 95.917 li
334.69 96.384 mo
334.69 95.4969 li
336.913 94.9839 mo
341.157 94.9839 li
339.105 95.4659 mo
339.105 94.533 li
341.157 94.58 mo
344.982 94.58 li
343.132 95.093 mo
343.132 94.114 li
344.982 92.994 mo
348.557 92.994 li
346.816 93.476 mo
346.816 92.357 li
348.557 92.124 mo
352.024 92.124 li
350.345 92.621 mo
350.345 91.58 li
352.024 92.03 mo
355.196 92.03 li
353.657 92.575 mo
353.657 91.517 li
355.196 91.004 mo
358.181 91.004 li
356.719 91.517 mo
356.719 90.46 li
358.181 90.134 mo
361.228 90.134 li
359.751 90.678 mo
359.751 89.636 li
361.228 77.4789 mo
364.415 77.4789 li
362.86 77.961 mo
362.86 76.826 li
364.415 80.355 mo
367.509 80.355 li
366.001 80.915 mo
366.001 79.5779 li
367.509 80.293 mo
370.587 80.293 li
369.095 80.868 mo
369.095 79.5309 li
370.587 80.059 mo
373.619 80.059 li
372.142 80.619 mo
372.142 79.344 li
373.619 80.837 mo
376.697 80.837 li
375.204 81.49 mo
375.204 80.215 li
376.697 82.189 mo
380.397 82.189 li
378.594 82.858 mo
378.594 81.5829 li
380.397 82.516 mo
385.154 82.516 li
382.853 83.215 mo
382.853 81.847 li
385.154 81.863 mo
392.757 81.863 li
389.181 82.547 mo
389.181 81.225 li
392.757 71.8199 mo
394 71.8199 li
0.4473 gry
@
253.163 112.77 mo
297.036 112.77 li
282.126 113.734 mo
282.126 111.915 li
297.036 108.976 mo
311.401 108.976 li
305.027 109.987 mo
305.027 107.95 li
311.401 105.463 mo
320.76 105.463 li
316.422 106.365 mo
316.422 104.701 li
320.76 105.572 mo
327.771 105.572 li
324.46 106.613 mo
324.46 104.623 li
327.771 102.151 mo
334.192 102.151 li
331.145 103.162 mo
331.145 101.032 li
334.192 99.12 mo
340.318 99.12 li
337.41 100.239 mo
337.41 98.125 li
340.318 96.461 mo
346.785 96.461 li
343.722 97.581 mo
343.722 95.4659 li
346.785 93.71 mo
353.19 93.71 li
350.143 94.813 mo
350.143 92.528 li
353.19 91.486 mo
360.015 91.486 li
356.782 92.652 mo
356.782 90.3979 li
360.015 75.1 mo
367.804 75.1 li
364.151 76.561 mo
364.151 73.685 li
367.804 77.976 mo
375.624 77.976 li
371.955 79.236 mo
371.955 76.624 li
375.624 77.805 mo
383.46 77.805 li
379.775 78.909 mo
379.775 76.67 li
383.46 74.478 mo
392.088 74.478 li
388.062 75.504 mo
388.062 73.126 li
392.088 71.866 mo
394 71.866 li
0.4104 gry
@
253.163 106.194 mo
296.336 106.194 li
281.567 106.784 mo
281.567 105.649 li
296.336 104.406 mo
308.991 104.406 li
303.285 104.934 mo
303.285 103.924 li
308.991 102.167 mo
317.728 102.167 li
313.655 102.727 mo
313.655 101.716 li
317.728 100.721 mo
324.615 100.721 li
321.351 101.187 mo
321.351 100.301 li
324.615 99.244 mo
330.243 99.244 li
327.554 99.477 mo
327.554 98.7469 li
330.243 98.202 mo
335.343 98.202 li
332.886 98.684 mo
332.886 97.5649 li
335.343 96.306 mo
339.96 96.306 li
337.737 96.912 mo
337.737 95.699 li
339.96 94.425 mo
344.298 94.425 li
342.214 95.046 mo
342.214 93.912 li
344.298 92.9789 mo
348.371 92.9789 li
346.396 93.554 mo
346.396 92.4969 li
348.371 92.901 mo
352.18 92.901 li
350.33 93.585 mo
350.33 92.3719 li
352.18 91.72 mo
355.833 91.72 li
354.061 92.3409 mo
354.061 91.191 li
355.833 91.3 mo
359.362 91.3 li
357.637 91.999 mo
357.637 90.693 li
359.362 89.636 mo
362.689 89.636 li
361.072 90.212 mo
361.072 89.077 li
362.689 88.8589 mo
365.892 88.8589 li
364.337 89.434 mo
364.337 88.299 li
365.892 87.289 mo
369.048 87.289 li
367.509 87.693 mo
367.509 86.558 li
369.048 86.092 mo
372.701 86.092 li
370.929 86.947 mo
370.929 85.252 li
372.701 84.475 mo
376.495 84.475 li
374.645 85.283 mo
374.645 83.713 li
376.495 83.589 mo
380.568 83.589 li
378.594 84.475 mo
378.594 82.6089 li
380.568 81.474 mo
384.735 81.474 li
382.714 82.469 mo
382.714 80.495 li
384.735 78.8 mo
388.901 78.8 li
386.88 80.588 mo
386.88 78.038 li
388.901 80.883 mo
393.441 80.883 li
391.249 81.987 mo
391.249 79.811 li
393.441 79.22 mo
394 79.22 li
0.3735 gry
@
253.163 97.1609 mo
319.811 97.1609 li
301.451 97.301 mo
301.451 97.0049 li
319.811 101.265 mo
329.015 101.265 li
324.755 101.436 mo
324.755 101.11 li
329.015 99.12 mo
335.327 99.12 li
332.327 99.275 mo
332.327 98.964 li
335.327 96.959 mo
341.25 96.959 li
338.421 97.099 mo
338.421 96.803 li
341.25 94.611 mo
347.78 94.611 li
344.686 94.767 mo
344.686 94.456 li
347.78 94.02 mo
353.595 94.02 li
350.812 94.176 mo
350.812 93.865 li
353.594 91.968 mo
358.336 91.968 li
356.066 92.124 mo
356.066 91.813 li
358.336 92.03 mo
362.487 92.03 li
360.482 92.17 mo
360.482 91.875 li
362.487 90.973 mo
366.327 90.973 li
364.462 91.113 mo
364.462 90.818 li
366.327 89.2939 mo
370.261 89.2939 li
368.348 89.45 mo
368.348 89.123 li
370.261 87.009 mo
374.38 87.009 li
372.391 87.164 mo
372.391 86.869 li
374.38 84.832 mo
379.044 84.832 li
376.79 84.972 mo
376.79 84.7079 li
379.044 81.692 mo
383.802 81.692 li
381.501 81.816 mo
381.501 81.568 li
383.802 80.666 mo
388.512 80.666 li
386.243 80.79 mo
386.243 80.541 li
388.512 78.878 mo
393.114 78.878 li
390.891 79.002 mo
390.891 78.738 li
393.114 78.163 mo
394 78.163 li
0.3367 gry
@
253.163 105.121 mo
280.96 105.121 li
270 105.307 mo
270 104.934 li
280.96 105.401 mo
294.983 105.401 li
288.734 105.587 mo
288.734 105.214 li
294.983 101.903 mo
304.063 101.903 li
299.849 102.074 mo
299.849 101.732 li
304.063 102.4 mo
311.634 102.4 li
308.074 102.587 mo
308.074 102.214 li
311.634 100.55 mo
318.335 100.55 li
315.163 100.721 mo
315.163 100.379 li
318.335 97.938 mo
325.128 97.938 li
321.91 98.14 mo
321.91 97.752 li
325.128 94.751 mo
331.798 94.751 li
328.642 94.938 mo
328.642 94.58 li
331.798 78.225 mo
339.385 78.225 li
335.825 78.365 mo
335.825 78.085 li
339.385 81.163 mo
347.625 81.163 li
343.769 81.459 mo
343.769 80.899 li
347.625 81.91 mo
364.788 81.91 li
357.341 82.158 mo
357.341 81.692 li
364.788 71.913 mo
390.518 71.913 li
380.195 72.519 mo
380.195 71.2599 li
0.2998 gry
@
253.163 93.647 mo
325.144 93.647 li
306.239 94.502 mo
306.239 92.543 li
325.144 92.668 mo
337.892 92.668 li
332.156 93.538 mo
332.156 91.673 li
337.892 91.238 mo
345.697 91.238 li
342.028 92.3409 mo
342.028 90.087 li
345.697 90.8799 mo
351.947 90.8799 li
348.977 91.782 mo
348.977 89.698 li
351.947 90.491 mo
357.155 90.491 li
354.652 91.455 mo
354.652 89.574 li
357.155 86.62 mo
361.648 86.62 li
359.487 87.74 mo
359.487 85.283 li
361.648 86.123 mo
365.83 86.123 li
363.809 87.3199 mo
363.809 85.05 li
365.83 71.991 mo
369.934 71.991 li
367.944 73.172 mo
367.944 70.763 li
369.934 76.437 mo
373.743 76.437 li
371.893 77.65 mo
371.893 75.147 li
373.743 76.577 mo
377.039 76.577 li
375.438 77.93 mo
375.438 75.007 li
377.039 78.085 mo
380.521 78.085 li
378.827 79.329 mo
378.827 76.9189 li
380.521 80.666 mo
384.051 80.666 li
382.325 81.77 mo
382.325 79.562 li
384.051 82.5 mo
388.435 82.5 li
386.32 83.542 mo
386.32 81.5519 li
388.435 80.402 mo
394 80.402 li
391.684 81.5359 mo
391.684 79.0179 li
0.2811 gry
@
253.163 90.289 mo
328.626 90.289 li
309.395 91.486 mo
309.395 89.03 li
328.626 90.9109 mo
339.214 90.9109 li
334.348 92.015 mo
334.348 89.636 li
339.214 91.004 mo
345.666 91.004 li
342.603 91.9529 mo
342.603 89.652 li
345.666 90.631 mo
350.33 90.631 li
348.091 91.642 mo
348.091 89.388 li
350.33 90.149 mo
354.076 90.149 li
352.257 91.3 mo
352.257 88.937 li
354.076 89.916 mo
357.186 89.916 li
355.678 91.082 mo
355.678 88.688 li
357.186 90.305 mo
359.969 90.305 li
358.601 91.3149 mo
358.601 89.03 li
359.969 88.237 mo
362.441 88.237 li
361.228 89.481 mo
361.228 86.636 li
362.441 89.185 mo
364.695 89.185 li
363.576 90.383 mo
363.576 87.895 li
364.695 89.636 mo
366.794 89.636 li
365.752 90.616 mo
365.752 88.1899 li
366.794 88.735 mo
368.799 88.735 li
367.804 89.745 mo
367.804 87.506 li
368.799 87.7859 mo
370.68 87.7859 li
369.748 88.937 mo
369.748 86.636 li
370.68 88.735 mo
372.515 88.735 li
371.613 89.698 mo
371.613 87.584 li
372.515 87.366 mo
374.287 87.366 li
373.417 88.548 mo
373.417 86.138 li
374.287 86.232 mo
376.044 86.232 li
375.173 87.444 mo
375.173 85.1429 li
376.044 86.2 mo
377.77 86.2 li
376.915 87.46 mo
376.915 85.081 li
377.77 84.1949 mo
379.511 84.1949 li
378.656 85.439 mo
378.656 82.36 li
379.511 85.485 mo
381.33 85.485 li
380.428 86.574 mo
380.428 84.226 li
381.33 84.226 mo
383.118 84.226 li
382.232 85.454 mo
382.232 83.0439 li
383.118 83.2469 mo
384.797 83.2469 li
383.973 84.444 mo
383.973 81.847 li
384.797 82.438 mo
386.491 82.438 li
385.652 83.542 mo
385.652 80.977 li
386.491 81.847 mo
388.186 81.847 li
387.346 82.967 mo
387.346 80.075 li
388.186 81.568 mo
389.834 81.568 li
389.025 82.718 mo
389.025 79.873 li
389.834 79.36 mo
391.606 79.36 li
390.736 80.899 mo
390.736 77.8669 li
391.606 79.4529 mo
393.534 79.4529 li
392.586 80.93 mo
392.586 77.852 li
393.534 79.344 mo
394 79.344 li
0.2623 gry
@
253.163 92.777 mo
331.627 92.777 li
312.163 93.772 mo
312.163 91.751 li
331.627 91.626 mo
344.111 91.626 li
338.468 92.543 mo
338.468 90.678 li
344.111 89.3719 mo
351.947 89.3719 li
348.262 90.616 mo
348.262 88.159 li
351.947 90.491 mo
357.979 90.491 li
355.103 91.517 mo
355.103 89.4189 li
357.979 89.434 mo
363.047 89.434 li
360.606 90.4449 mo
360.606 88.299 li
363.047 86.263 mo
367.82 86.263 li
365.519 87.475 mo
365.519 85.081 li
367.82 87.569 mo
372.732 87.569 li
370.369 88.688 mo
370.369 86.511 li
372.732 84.91 mo
377.661 84.91 li
375.282 85.936 mo
375.282 83.48 li
377.661 84.459 mo
382.48 84.459 li
380.148 85.579 mo
380.148 83.433 li
382.48 82.112 mo
387.331 82.112 li
384.983 83.231 mo
384.983 80.883 li
387.331 82.594 mo
392.259 82.594 li
389.896 83.449 mo
389.896 81.381 li
392.259 78.738 mo
394 78.738 li
0.2436 gry
@
253.163 107.888 mo
309.613 107.888 li
292.543 108.355 mo
292.543 107.437 li
309.613 105.603 mo
323.605 105.603 li
317.371 106.054 mo
317.371 105.183 li
323.605 103.473 mo
333.29 103.473 li
328.813 103.893 mo
328.813 102.96 li
333.29 99.819 mo
341.375 99.819 li
337.581 100.426 mo
337.581 99.244 li
341.375 95.948 mo
349.288 95.948 li
345.572 96.663 mo
345.572 95.155 li
349.288 92.435 mo
357.761 92.435 li
353.812 93.181 mo
353.812 91.673 li
357.761 88.719 mo
366.094 88.719 li
362.192 89.45 mo
362.192 88.019 li
366.094 86.123 mo
375.127 86.123 li
370.929 86.9 mo
370.929 85.376 li
375.127 82.0179 mo
386.103 82.0179 li
381.081 82.733 mo
381.081 81.319 li
386.103 78.007 mo
394 78.007 li
391.731 78.909 mo
391.731 77.168 li
0.2249 gry
@
253.163 91.891 mo
316.422 91.891 li
298.45 92.652 mo
298.45 90.9579 li
316.422 91.533 mo
327.398 91.533 li
322.377 92.357 mo
322.377 90.491 li
327.398 92.59 mo
333.804 92.59 li
330.756 93.414 mo
330.756 91.813 li
333.804 92.3409 mo
338.436 92.3409 li
336.213 93.134 mo
336.213 91.564 li
338.436 91.9839 mo
342.121 91.9839 li
340.333 92.792 mo
340.333 91.051 li
342.121 91.922 mo
345.324 91.922 li
343.769 92.73 mo
343.769 91.129 li
345.324 91.035 mo
348.122 91.035 li
346.754 91.782 mo
346.754 90.103 li
348.122 91.766 mo
350.563 91.766 li
349.366 92.559 mo
349.366 91.004 li
350.563 92.3719 mo
352.662 92.3719 li
351.636 93.228 mo
351.636 91.564 li
352.662 91.626 mo
354.574 91.626 li
353.641 92.4189 mo
353.641 90.864 li
354.574 91.797 mo
356.346 91.797 li
355.476 92.606 mo
355.476 91.051 li
356.346 91.533 mo
358.041 91.533 li
357.201 92.388 mo
357.201 90.74 li
358.041 90.9269 mo
359.58 90.9269 li
358.818 91.72 mo
358.818 90.165 li
359.58 90.258 mo
361.072 90.258 li
360.342 91.051 mo
360.342 89.4189 li
361.072 91.611 mo
362.456 91.611 li
361.772 92.4189 mo
361.772 90.787 li
362.456 89.745 mo
363.762 89.745 li
363.109 90.522 mo
363.109 88.843 li
363.762 89.823 mo
364.99 89.823 li
364.384 90.631 mo
364.384 88.952 li
364.99 90.693 mo
366.172 90.693 li
365.597 91.548 mo
365.597 89.869 li
366.172 88.455 mo
367.291 88.455 li
366.731 89.3719 mo
366.731 87.444 li
367.291 89.481 mo
368.379 89.481 li
367.835 90.289 mo
367.835 88.719 li
368.379 88.937 mo
369.452 88.937 li
368.924 89.73 mo
368.924 88.019 li
369.452 88.968 mo
370.447 88.968 li
369.95 89.761 mo
369.95 88.128 li
370.447 89.4189 mo
371.442 89.4189 li
370.945 90.258 mo
370.945 88.626 li
371.442 89.31 mo
372.406 89.31 li
371.924 90.18 mo
371.924 88.501 li
372.406 89.45 mo
373.385 89.45 li
372.904 90.227 mo
372.904 88.641 li
373.385 88.579 mo
374.38 88.579 li
373.883 89.465 mo
373.883 87.7549 li
374.38 87.227 mo
375.391 87.227 li
374.893 88.066 mo
374.893 86.2 li
375.391 88.035 mo
376.355 88.035 li
375.873 88.874 mo
375.873 87.227 li
376.355 87.879 mo
377.272 87.879 li
376.806 88.735 mo
376.806 87.087 li
377.272 87.646 mo
378.158 87.646 li
377.723 88.486 mo
377.723 86.853 li
378.158 87.46 mo
379.044 87.46 li
378.609 88.3459 mo
378.609 86.62 li
379.044 87.04 mo
379.9 87.04 li
379.48 87.926 mo
379.48 86.2 li
379.9 87.646 mo
380.77 87.646 li
380.35 88.532 mo
380.35 86.7599 li
0.2061 gry
@
253.163 91.9529 mo
287.101 91.9529 li
274.462 92.093 mo
274.462 91.797 li
287.101 81.91 mo
307.017 81.91 li
298.59 82.0179 mo
298.59 81.816 li
307.017 78.52 mo
319.267 78.52 li
313.733 78.816 mo
313.733 78.241 li
319.267 76.499 mo
328.766 76.499 li
324.367 76.81 mo
324.367 76.219 li
328.766 71.54 mo
345.246 71.54 li
338.048 71.866 mo
338.048 71.244 li
345.246 73.81 mo
355.18 73.81 li
350.594 74.09 mo
350.594 73.561 li
355.18 89.31 mo
357.108 89.31 li
356.16 89.512 mo
356.16 89.123 li
357.108 86.356 mo
361.446 86.356 li
359.347 86.636 mo
359.347 86.076 li
361.446 72.644 mo
365.861 72.644 li
363.731 73.219 mo
363.731 72.193 li
0.1874 gry
@
253.217 120.833 mo
253.217 120.859 253.196 120.88 253.17 120.88 cv
253.144 120.88 253.123 120.859 253.123 120.833 cv
253.123 120.807 253.144 120.786 253.17 120.786 cv
253.196 120.786 253.217 120.807 253.217 120.833 cv
0.8007 gry
f
253.163 125.813 mo
254.095 125.813 li
254.096 125.409 mo
257.578 125.409 li
255.883 125.627 mo
255.883 125.207 li
257.578 124.337 mo
260.734 124.337 li
259.195 124.508 mo
259.195 124.165 li
260.734 123.792 mo
263.517 123.792 li
262.149 123.963 mo
262.149 123.637 li
263.517 123.59 mo
266.02 123.59 li
264.792 123.761 mo
264.792 123.435 li
266.02 121.118 mo
268.336 121.118 li
267.201 121.491 mo
267.201 120.792 li
268.336 123.824 mo
270.559 123.824 li
269.471 124.119 mo
269.471 123.575 li
270.559 124.943 mo
272.627 124.943 li
271.601 125.207 mo
271.601 124.694 li
272.627 125.285 mo
274.571 125.285 li
273.607 125.565 mo
273.607 125.036 li
274.571 124.072 mo
276.358 124.072 li
275.472 124.321 mo
275.472 123.839 li
276.358 128.41 mo
278.053 128.41 li
277.213 128.674 mo
277.213 128.177 li
278.053 118.227 mo
279.608 118.227 li
278.846 118.475 mo
278.846 118.009 li
279.608 118.646 mo
281.022 118.646 li
280.323 118.926 mo
280.323 118.398 li
281.022 118.569 mo
282.328 118.569 li
281.675 118.849 mo
281.675 118.32 li
282.328 118.429 mo
283.572 118.429 li
282.95 118.693 mo
282.95 118.18 li
283.572 119.16 mo
284.754 119.16 li
284.163 119.501 mo
284.163 118.864 li
284.754 118.304 mo
285.92 118.304 li
285.329 118.615 mo
285.329 118.025 li
285.92 116.874 mo
287.07 116.874 li
286.495 117.107 mo
286.495 116.672 li
287.07 116.703 mo
288.221 116.703 li
287.645 116.921 mo
287.645 116.501 li
288.221 116.159 mo
289.371 116.159 li
288.796 116.361 mo
288.796 115.972 li
289.371 113.889 mo
290.506 113.889 li
289.931 114.309 mo
289.931 113.516 li
290.506 113.5 mo
291.625 113.5 li
291.066 113.905 mo
291.066 113.143 li
291.625 113.578 mo
292.714 113.578 li
292.169 113.998 mo
292.169 113.205 li
292.714 112.676 mo
293.786 112.676 li
293.258 113.05 mo
293.258 112.334 li
293.786 112.583 mo
294.828 112.583 li
294.315 112.956 mo
294.315 112.257 li
294.828 111.386 mo
295.87 111.386 li
295.357 111.697 mo
295.357 111.106 li
295.87 111.153 mo
296.865 111.153 li
296.367 111.464 mo
296.367 110.889 li
296.865 110.811 mo
297.891 110.811 li
297.393 111.106 mo
297.393 110.531 li
297.891 110.36 mo
298.886 110.36 li
298.388 110.64 mo
298.388 110.111 li
298.886 108.215 mo
299.896 108.215 li
299.383 108.697 mo
299.383 107.779 li
299.896 109.738 mo
300.86 109.738 li
300.378 110.002 mo
300.378 108.899 li
300.86 108.012 mo
301.839 108.012 li
301.358 108.51 mo
301.358 107.577 li
301.839 106.924 mo
302.788 106.924 li
302.321 107.36 mo
302.321 106.536 li
302.788 107.204 mo
303.721 107.204 li
303.27 107.655 mo
303.27 106.8 li
303.721 106.769 mo
304.638 106.769 li
304.187 107.22 mo
304.187 106.38 li
304.638 107.064 mo
305.54 107.064 li
305.089 107.546 mo
305.089 106.629 li
305.54 106.442 mo
306.426 106.442 li
305.99 106.893 mo
305.99 106.038 li
306.426 106.411 mo
307.312 106.411 li
306.877 106.846 mo
306.877 106.022 li
307.312 106.442 mo
308.183 106.442 li
307.747 106.909 mo
307.747 106.007 li
308.183 105.743 mo
309.053 105.743 li
308.618 106.178 mo
308.618 105.338 li
309.053 105.494 mo
309.908 105.494 li
309.488 105.945 mo
309.488 105.09 li
309.908 104.639 mo
310.732 104.639 li
310.328 105.012 mo
310.328 104.188 li
310.732 104.841 mo
311.572 104.841 li
311.167 105.23 mo
311.167 104.483 li
311.572 104.639 mo
312.411 104.639 li
311.991 105.074 mo
311.991 104.25 li
312.411 104.235 mo
313.235 104.235 li
312.831 104.639 mo
312.831 103.628 li
313.235 103.38 mo
314.028 103.38 li
313.639 103.908 mo
313.639 102.835 li
314.028 103.955 mo
314.805 103.955 li
314.417 104.375 mo
314.417 103.582 li
314.805 102.82 mo
315.598 102.82 li
315.21 103.442 mo
315.21 102.26 li
315.598 102.851 mo
316.345 102.851 li
315.971 103.488 mo
315.971 102.322 li
316.345 103.131 mo
317.075 103.131 li
316.718 103.753 mo
316.718 102.556 li
317.075 102.245 mo
317.806 102.245 li
317.448 102.835 mo
317.448 101.701 li
317.806 102.074 mo
318.521 102.074 li
318.164 102.664 mo
318.164 101.53 li
318.521 101.778 mo
319.221 101.778 li
318.863 102.4 mo
318.863 101.234 li
319.221 101.483 mo
319.92 101.483 li
319.563 102.058 mo
319.563 100.97 li
319.92 101.685 mo
320.589 101.685 li
320.262 102.291 mo
320.262 101.141 li
320.589 100.97 mo
321.257 100.97 li
320.931 101.545 mo
320.931 100.457 li
321.257 101.452 mo
321.91 101.452 li
321.584 102.043 mo
321.584 100.908 li
322.563 102.509 mo
323.201 102.509 li
322.89 102.944 mo
322.89 101.856 li
323.201 101.001 mo
323.838 101.001 li
323.527 101.576 mo
323.527 100.488 li
323.838 101.016 mo
324.46 101.016 li
324.149 101.685 mo
324.149 100.441 li
324.46 100.115 mo
325.082 100.115 li
324.771 100.706 mo
324.771 99.602 li
325.082 100.519 mo
325.688 100.519 li
325.393 101.11 mo
325.393 99.99 li
325.688 100.535 mo
326.294 100.535 li
325.999 101.156 mo
325.999 99.959 li
@
253.163 90.818 mo
327.756 90.818 li
308.602 91.58 mo
308.602 89.776 li
327.756 91.331 mo
339.463 91.331 li
334.146 92.17 mo
334.146 90.538 li
339.463 90.491 mo
346.474 90.491 li
343.163 91.3 mo
343.163 89.496 li
346.474 90.989 mo
351.636 90.989 li
349.164 91.8279 mo
349.164 90.196 li
351.636 89.698 mo
355.724 89.698 li
353.75 90.476 mo
353.75 88.595 li
355.724 90.134 mo
359.16 90.134 li
357.481 90.9579 mo
357.481 89.3409 li
359.16 90.631 mo
362.207 90.631 li
360.715 91.517 mo
360.715 89.792 li
362.207 89.123 mo
364.928 89.123 li
363.591 89.9319 mo
363.591 88.2679 li
364.928 88.501 mo
367.493 88.501 li
366.234 89.325 mo
366.234 87.569 li
367.493 88.532 mo
370.027 88.532 li
368.784 89.356 mo
368.784 87.7549 li
370.027 87.879 mo
372.593 87.879 li
371.333 88.657 mo
371.333 87.164 li
372.593 87.646 mo
375.282 87.646 li
373.961 88.486 mo
373.961 86.838 li
375.282 94.191 mo
378.889 94.191 li
377.132 95 mo
377.132 93.414 li
378.889 92.264 mo
384.377 92.264 li
381.75 93.088 mo
381.75 91.378 li
0.1499 gry
@
grestore
true set_gvm
%ADOBeginSubsetFont: JHZAAA+CMBX9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JHZAAA+CMBX9 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (CMBX9) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 49 /one put
dup 70 /F put
dup 103 /g put
dup 105 /i put
def
/FontBBox {-58 -250 1195 750} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 -0 686 698 444 453 656 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [49] def
/StdVW [117] def
/StemSnapH [40 49] def
/StemSnapV [117 145] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
6 dict dup begin
/period <1C60D8A8C9B08A95104D8565ABCACF8311E6F5F471E105A414DD2F8
37EC1CC406067999CC061B309089840B84988B108> |-
/one <1C60D8A8C9B08A95FB066076D5BF1527DE3E613594B6374299A6A01C6C
7ED8588753F16E033A417D961D9EC1DEA70F4986112691F8B19B4CF8500970DF
E83B051C607A206F5F894B8386951F73F763F5B676875F964B1458BF47CF0C53
D255795436> |-
/F <1C60D8A8C9B08A946C50526646F9C5DFA7B47CF64B01DC5A890E71DCEC23
C8E0BC092B42F9E5347072312E3E7DC31E89398E4F21D345AD2E6308C184D1B7
FDC3FFDCD69241F1D1C43BAB75111047623A0F42F7446F459D40C4B41B590DE6
B4EADC5EB35B0CDA124E80E5BCA775400F0ECC2CA07426938E> |-
/g <1C60D8A8C9B08A95FB066076D5BF6540FB349E601F6889867401A8338E03
5CD1D7D55AAD658BD07ADD0920C300008C9ECECCEB0424D3970E602891DCE5C3
D2AD26478C3BC2219B3E59606C63D3FBAE9EEA90D950441B0A31E20E8FB6EF52
946F6A458B929F4446CF3594B1FA74BD01EF569D8FEA0757084A0B87E7A94528
B2BCE7547EEEEC22F1B2EBA51748CC33787C90AE3577E2DA71B01D26E7585271
29FE538A5073E29727C22438B365F7C12D1201A9956028BBA4E9B7D6E42E5DED
6F4BB9776749E4382B367D46D3BEEF722A3646FABF72600D8657ED7CAA7896B7
01F6F573F4F744F061B49F15725B73A2B9> |-
/i <1C60D8A8C9B08A95104D8565ABCACFC8C2C729CFD92A27BC2F1B92176437
CEE8E8DFF0716AF0B25E2A77CC3F77866D20FF71A07B7C6374BB91294FD42178
188E1D87C82F4F607A14A2FC593A9B84E2960D67A22DFFACE77364D6704639AA
DC03380E6C> |-
/.notdef <1C60D8A8C9B08A9586D4F7B21AA93E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWHX+CMBX9 /JHZAAA+CMBX9 findfont ct_VMDictPut
/BDXWHX+CMBX9*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one 20{/.notdef}rp /F 32{/.notdef}rp /g 
/.notdef /i 150{/.notdef}rp]
BDXWHX+CMBX9 nf
BDXWHX+CMBX9*1 [8.9664 0 0 -8.9664 0 0 ]msf
54.6 164.633 mo
(Fig.1.)
[6.72304 3.0028 5.28296 7.80251 5.28297 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: WFRBAA+CMTI9 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
BDXWHV+CMTI9 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B08A946AEF5105235AA192DE5248A93FAFE389F4D7A979EB1E
DA2C7D46BE77A24B72CCDC667F0BE45505B6DA4A7773CDE3C0BCE4AC464F8E17
93FADD3D3BCF54D3E350BA78DEBA4FDD6BC38721616B3DCE2FCB41948F285647
A446063906A2062E9FECC2F06E38BACD3D3284B9213D0A1C758DAB3FD237B563
830FE7203F2D007FE29D5D9570D422ED87DCE30E5BF26801F98364DCD9C9C773
2B201DE76B6F9841B642E5239FCF349956E642567DE3FCC7DE05E7D034878778
F088D9AC3EA9B9B405FD4C6438E1808182CCEEE0F96A294D42DD3F705D1F12C2
7998991E7C322FDA0309102DF6A7C29C551AB8E7BA62401ECF1D10530689B519
AF99699509996851060ABCF3D398A566F4AD1C58122E757D8143BA6E> |-
/e <1C60D8A8C9B08A95A487F5C1974CBDC1B48E32D85D83EA188E9C07F08309
E49C6279120911516EB2C182EBB81166C3BB9821F800022BCC6C60587847EF76
9183E26D0D392A76135614B3BA4D99A1BE8A321415EE93C7476F3AC1393F796D
AFFA733D1958360A26CA91B979FF536EDFA4CD220990A3A290C892C68934ED8A
18D862C813B11360E0> |-
/f <1C60D8A8C9B08A95660B57EBF2795D214AB7FE4E1CFD4E93946BD33EA1B0
3061BE40C499759738EB18A79DFF7D8C93B13C33A21E09AA457BD139D1E9ED72
FF3405FFC20FF347D1ACD6EB85F54C4A97B4557B54329FB0BDEE35F85B2734D4
107F0528271E1D62E639E7AD8E2BEBD76115D2D2C77E1609E9A6DA7C386BCB81
854320A680EF69A57B25744B04EC9DD64739EB1345685F17CA187A8509546E15
58602774559EC912B6804F6E8798E32193B4C189E0AE95FE8C58C504FD936C70
345DB0> |-
/g <1C60D8A8C9B08A95A487F5C1974CC6C68FC8EDA56D0CDC99E973CA97E159
34B453CD603A77CC69A13779320189620322EEE4E5EDA512CA4C5291C14D3DD6
9FD1C51DBD61012552CA77939DCB67F81ED317065ABE2C4FC278B0C1468BFAEC
9A86EE3E95FB382EC94A892D3839CDF62F1AC246A86C51A4224A524BEA4EF546
F685A9501ACD6F6A40FAA9A97835A517EF6456BF4A4FDCA40F173E5B6E7114C7
3ADEB296A0D2569DA112A909FE71CBCCBE68479BE37498> |-
/h <1C60D8A8C9B08A9508597FE513BCCFF2D61DCA26D83265F0D239CB1E5D71
1CF37DCF10649D52B83B14D943611EB74711076B9E2F89A49FA019CD47C0B876
142B8AF69AA3186FE9540195E98C10E3436D98A35BDCE51AD21D70216E4E3CC4
060ADA3FA35A6E8F7AA8D81AEB330CAB9B28F9C1E6517929D48E5DA699CF48FA
A1A53A1D2C833B04010EE9FF5E1F67C84C1DF83FB6851447224B483F5AB5C564
A87423AEAF688BE7D014B3BCF7BD263AB2EB0F4E4950944FF8628A36C97B51DD
E1B5E599C0F97B1BC1CA54A35CC4310F8944A3A2713FFD7746> |-
/i <1C60D8A8C9B08A95660B57EBF27926432D33EF19FDF019CDA2CA14ADF742
BA56624CD4E2D3468C7094DC42BA93DA841F29E2E9CB3FE67B0F4024F059AA84
0AFB52A2DFA4CA1E02E43858A7550A36430AF3F1892293C385148D48418B8647
4FBEBF2D2994980EF2E4891965223EFFEBFC71F28C715C5660871110AA8E5F01
FC2DAFAA3BBDD99BE59D3D8D37F9FBC0089E2A415F713F1845932D3653F25966
3F596F3A35F1D1A5FB2A3F3651DA28276250495E26535ADD0006F5EEB8E47A3A
D6> |-
/t <1C60D8A8C9B08A95992BA7C21A41414BAAA8A67D820A494DBC49F48FE9ED
3623F217E51AB5973FFB5E67A15CBF91BF52F7D6DC3A00ECBA0FD506EE96B56E
9AE084A70850ADF2DF5304DD3DD014D5664E63E1B0EF53DFA8B9D4671DD69168
FE587E048C5AFFBADB6F1BE20D47B0D21B3581B26EA0FD93EACA36EDAE260D01
95EDBB67E4CB0EB1A604B2A5C09BD458D4B8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHV+CMTI9 /Encoding get
dup 82 /R put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 116 /t put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHV+CMTI9*1 
[67{/.notdef}rp /C 2{/.notdef}rp /F /G /H /I 2{/.notdef}rp 
/L 5{/.notdef}rp /R /S /.notdef /U 15{/.notdef}rp /e 
/f /g /h /i 10{/.notdef}rp /t 139{/.notdef}rp]
BDXWHV+CMTI9 nf
BDXWHV+CMTI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
90.5992 164.633 mo
(Left)
[5.28118 4.19807 2.88182 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: TCUBAA+CMR9 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
BDXWHU+CMR9 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ff <1C60D8A8C9B08A95F621BF225AD3BB8A5D44C235C420B632940F017E14A
E91D2CE242354CED9F4F48672817FB5D2FFBE34893E19E76C4D991B05009CF77
59A34B674CD0D04CDAB780B8409DF60A58F0117A1AECA32FF4A58536B96C57BF
57E54506680793F37014E413133A1F451569928DDF7A4C9A756940A4AB3E9832
E48E019CC9978150E705647775948A687787BD569D07704C81AF05C41B37CB62
B83208170FF1F301AFE439F30ED45852CAA4ED617C7317230B93403CD0DA021C
D5D713E1F4BC0082C5DD4D23E779A0B884042FAF5FD47A274EDA2DCFFFD3668B
77526591EFDD73CBD2E67> |-
/fi <1C60D8A8C9B08A95C3FA670F19FFF74DD8132D298A098C3C703491A946B
BAD95F352639E308B34F7DAF5B247CA13392D8F98AAD257B53D82CB1E84427CC
689BFAB9C69577612758DA447E193D3C52A4D1F3600C070CF32C05254D4526F3
4270B21C9CB964B9E837FE8EFB4406FD7400D210A7B9D48B84827674D4E2D5B8
3EA9236BB90A76C143110306EF75032252DC690C46402B9B3996CD6433503EB3
80AEB9D741D7EDB5C78945BA146F00DF14DD8329E74CA88522652DB9D7C30> |-
/fl <1C60D8A8C9B08A95C3FA670F19FFF74DD8132D298A08422BDD93A9E0D7D
540C82A838B936A7217D1EDEBADD10EA78AB261B2373CFD109BDA61C4935CE6D
17E7D1A44852B054BA5C467ACDA5191AD04F9486EF1184498CBE5A3071DF3DFD
AE5CEEAB4CB3FEF8EDF46C401A7D9A2B068D1EF91266F6E36F632D2393E050D7
E1499AB284A43F31FBFCA090CC0661C2398327C36990E50834AE70FBE5C261EB
88DF7BEE7202375FF16FB68F28960850F61C22B83> |-
/period <1C60D8A8C9B08A9573EBC19D9789FEFF11AAE636F5DF237793441F9
0B8B6C20714435F1AA647964795FBF0F32F7B194B> |-
/colon <1C60D8A8C9B08A9573EBC19D9789FEFF11AAF2B924317ADFC87B6579
339D038A1DA9E085C07F3A440944DE782E100E82BD4189DC794E4FF197E3BE3D
1812F31483DAC1654626A46DC8E848BBFBCB> |-
/A <1C60D8A8C9B08A9463E6AC5868A3852620547E377E3F7CD40225FD8FA798
20535B234530C91E97EDA8A48BBEA7F34137B4BA488479419B6461CBB0E4A660
35450049F998E0109AF668E29CDD3AF8961727330F015F772B46877353AD0ACD
BBB7DA6DCE1F12037B5A2D88EDDD9EC4543ACEE9B343B81B47CB4E47B44B7B66
15CE2AAF73F721FC1C8F9F5D52650AFA61E1DCA099D67D45224206E1> |-
/T <1C60D8A8C9B08A946F6E52356EEEFB94000563B8803C3BE76AAB2907F7AE
735E6913D13F918E0145F781F14C30F8C079177E8018DDBB82818B197938B509
386B9000804F71FA6BE9448578F42D85569F5DFB9413977E5E4252D21DCB5992
6FC6C3D99C30115B2A5E413AAC502046BEB3BB7D86159FE31176E7BED3A944F1
5E1C2C> |-
/b <1C60D8A8C9B08A95C3FA670F19FFFC4B40ADBFA40584F3C2577A25FF49C4
D27F67CACE5F67694C55A7E0498729E627E6D5F227D965E87263F5B58F845D45
1996785BC2FCDCBC905A54A48AB2C6D07E126AEB7DC6DCFE9F9F469DE9BF315C
4BEAC49689FD07CD10B482A423B4E2101B3459633F1D4FD5459124FDFCCFEBE9
915DFA00C8661E042C81EAC85BB48C6A4AC05CAD2A> |-
/c <1C60D8A8C9B08A95AE6E164BF06D3E00A8466E8E49813B403558EC6479CA
DCAF39ECB164B50A3F17862939037FB783652D753064BE1ADB6FCC74FC9C1299
7BE4127DC0FE5A1F93A8C330C8CD2AF583460BAFE5396B609F76B48317ED9CBE
48E7E47E3FDC0BD70B46736F98FAC8E0946CDD0360CDDB667AFA> |-
/j <1C60D8A8C9B08A95665E4A77401F5682D71EEE226415A2A17072EFE27199
761B315BD87DF636E67F3C2277AB724E0FF242072E27EE325C3B2D4F9B1881A0
2A986302C6E701D554FB88A80866147F296263928C2194ED98F6A6CB20B539CD
B080E10313F86FBD0C1AB4FF2CF02C389BDF2EFDF5E3DAAAFC> |-
/m <1C60D8A8C9B08A94009736013DEBDE4B8AB4B47B2402AE843906A9F33A45
DEFE58288CAC1D433BC5FA686CCBE9963C3BBA96B2D25753ADBCB02C863B92ED
17702266CFFF625643D18C89C26488B7C95A85E37B9B172B13B2D40CAC631B2B
BED8A4021978CE78088F91E8AC9991E8F6721DD0E7ECE74D06693D788940A8B6
E6F2A9FCDEA0FFD3323710D2E3D65000DDAEC66EFBFF17CBCCE25F7C0FBA7AB8
69759DEB21794D430A86CA27CB4660BE98F3DC5AB5172A02C0E300C942E0FB4A
5C4DD0CF8EDBBF0C08E73819D35C1B6A25D6B4BB12AF> |-
/p <1C60D8A8C9B08A95C3FA670F19FF87C17F8EF39E8CF673DFD228A3B51747
CEEB32AEAF1A537B701276FC7F39B916EE4EB1D81AF9753B80934FE302DFBEF2
4494143F53C34E0A7C309D0CE9CDF64B15872D848C3AFA7FE7C448D655EF212A
380591C1C305202A83135C5A98F8B3105EEFF63E6E734230A0550D5CFC53009B
C208367570C639949F080E4F88E569BA422B88365165383E88> |-
/q <1C60D8A8C9B08A95CF7E277A5C26527927F3C81741E27186C8C111BFBEE2
1C56CF477DA6F00F701170C2EC29353402292C744F3768DDA202C3BF8B294392
262B2F63541833A36266C0CAF1A831A33D7DCE52CB468AFB51D9B03370974908
E92F9F2C8361BDCD04AA347A667756911F1C3D3393A448CCA06F8FDB135EDF6B
BC5E5DF71C9673F7A427B56A2A4A> |-
/v <1C60D8A8C9B08A95CF7E277A5C26298076DDA5F3EBF7C0958B69E2797ADB
2D6EABDAEE8460CA3BA3C1607FBE729B09B2DC1101FCBA2896726E66650E72D6
996C8C84A0DAA4B5B07457D74C49C4D3174083B094D2ADF6FECCFDE02DB37730
619F2383BB1B61F71B08F4DA30722AF3467D3C35A56047DE5EC4DDEFD549AF7D
5D5EFD1FDDE6> |-
/y <1C60D8A8C9B08A95CF7E277A5C26524E453276D4045DA011AB109927F843
C0242FB8092A8C21FF0AB1552E311AA79AE59FAEE0D11988B0B80C9DE0714D2E
F36D932C83D2673F1D35D7FC7A36BA973085233017C93438A021E23965B63965
3E34EF8C19975FA9DD14A7754C72BC02A6F87219424C80E640D68831C0AAABF1
AC6391A3E21374ADDF058786A3E947069DB423217D750E704B2466EC42755969
E217003D9AEED5D32BBE68D54FEC> |-
/z <1C60D8A8C9B08A95AE6E164BF06D35C2AB06462711706CFAA8E94CE1D8D1
DF1AE8EFE37CBAA22968F8BA5DBABE0CDF42C1D610ABCD6F7CAF1A8F0946B616
F781502300A2FB25AE323DA3282F3B8BBEA0A048239BBD7110E3D40A0B96C3B5
104CBF90> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHU+CMR9 /Encoding get
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 46 /period put
dup 58 /colon put
dup 65 /A put
dup 84 /T put
dup 98 /b put
dup 99 /c put
dup 106 /j put
dup 109 /m put
dup 112 /p put
dup 113 /q put
dup 118 /v put
dup 121 /y put
dup 122 /z put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHU+CMR9*1 
[11{/.notdef}rp /ff /fi /fl 32{/.notdef}rp /period 4{/.notdef}rp /three 
/four 5{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C 14{/.notdef}rp 
/R /.notdef /T 12{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /j /.notdef /l 
/m /n /o /p /q /r /s /t 
/u /v /w /.notdef /y /z 133{/.notdef}rp]
BDXWHU+CMR9 nf
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
106.799 164.633 mo
(:Aplotoftheradialtemperaturepro\014lenormalizedtotheglobal)
[6.83601 11.1631 5.16016 2.51601 4.57561 7.92267 4.57562 7.19998 3.60263 5.16016 8.27869 3.59995 
4.57562 5.16016 2.52228 4.57562 6.95526 3.60265 4.06447 7.67526 5.40045 4.07883 3.57126 4.57562 
3.60263 5.16016 3.57126 8.39883 5.16016 3.59995 4.57562 5.16013 2.52228 8.39883 5.16016 4.56128 
3.57126 7.67526 4.57562 2.52228 2.52228 4.06445 4.06448 9.60031 3.60266 8.88129 3.60266 5.16013 
8.27869 4.56128 2.52228 4.57562 5.16016 4.56125 0 ]xsh
54.5991 175.673 mo
(clustertemperatureversusthefractionofthevirialradius.Theplothasbeen)
[4.08151 2.51601 5.14312 3.59641 3.60982 4.07882 8.16026 3.60265 4.07882 7.67526 5.40046 4.07882 
3.62775 4.56128 3.60982 5.14311 3.62773 8.75839 4.67606 4.07881 3.62773 3.59644 5.1431 8.15674 
3.6098 5.14313 8.63824 2.7598 3.62775 4.56128 4.08151 3.60266 2.51599 4.56128 9.83972 4.56125 
7.43939 3.60266 5.1431 8.63824 4.88315 2.51602 3.62772 2.51602 4.56125 7.19559 3.62775 4.56125 
5.14313 2.51599 5.14313 3.59641 7.19556 6.5975 5.14313 8.75839 5.14313 2.51599 4.56128 8.16293 
5.14313 4.56131 8.27597 5.40045 4.07791 4.07886 0 ]xsh
54.5991 186.593 mo
(cutataquarterofthevirialradiustoemphasizethecentraltemperaturepro\014le.)
[4.08151 5.16016 6.96236 4.56127 7.0825 7.92099 4.88316 5.14313 4.56128 3.59994 3.60983 4.07882 
7.0798 4.56128 6.23968 3.60265 5.14311 7.43852 4.88318 2.51599 3.62775 2.51599 4.56128 5.99588 
3.62773 4.56128 5.14311 2.51602 5.1431 7.07626 3.60983 8.04114 4.0788 7.67526 5.14313 5.14313 
4.56128 3.59641 2.51599 4.08151 7.55869 3.6098 5.14313 7.43854 4.08148 4.07883 4.91986 3.6098 
3.62775 4.56128 5.99585 3.60983 4.0788 7.69858 5.40045 4.07883 3.59995 4.56128 3.60263 5.14313 
3.62775 7.55872 5.16016 3.62775 4.56131 5.14313 2.51602 4.0788 0 ]xsh
54.5991 197.514 mo
(Thescattersuggeststhereisnounive)
[6.59752 5.16016 7.43853 3.59641 4.0815 4.56128 3.6143 3.6143 4.07882 7.0798 3.59641 5.1476 
4.56128 4.56127 4.07883 3.59641 3.60265 7.07628 3.60263 5.14761 4.07883 3.63222 7.43852 2.51602 
7.07626 5.14761 7.92099 5.14758 5.14761 2.51602 4.67603 0 ]xsh
208.797 197.514 mo
(rsalcentraltemperaturepro\014le.)
[3.59187 3.61884 4.59624 5.87572 4.0851 4.0851 4.91986 3.60265 3.59187 4.59624 5.87573 3.60263 
4.08511 7.66269 5.40045 4.07883 3.59189 4.59625 3.57394 5.10727 3.59186 7.43854 5.10724 3.59189 
4.59622 5.10727 2.54291 4.08511 0 ]xsh
BDXWHV+CMTI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
341.035 197.514 mo
(Right)
[6.48175 2.88181 4.19809 4.68219 0 ]xsh
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
362.275 197.514 mo
(:This)
[5.99585 6.59753 5.16016 2.51599 0 ]xsh
54.5991 208.554 mo
(plotshowsthecentralentropypro\014lescaledtotheentropyatr)
[5.16016 2.516 4.56128 6.96236 3.59641 5.16016 4.32098 6.59752 7.19642 3.60265 5.16016 7.43853 
4.08151 4.07883 4.91986 3.60263 3.59995 4.56128 5.99588 4.07883 4.91985 3.60265 3.59995 4.56128 
4.91986 8.15591 5.16016 3.59995 4.56128 5.16016 2.51599 7.55869 3.59641 4.08151 4.56128 2.51599 
4.07883 8.76016 3.60263 7.92099 3.60266 5.16016 7.43854 4.07883 4.91983 3.60266 3.59995 4.56128 
4.91983 8.27606 4.56128 7.08249 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: JWFAAA+CMR6 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JWFAAA+CMR6 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR6) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 50 /two put
def
/FontBBox {-20 -250 1193 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 -0 683 704 431 446 665 675] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [39] def
/StdVW [83] def
/StemSnapH [32 39] def
/StemSnapV [83 100] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/zero <1C60D8A8C9B08A95F2616DBAAE743E5F71FCCF0A4CB5DD24CC29A0374
B6C661F3264E6FC882477864E753A3CD5D62EE148C46920291467991B81969A4
C6C796F5D7509388A0D7FC1371AFF0DFC9D2F59FB8C2DD6F4F6748257FF0C8DB
96107F33843DE6EF603109D4949C751A466366F7AD5AD19AFA34CA7A6973DCDF
0> |-
/two <1C60D8A8C9B08A95F2616DBAAE74C3D69CFA1175A1A3BA83C4916858A4
55FB4D7A9592BD9177C3E86C877175395646560E7164BFC803F92EFC6ADA6187
9D4A9B5C93DCB5F2EDFFFA49CD17807A86BD9790DCFCF5CAB9CE29D47C1F4687
5B0F05AD4F29EC848800BA99AB916461096A157A62CCEC53766115C96571E9CE
967D8332EC85792020DF742CFC1CBE36D5923A> |-
/.notdef <1C60D8A8C9B08A95BE2B761DD6BD68> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWHY+CMR6 /JWFAAA+CMR6 findfont ct_VMDictPut
/BDXWHY+CMR6*1 
[48{/.notdef}rp /zero /.notdef /two 205{/.notdef}rp]
BDXWHY+CMR6 nf
BDXWHY+CMR6*1 [5.9776 0 0 -5.9776 0 0 ]msf
314.64 209.513 mo
(200)
[3.59906 3.59909 0 ]xsh
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
326.04 208.553 mo
(.Theobserved)
[5.99588 6.5975 5.16016 7.55869 4.56128 5.16016 3.59641 4.07883 3.59995 4.67603 4.07794 0 
]xsh
54.5993 219.473 mo
(\015atteningandlargescatterareconsistentwiththepredictionsfromsimulations.)
[5.13684 4.56128 3.60354 3.60355 4.11469 5.13684 2.51601 5.13684 8.28143 4.56128 5.16016 9.00046 
2.51601 4.56128 3.59994 4.56129 8.03838 3.59642 4.08151 4.56128 3.60355 3.60353 4.11469 7.55951 
4.56128 3.62148 7.91821 4.11469 4.56128 5.13684 3.59641 2.51602 3.59641 3.60355 4.11469 4.91983 
7.44296 6.5975 2.51599 3.60355 9.00046 3.60355 5.13684 7.91824 5.16016 3.62146 4.11469 5.13684 
2.51599 4.11469 3.60355 2.51599 4.56128 5.13684 7.43671 2.75983 3.59995 4.56125 11.6357 3.59641 
2.51602 7.43585 5.16019 2.51602 4.56128 3.60355 2.51602 4.56128 5.16016 3.59644 0 ]xsh
54.5993 230.393 mo
(Thelowcentralvaluesinthisplotcanbeattributedtoprojectione\013ects.)
[6.59752 5.16016 7.19823 2.51601 4.32098 9.71782 4.08152 4.07882 4.91986 3.60265 3.62505 4.56128 
5.63541 4.43575 4.56129 2.51599 5.14044 4.07883 6.71671 2.51601 8.28047 3.60263 5.14044 2.51599 
6.59657 5.16016 2.51601 4.56128 6.72296 4.08151 4.56125 8.28049 5.40045 7.19824 4.56125 3.60715 
3.60712 3.62506 2.51599 5.14044 5.14044 3.60712 4.07883 8.16031 3.60715 7.68066 5.14044 3.62506 
5.04099 2.7598 4.07883 4.08151 3.60712 2.51599 4.56128 8.39972 4.07883 5.40411 4.07883 4.08151 
3.60712 3.59644 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: IWCAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IWCAAA+CMR10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 12 /fi put
dup 13 /fl put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 55 /seven put
dup 65 /A put
dup 70 /F put
dup 73 /I put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
def
/FontBBox {-251 -250 1009 969} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
41 dict dup begin
/fi <1C60D8A8C9B08A95C5897169EED9664BED359E1B6FA8046F967D286B5C3
15A2CE47E3043EA3526C6192449635F2DA5AE3EE73919B52D525C096ECB55C63
DDB789A7F918074FC45E4ACDE6751656039844BA59107A293FBC6F9D2FA57995
2076F62E9DABA5CEDE9C9326D1250FF5FA67CCED67DFAA3C183BF1B9C26748E0
DDFEEE8F8464B1DCA14FE4BD296DEF29C921827AB4EDDC974773DB09417C4F23
2E6AD283B19FF29059BF9379DF784AAAD95EC606450E2256F10C70E5A28F3650
8106B27B13371584DB56C0B1A191AE795A2B9CE6617EFD2A3> |-
/fl <1C60D8A8C9B08A95C5897169EED9664BED358188D466DBE6FE1A580EBA1
4FB3F2A4E8DA1A2BDE83DB59A3704025B88132B94BE497B062BD58FEF0BC4DFD
3A3328FA36B178817DE14B046A168EBDD9E097C8DE37EDA3CD17B1A5AB7953CB
F14CB200FA4C3D0904443280930D1C60DCB4361EBAC8ADA75BD72EB36EF1AB36
5EF0C3C4A737B66C1E15891F4C3D8CA434BD458C50EDA0D919267690A3E104C8
0CD1933FB1EBC255C7C6F6F741AC2B14F8B051123B42C43AF110EAA9941F2596
043BF2CD54F21> |-
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED
90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F0
55B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDE
C0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03
DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA9
22C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBAD
B3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A7698
DF02C61BB3071F67A562DD96D0521F578EC9F57BF5A71BF023ACCD67B8727CFD
38538E62ACB3D55D0B01252803DA68060E5342CFD41A7D> |-
/hyphen <1C60D8A8C9B08A959E2F69652E8B76AC2AC5B4F1FA8662A86AEED57
846929C2FBC07360B> |-
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A08293A
A33E44598842821CBFE74832C3A2FC51890F3A66AFDE8EA8269173784AF985B0
8CD4044AADA37EBF8296E8DBBCEABE3042A3995F6A3A8DE32D90D624CEDF4C1B
CFEECD943884DD6052923FAC92315AE2977DECA1B6F479ADBDA41B10FDF2F38D
2B74CBF99D8D6FF4> |-
/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065F9D4190A646C
4B6AEC0EE9FA16CBD7A614FBA5C7797971DF7C6EA57394603F00B98324AF84E1
D747CBDA8BF6ACE99B270F3634D0598A7799230B2FA53F37697C8FB04996EB79
CA1E39DB1488D8A5A85F57D049C7AE31C6F8A6F15F2EE8FAE7CD4D80767B9> |-
/seven <1C60D8A8C9B7A73D3B2C65B72E3853584348C1AA0EC611B673546899
CAC2F5881F734271F745E6BED9150871364812C182076C7FE649F3BB3D5FD146
09E37BA29EC4E0DD0D9315F7FA96EE3C3E071336C6F3889037BBC9D4C9A05041
1D6417B8A488787A8C755BFD89BE81986B96036872806293> |-
/A <1C60D8A8C9B08A9501CDAE1251A61DF6E2312CA41635F6CE1D00B63E171C
70F84D42F62A21A6DD37D84C279E3FAE908D39B730ACD671ED9E277ACFE833A1
1F48F076C9803DC08258033731BCBCE19DF3B81C1C298B382A15FAC94387A992
AD9631716A7ED4F711137D6C851AE1C8DCBBFBCF7274E882226E58958CE6283A
197E7FAE3A2D0F6C24FA411BECFB36A10FF2A923EA89ABEFAD5AB23D600F> |-
/F <1C60D8A8C9B08A95E211B68BD74B7CA2EA30EA4FC2444F1F126966AA7729
7BA7EB9B6F06068DCAA13C02B3588F5A46379A5072E7E2DBF343C097B55CA4D5
88C6753F362DD28478A1BC56804A66D1A6D1CB247FEE04B2647D343D14D14B66
B993C73F534C4128A2626BB2404D5D4FD30D29B727A906D4DCB574AC37C31D5E
5DAFB5704A4D0DA0711E1E> |-
/I <1C60D8A8C9B08A9591900960B3FA4612DFF926AB21A530E1912F33677612
AC06B324D812E42049FF4946BE5E0FFA24FA0C62F2839FF2110EEC7EE0A42476
46E6F699D4C8BECE1825B3A661611E4D55F40F2E64FACB836D4D0C9780F60650
FBF10E0D42> |-
/T <1C60D8A8C9B08A9454CA4C75C5C97DCE7AB32777FAAECD12647866E7CB3F
CCDC541E37F2225E520DEDE695980D4012AD5B972BDABC7E7E5410E71AC63692
4E778B3131B6C4D1E76F8C4592AC311A2107F53DC1850538C9E487E6D5DBDFE8
027D7126BA9ED8B24E7379B57E474ACD298BF6B3700CC970D80111DD98EFC872
C24D0DA3C75DDDFD177C6D15> |-
/a <1C60D8A8C9B7A73DCB03313BCF7BA903D75A87DEC6EB34306A2C875A7B9D
6F03FA56EC184A666A965328412CD76CCEF3CAD69BC525A6A87F1F2D19F5D1B7
FD73AE7371FEED4E7F3CC2802C465D966135A2EE9CF8A0BF2840255B111E8037
10168818EEA9C2DFE9C99A20ABC767161183EAE437218D2E1239DA58B1500E1F
7F2D27496F0873D02EC47EEDEB84F4B0D78003FE0EDD73F083F9C52A46ED942D
3466EB983C6AA2296E8F2602B3A2BC810F850571C10A31EC74CF8C0EACAB287D
E5031078E0A963D32061> |-
/b <1C60D8A8C9B08A95C5897169EED96D271CC0A201580A85BBB6CFE03702C9
389AEE25CE69D1BDDECD4E28232C32A3113C892241798575F645E97E1FEF4D17
BABACA9B1400EB966B8CBA5BFC74A4181A1A52C4AC1E4D4BCB3BEFBF05CAB342
4B8B71500585C2C89CD37B890F00AF434789553E13269B7993EDDE63F9B6DB1C
CC49FF90A25496B9C07E5617BD7387C1694D4EBB8E59CF0CEF85691D4C91D3CD
1D33AB05DBBDE11A3BE1086B97B8CBA534FBFB> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC563DEDE799FE18B66F38FD9D
86FB33EF8157737910C2A21CF1859082F165505E98A2D559D2B21F8D988656D0
8136253C2962AD8B7BF2A4CE3B3D77FFEE3AC8C805C2D68655124FEAC62FFFA4
B2E84874A6B6FEF5E31C416CAF5B3B1B491C61B5BE3DD5423D78BF> |-
/d <1C60D8A8C9B08A95C5897169EED96D33CB6A9013DDE3D04C2845E595598C
4E4627D0E1F97AFD1FA3154224DA0D119EDECEF82924766CE4492626DF7B3B07
C4245B263AA58C37772C982C7955B9EED30A1A264318D030C3D295AD4CC9C21E
7AC9D2948AC9CD001C0EF80B50DF932CF6EE69C321627BC51A66341B5399D1E7
8024F824DB5DEE83140E59FB88138D6F0F5D2F350BA93460F2F700A9AE6D35AB
E4DB962D8E6D84D6D606A800DD98F8807C3555FEEB> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B20786BB8409E5C
B08921F2042A459BE0DE80ADD86BD8D3FC85885973F3B8E71B750A7BBBCB2EC2
7654BABC4A421F19CAF38DA67236E15B4E8454D787305B09443F6B2507420195
7C1B86920E2C7CED0E614A34A438ED72C4B057D323DD16C0BE898DF1> |-
/f <1C60D8A8C9B08A956BA65798425CE9B0A78F07A04AF2F8524751F181F94C
EF756ACD6AB92BD091D7482415CDE9144C26B1697F8DF70FCF1DEFD4FA16FBE3
9206B1378E548C93AC587B3EF0B1ED3ACC74CAAD2CEA03512A889B4BA237C2E5
79B0E01D3D82622F69FB50659184006104BE20E13DAFC7793B241C1FD1A3880C
4AA41E91E3F86F715551> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
6C40D52FF50AB2BCF83396829D3E501BD0EAB8595D9693E632ABAF05A4D1FBD5
E9FB32E59BDDF670BD3805B1A8647E1D2641030D018FCD259301AC116F3DEE87
AA68CECE526FB7B8BC0206EAEFB580DA05969530F8D40CD15579447988D4CF07
5C24F15E32C0A9AC369D08351B0D49CAFF731E593F6C55EE74B16DE9D9A4B199
3D1CF0FF1D3A57A52A0C64F106D414FF112A5DA34DEE3AB850B6A4492C25D3F0
9EFC86EFE140D828B1F4BAE5664F14014926ED1A5AFBCC814A3428F143CF5FB2
88702BF23054721A3BAA8027EF0D34A7A361A40A12717277178C5820C35A1131
71DEF9DBB455B7A9D7BB98406120BD93C5B4D04664B09F3E37553C20D6> |-
/h <1C60D8A8C9B08A95C5897169EED9664BED359D179BDDBB0B44F78A354068
F1882593A360E640ED3246F83F38F17203BDBBCE194B9E0A6BE002DEEC6E590D
34E67EDA7804A1C1CA9840B3036AA2F9D110358C769BBBA6E4ABF35AA04B72BD
94DD37985D5F60B66C4561BE8C71200493330FB300D08910FDC33541EB4ED02B
C0E5DA36A3AFFA9C2A4E001E9049F0E519949606FF0894B2E73F51ED> |-
/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EAE33A4AEDADBE9B65D
A53E9F2E54B16133284CA9914BED3880C793207FBDC7926300AD07E6E54407B5
1EA082FB5EE3816A6A23A8296A947037E49B372BD5DFBDAE3E0626953F75EA84
BE757683B949F1DE2291C5796E30589D0B63B15E0D5680411C> |-
/k <1C60D8A8C9B08A95D222871B45C8170346D4B18ED19B2E2E03D20F864B5D
C5BD82CE186E8865448F19B50359E04C51718F8BDF55D412398F4EF83C05419A
DE886E1536E26F7FC0E53312F110D79646DAD9F1D10B32AFE3698557277E72D5
7B4C7DAD8FF58DCEB52B83B453E4BE2D48D6882B0AECFDF4A8BCF747376E22D9
81F8E1C7CD6E92891501D7EE1AA17A160448D2B40E0899A7693FEF353371FE21
8D3D2DA9622BE1E9110437FDF2C62C6B642301FAF5AD> |-
/l <1C60D8A8C9B08A9570810981675968AD25F317189905083B97CD6CD1B880
05B79B666989E13C0F8D0889AD0162C7E87274D188EBBD1A911FDD0B6E360AA1
C515725198B9106B157680FC> |-
/m <1C60D8A8C9B08A940B724A74A01E174C613EBE4AE79E2AFFD113284480DB
6FE09606C55F36699E627D1CC0541895DC471E8C2C5C4E2C95A8F4D0511C409C
AAF681328E85B80F5E465253D2C6073C651F0604062EA2D77E8A500E1EE4F307
7B7F7483D2CC9857B1ED96D898A5541DF9DE8AB23FB73C101B0C097D40132490
7E04FB8955FEAB5C502CF57E144F90A7ECF5381D38A3F171BB6DF98E09DF4194
6459233CB9F82A2654E1E7DAB925958FBF1007B46353DB553ADE2BBAAF8A2664
8EECD081A81546AA8F04D4AE967DDA0613FF55E900D130A60E615888E6EB7D42
9CB17E070CB4D63732AC4F9FD92362B29E21DF180EDBB7F0149C6A01> |-
/n <1C60D8A8C9B08A95C5897169EED9664BED359D179BD38846B55E34D4CAA6
E85E9CF3F20D5FF6B35F1C9AAE2A542B7B24E087B6004A4C7219997095CC0DD0
7A15DB83B5FEAD13F209441FFD364AD3DBF6E16129F3599BACA005A523490ABC
41E4DF320ACE384037EE1D352E3FAD8A9E2CECBD75A999F7B655F4FFBFAC6FFF
84029A8DF710DBB0D7CD4C1D20367E79BC4E312103DCC482005590EA2F1652EA
57C34D10CC78642AFD> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
/p <1C60D8A8C9B08A95C5897169EED91609D9E4D5F91353A54E37DF51998183
52315911AF5324EFF8F803A0D7623A2DDCB047188B5B8F28AB77A5ED34430D99
57B9E0225FBFAE612AB3A16746E264A6930D63A3F157DEFA872D2CA520250AA3
380B48623F26CA3F7D040CB163CC4C6240013209FBA4AD816878F179C8F27320
EBC05CF6C42FFA533A0E8716E243D2941CFE755ACC6E312A0F393F2C290E0F1A
CE85DBC680C6195A83A8DF92> |-
/q <1C60D8A8C9B08A95D222871B45C8677AD60861C3F92152D679EC046FD508
04EE7440261F7F760EFE5BDA37735333B634AEF0E39D128EC81BD50CEED93A00
645B5D6515E247CEC7B0C61191F67893C528A900762C59FAEA845D61ACA5F7E7
B106031460E4734AA4EE85618EEC80B1ED1E754561578DABED479BE37358B263
04EF9BF65844BFE482C31643A7466E43F6E32A0E02E6EBB6652EB71BB9780CA6
2F7BC7305363> |-
/r <1C60D8A8C9B08A9584DCB847BA986212E50A1268FF1FD1FC6504D9F4D673
BD97E004E27192E1359AD741527FE014B82A8709E1D277CF1F73EB8831CADE61
1D9AD525BE07EEB6589229F52FE652CA10A278AC096BF0A2B010C8B215B1ACA0
BBB8EF8E3C77EF77F60B5CDD1035D115BEF1087A4AEB28A5F886037DA56DEC62
DBB1D4F1AE123A1AD0E8FD48681467> |-
/s <1C60D8A8C9B08A9586D4F7B21AA9B0967A13D9D7A42FE340F518B826828C
B1C2BB6756CD4C9284475BF78FAB574767246E1F9CBC21AACF1F3C97D1790131
F28F8DFADB3AAE0AA727045B30CDDB07BDF05EDA5C24C0AFE386D470551D7E8E
D902488F32C5E29D2F3E7F01605EE454D8B7A57FD0F16F8D3A10D6235D828477
DAAA15E6231D70C2BB9D9C0718FB249BC89490F9614317D9D2089D530687FFE9
B32E2EABFBD5A30223E1691D4FE59FFF3C416D75396DC2C2F68135236C16492B
80BA292D01981169C65CE545147B052951BDA4BD86> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B3247B9CBDFB0724765D43ED23A7
B2BC7B24077C209594776C48799589E3DF7269407A6893D4C106057122D99E3F
649ACAFBE1812EEAA6C4DCDDD716BEB7694626BFFCAE715C15EF0FD8CE9F6FE4
E96B03> |-
/u <1C60D8A8C9B08A95C5897169EED96D33CB6A8CCD6F539BADC574F30FA019
2FAAA0351E8C93175F4B6BE4D2DCA8A13E4F01BEC5788441B5C71C1247369B6B
73137454B1C207EA4F43D533FE87512BAD8DD4F3DBBECD9A7A1CE3F33A4D3F31
6952FDB339B4B6A937009D6EC9821D8553981B7D8AABC3E750369071> |-
/v <1C60D8A8C9B08A95D222871B45C81C126204E8A3F3EFC2EBF937B1E5F2B8
737EDCCFF78DB8693FA0E7B559CFAC0A233112105FC1A8807ADD3013D4AE86C4
38318F1223CADD606642DF7E9A8EE9BE743E975DA759D856D52F7E927FE33606
3979ED38AB2E1EA4CB4F371A1EB04E6C5B864C9DB5271435AB2DE7D9DE15A6B1
D9E3FD555F015DADE467> |-
/w <1C60D8A8C9B08A9454CA4C75C5C9761F27DFD501BA4813FE991E533E1CD1
E174DB2ECA59D495EC56B0C1FD43D089BD170DD220487C38F20C192FAA7E2E88
3AD5437BC552CE37BD6C6BBA40409BE02939A8B895FF98709899D61A578F68A8
22D6CFB7A000AD2B69212700685F8E729740E6656D3B8D43A0C52B18628B0EFF
5F05D1944E33A86827C6670A3438CE653DA430AB3E54D22481FDFA780C4812C2
F3255AA0E07A5FC796A8653D62150A6CD8B7FE4B68F43CAA66CB6512EB54E359
E67F4D5FAA2BB87B8812835557ADA47955DD5F> |-
/x <1C60D8A8C9B08A95D222871B45C8170346D4B3692E8D5307651DE3271DD6
AF0FFCDE284DD9CDD3B987BD9A4951E635C7A5CDCF53A699D8D2BA39BF571FED
C61B4760FA01C102B3CF6C44B24A57107DFFEFB711E00B7E6B8A7F332F9AC2C5
3243312E3CD55C94054BCA0B5D37362E138F5DD97019783B5271FD96258D5354
389532FB5D3FC50CB007DF880768FCF0AAEC6D6F5D8AB1559D6270DF0761EAD0
57A9F39E9A718AA16D8D8ECA90D61565C41A9B86CA057EC652FEE1927FFE969C
A046D06A10E75C83320EEEAB290370B870EF0E26D64C8EE9F9FD2B5549> |-
/y <1C60D8A8C9B08A95D222871B45C8674D920EF37C9F679699CE0B0FB82274
530CA6994E4FADB5C701717EBB278510CEF9D9EF1CB9FAAD7A4852BC3264781D
C6E288589EC6BAAB146DF34989FBC4BF92E31D5C616C1050CCC8D58166B328D1
E315EF5F39AF721DC6173775DFB26E6B6D40709A2BB053DECCFFF00649FC51FF
5F341744BBA1E71297E598A51054A43B9F951D7105485742D0A3BB595676EC69
1F5215F9D0DE2FC2C87BF5CCF8146FF6F88E> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWHZ+CMR10 /IWCAAA+CMR10 findfont ct_VMDictPut
/BDXWHZ+CMR10*1 
[12{/.notdef}rp /fi /fl 26{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma 
/hyphen /period /.notdef /zero /one /two /.notdef /four 
2{/.notdef}rp /seven 9{/.notdef}rp /A 4{/.notdef}rp /F 2{/.notdef}rp /I 
10{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /.notdef /k /l /m 
/n /o /p /q /r /s /t /u 
/v /w /x /y 134{/.notdef}rp]
BDXWHZ+CMR10 nf
BDXWHZ+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
54.6 262.073 mo
(temperatureorentropypro\014leinthecentralregionsofclusters.Thepro\014les)
[3.84165 4.43535 8.27685 5.76436 4.46524 3.94717 5.02314 3.84166 5.52425 3.96311 7.55563 5.04008 
6.96284 4.43535 5.28416 3.84166 3.94716 5.02315 5.28415 8.40247 5.52426 3.9631 5.02313 5.52426 
2.76263 7.43607 2.76263 8.7641 3.84164 5.52426 7.6752 4.46524 4.46524 5.28415 3.84164 3.9631 
5.02313 5.88193 3.94717 4.46524 5.02313 2.76263 5.02316 5.52426 6.95584 5.04007 6.12402 4.43533 
2.76263 5.52426 3.9671 3.84164 4.46524 3.94717 3.96707 5.88193 7.19797 5.52426 7.6752 5.52426 
3.94717 5.02313 5.52426 2.76263 4.46524 0 ]xsh
54.6 273.953 mo
(showarangesofslopes,from)
[3.96807 5.52426 4.79998 10.3183 8.40046 3.9631 5.02414 5.52426 5.02414 4.46624 7.07541 5.04008 
6.24454 3.95512 2.76263 5.04008 5.76434 4.43536 3.96808 6.00246 3.00471 3.9631 5.02414 0 
]xsh
185.521 273.953 mo
(\015attosteeplydecreasing.)
[5.55116 4.99326 7.08148 3.84166 8.40047 3.95512 3.88748 4.43535 4.43536 5.55115 2.78156 8.52202 
5.55116 4.43536 4.43533 3.91727 4.43536 4.99326 3.93719 2.78152 5.55118 4.99326 0 ]xsh
69.4791 285.953 mo
(Toquantifythesteepnessofthetemperaturepro\014le,wetooktemperatures)
[6.35813 7.19997 5.28217 5.52426 5.04008 5.28416 3.86059 2.75466 3.0336 7.56261 3.86059 5.52425 
6.59525 3.95512 3.86058 4.40846 4.40845 5.52426 5.52426 4.40845 3.95512 6.11601 5.04008 5.28415 
3.86058 5.52426 6.59525 3.84166 4.40845 8.28383 5.76436 4.43536 3.9631 5.04007 3.8606 5.52426 
3.96312 6.59525 5.52426 3.9631 5.04007 5.52429 2.75464 4.40848 4.92252 6.95789 6.59525 3.84164 
5.28021 5.04004 7.44208 3.84161 4.40851 8.28381 5.76434 4.43536 3.96313 5.04004 3.8606 5.52429 
3.96307 4.43536 0 ]xsh
54.599 297.953 mo
(fromallannuliwithin0.1)
[3.03062 3.9631 5.04008 11.3971 5.04008 2.76263 5.88192 5.04007 5.52127 5.28416 5.52127 2.75166 
5.88192 7.19798 2.75168 3.8576 5.52127 2.75168 8.64453 5.04008 2.75166 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: ADVAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ADVAAA+CMMI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 27 /sigma put
dup 114 /r put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/sigma <1C60D8A8C9B08A95C3C78702C3789395BEEFB8DFA30AF5B4572EE8B2
16DFA27E43F3D749BDEB3096DC91889BCE089551B5064BB6F9D3506171F63BDA
F3A00A41C839064515160EEDF9248A4898169A260A02FFB6EAE2AE9A07EA92B9
6E15FD0201DF5B95EAA0DFB1AC6EAEC3C40F4331066C3ABD1B56454AF5B7> |-
/r <1C60D8A8C9B08A95AC58E8D2403E8A48F1C03E9027F61BFB867347129654
7AF094AE9279E9361ABCB6F7761430FE2191CFA12CE2676C3F982E04B59EBD91
111145EA4DFF8343541166B1B6544592B781FA2C28B3B81B222F2C5AFEDBED03
0CC370AA25DEF1C935D4D714315BA75AF844DF398FE40F58CCBA91B2DD6A07FD
949AABF37AE2BE6856318D80D84DE7E25F235626AAE961E57A73144F96042573
ECE214AA6784C481420B569D> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWIA+CMMI10 /ADVAAA+CMMI10 findfont ct_VMDictPut
/BDXWIA+CMMI10*1 
[27{/.notdef}rp /sigma 86{/.notdef}rp /r 141{/.notdef}rp]
BDXWIA+CMMI10 nf
BDXWIA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
168.36 297.953 mo
(r)sh
true set_gvm
%ADOBeginSubsetFont: BLQAAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BLQAAA+CMR7 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR7) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 56 /eight put
def
/FontBBox {-27 -250 1122 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 703 431 446 664 674] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B1
17D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2E
BEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC
959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AE
B3E78ECCEF035CFEC> |-
/one <1C60D8A8C9B08A95C25148D4A67F9511413D11105417B954A52A260BA5
871A06DFB8D8919F004ECADDCCFBF12243241C909C4118AA85F2539B7DC39D45
82A350A3CD25605077D4A323A8EBE0C72B60A7367C8A601B524B06B54D65D101
B8> |-
/eight <1C60D8A8C9B08A95C25148D4A67F69EFB9F9AE504F2C52346D54C5F7
623B9C8365F3EE35C4195D96D6314C58DBAA719DBB6D55226E3740499CDB01E0
AC465C6B589049E46827308D8D35A8C54894143A53934399D93B828D235C25B0
02B8830BEF7407587148B5707DE7398D109B3E5F2821BB0793280FBB70845FC6
EC97E6E5C37875E07B2D86AA6A1A771AB42E786497B8102F6CF258601C6320DE
75E9DF61F7771E70A630C79065923227> |-
/.notdef <1C60D8A8C9B08A958AA685092D4752> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWIB+CMR7 /BLQAAA+CMR7 findfont ct_VMDictPut
/BDXWIB+CMR7*1 
[48{/.notdef}rp /zero /one 6{/.notdef}rp /eight 199{/.notdef}rp]
BDXWIB+CMR7 nf
BDXWIB+CMR7*1 [6.9738 0 0 -6.9738 0 0 ]msf
172.8 299.393 mo
(180)
[3.95694 3.95692 0 ]xsh
BDXWHZ+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
188.4 297.953 mo
(ortheradiusofthethirdinner-mostannulus,)
[5.02911 6.96284 3.84166 5.52426 7.67519 3.9631 5.02913 5.52426 2.76262 5.52426 6.95586 5.04008 
6.12401 3.84164 5.52426 7.6752 3.84164 5.52426 2.76263 3.9631 8.64453 2.76263 5.52426 5.52426 
4.43536 3.95313 3.3653 8.27686 5.04007 3.97305 6.96094 5.02914 5.52426 5.28418 5.52423 2.76263 
5.52429 3.97305 0 ]xsh
54.6003 309.833 mo
(whicheverwasgreater,and\014tthiscurtailedpro\014letoapowerlaw.Fig.-2)
[7.18702 5.53323 2.76363 4.19525 5.53323 4.41742 5.04207 4.43535 8.40344 6.95788 5.04008 8.39545 
5.04008 3.9631 4.41742 5.04007 3.86957 4.41742 3.9631 7.0824 5.0401 5.52425 10.0841 5.52425 
8.40155 3.84164 5.53323 2.76364 8.63553 4.43536 5.5332 3.9631 3.86954 5.04007 2.76364 2.76361 
4.41742 9.96457 5.52429 3.9631 5.04007 5.5332 2.76361 8.99524 3.84164 9.59998 9.48041 5.76434 
4.79999 6.95789 4.43533 3.96313 2.7626 4.79999 7.19797 7.08243 6.48264 2.76364 5.04007 2.76364 
3.31149 0 ]xsh
54.6003 321.833 mo
(\()sh
true set_gvm
%ADOBeginSubsetFont: IAKAAA+CMTI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IAKAAA+CMTI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMTI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
dup 102 /f put
dup 108 /l put
dup 116 /t put
def
/FontBBox {-163 -250 1146 969} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 665 667] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [68] def
/StemSnapH [22 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/e <1C60D8A8C9B08A950DD62FF0D0BB649DD6DC8A8F167AD3C458C2B822D115
DDBA72807E25934801295C750BD9B92024EAC505FDC2407191ABD6DF2B07EAF1
6084557F1D7F22176DCF445F0D3220786CB961849D2DE5A7E078E73D578346BF
5AF4FD5CC0D00CCC8C7443F7C25986AEE700513E4CD4136CE2DB3166454CE1EF
8F088BA0EA> |-
/f <1C60D8A8C9B08A956B318F2665F118A3D3E364C2F83711DCE614FB44F5FB
6424BAE8E9BA8222531E6118B31C24570B8982E7FE66C1A1F98F94BBD40659E7
BF8201C288C356FBC8A5C07662ED133750F3D845CAEEF8390C6A60CB26B43CB6
A9F8393E84AF82AAF11DC365C687BD919144A70D4AC338A1D5276D190D0DD2C2
A875DB6B14B11F004AFF9DE20B6A90060AA73A80DD565DA7A4AA835941F5B5EC
6914E7C93ED89ADCC46D4324092C4976D8A4E163D60F4FCE28B0D55B> |-
/l <1C60D8A8C9B08A957FC8DDEDA4E5990236779DB2C90F61F4190F4B89DECD
2E6D61DFF5E2A23A2BEECDF030FFBF3170042C18E34771CFE53ECAC2E4B1D47B
74419D622F431E9D1DA047BB1CD9E02687DD3695180051EE7C12E71C652CDDDF
6F9758D7BF07B7248389E040A66B07EB5624EC993974B4C5AF8E51DEE2A5F297
BAAE54919FD4540E5EC2E27D0E678452> |-
/t <1C60D8A8C9B08A959D8AA3D8E221FFA1ECA8C975E3D8D93F8D9510FA2C5F
966B0A726E3844F9227A8353ED28E469BF4A7FAC73ECCD3C728E71634DF00B43
60CD819A984E370280D424E6009B2F0F5DFE05F7F7542428D960FD4944E72C1E
3FEF5004DE1F666E160FE7495BB24D1C98F33A110AB2907D4D7E14F819EE0BF3
1C4F7DD1247F3F2BEDADD16CF3E5662EC223> |-
/.notdef <1C60D8A8C9B08A9597B4632E36E65E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWIC+CMTI10 /IAKAAA+CMTI10 findfont ct_VMDictPut
/BDXWIC+CMTI10*1 
[101{/.notdef}rp /e /f 5{/.notdef}rp /l 7{/.notdef}rp /t 139{/.notdef}rp]
BDXWIC+CMTI10 nf
BDXWIC+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
58.4399 321.833 mo
(left)
[2.51054 4.54301 3.01873 0 ]xsh
BDXWHZ+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
71.8804 321.833 mo
(\)showsthebest\014tslopesand1-)
[7.32159 3.95512 5.52426 4.79998 7.19798 7.07541 3.84165 5.52425 7.9153 5.76436 4.43535 3.95512 
7.20103 5.52426 7.20103 3.95514 2.76263 5.04007 5.76437 4.43533 7.31552 5.04007 5.52426 8.7641 
5.04008 0 ]xsh
BDXWIA+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf
216.121 321.833 mo
(\033)sh
BDXWHZ+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf
225.481 321.833 mo
(errors.Theclustersareorderedfrom)
[4.46623 3.94817 3.94817 5.02414 3.94815 3.96808 5.76237 7.19797 5.52426 7.79575 4.46625 2.7626 
5.52426 3.95514 3.84164 4.43533 3.94818 7.31549 5.02417 3.94815 7.55563 5.0401 3.94815 5.52426 
4.46622 3.94818 4.46622 8.7641 3.00473 3.9631 5.02414 0 ]xsh
54.5993 333.833 mo
(steepest\(Abell2204\)toshallowest\(Abell2147\).Itisclearthatthereisa)
[3.96608 3.84165 4.46424 4.46424 5.76436 4.46425 3.96608 7.92134 3.84165 7.44007 5.76436 4.46424 
2.76263 6.96186 5.02215 5.02214 5.02214 5.02216 7.68124 3.84164 9.11978 3.96606 5.52426 5.02216 
2.76262 2.76263 4.79997 6.95789 4.43535 3.96608 7.68124 3.84164 7.44006 5.76436 4.43535 2.76263 
6.96185 5.02216 5.02216 5.02216 5.02216 3.84164 6.6022 3.59845 7.92133 2.76263 8.03577 4.43536 
2.76263 4.43536 5.02216 7.92322 3.84161 5.52429 5.02216 7.92133 3.84167 5.52423 4.46429 3.94617 
8.39545 2.76263 8.03583 0 ]xsh
54.5993 345.714 mo
(continuousspreadintheslopes.Iftherewereauniversalpro\014le,thenone)
[4.41941 5.04008 5.28416 3.84165 2.76562 5.28416 5.53522 5.04007 5.53522 7.91526 3.92125 5.53522 
3.9631 4.43536 5.04008 9.48438 2.76563 9.72449 3.87155 5.53522 8.63559 3.95514 2.76561 5.04008 
5.76436 4.43535 3.92126 6.72176 3.59244 7.20396 3.87154 5.5352 4.4194 3.96312 8.51602 6.95789 
4.4194 3.9631 8.51604 9.11978 5.53522 5.53519 2.76559 5.04211 4.43533 3.9631 3.95514 5.04004 
6.60223 5.53522 3.96313 5.04004 5.52429 2.76563 4.41937 6.84235 3.84161 5.53522 4.41943 9.72443 
5.0401 5.53522 0 ]xsh
54.5993 357.714 mo
(wouldexpecttwodistributions,oneforclusterswithcoolcentersandonefor)
[6.95788 5.04008 5.53123 2.76163 8.2849 4.43535 5.25228 5.76436 4.41543 4.41543 6.84138 3.60156 
6.95788 7.79971 5.52426 2.76163 3.91727 3.86755 3.96312 2.76163 5.53123 5.53122 3.86755 2.76164 
5.04008 5.53123 3.91725 5.64182 5.04008 5.53123 7.31555 3.04059 5.04007 6.84331 4.43535 2.76163 
5.53125 3.91727 3.86757 4.41544 3.9631 6.71577 7.19797 2.76163 3.86755 8.52402 4.43536 5.28018 
5.04007 5.52228 4.41544 4.41541 5.28418 3.86755 4.41547 3.96307 6.71576 5.0401 5.52423 8.40448 
5.04004 5.53125 7.31555 3.04059 5.0401 0 ]xsh
54.5993 369.594 mo
(clusterswithisothermalcenters.)
[4.41742 2.76362 5.53322 3.95512 3.86955 4.41742 3.9631 7.19595 7.18703 2.76363 3.86955 8.88464 
2.76363 3.95512 5.04008 3.84165 5.53322 4.41742 3.96312 8.27684 5.0401 5.88191 4.41742 4.41742 
5.28416 3.86955 4.41742 3.9631 3.95512 0 ]xsh
54.738 485.81 mo
394.823 485.81 li
394.823 389.528 li
54.738 389.528 li
cp
false sop
1 gry
f
72.314 475.719 mo
211.246 475.719 li
211.246 392.734 li
72.314 392.734 li
cp
f
0.092 lw
72.314 475.719 mo
72.314 392.734 li
211.246 392.734 li
211.246 475.719 li
72.314 475.719 li
@
72.314 475.719 mo
211.246 475.719 li
72.314 392.734 mo
211.246 392.734 li
72.314 475.719 mo
72.314 392.734 li
211.246 475.719 mo
211.246 392.734 li
72.314 475.719 mo
211.246 475.719 li
72.314 475.719 mo
72.314 392.734 li
72.314 475.719 mo
72.314 474.323 li
72.314 392.734 mo
72.314 394.114 li
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
71.0867 480.35 mo
(0)sh
93.355 475.719 mo
93.355 474.323 li
93.355 392.734 mo
93.355 394.114 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
90.9013 480.35 mo
(10)
[2.4558 0 ]xsh
114.412 475.719 mo
114.412 474.323 li
114.412 392.734 mo
114.412 394.114 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
111.958 480.35 mo
(20)
[2.4558 0 ]xsh
135.454 475.719 mo
135.454 474.323 li
135.454 392.734 mo
135.454 394.114 li
false sop
0 gry
@
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319E4220BC810B4
CADF2216B3056307D1DA8A73EC78180A0FB2BB871CD9EF56ACC1CD52B6B9416F
F0F6CC105DB9F235573EA49040A80A9111450BB0A3B96123E69E500815CFC7CF
564552067BED0784FB65E0D025591F822D7ED553FA9ACD59EB8A476CA7B6AD8E
268F493C2C91D99FF49648FFC2772170FE015289F1DCCFD377216FF1F5ADD3B4
D09EAA924593AF3FAC43C888F801B765C80AD39E3E3AC8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[46{/.notdef}rp /period /slash /zero /one /two /three 4{/.notdef}rp 
/eight 3{/.notdef}rp /less /.notdef /greater 12{/.notdef}rp /K 8{/.notdef}rp 
/T 20{/.notdef}rp /i /.notdef /k 6{/.notdef}rp /r 3{/.notdef}rp 
/v 137{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
133 480.35 mo
(30)
[2.4558 0 ]xsh
156.51 475.719 mo
156.51 474.323 li
156.51 392.734 mo
156.51 394.114 li
false sop
0 gry
@
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD
48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B261170
2A5DA745406DEB5C33C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[46{/.notdef}rp /period /slash /zero /one /two /three /four 
3{/.notdef}rp /eight 3{/.notdef}rp /less /.notdef /greater 12{/.notdef}rp /K 
8{/.notdef}rp /T 20{/.notdef}rp /i /.notdef /k 6{/.notdef}rp /r 
3{/.notdef}rp /v 137{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
154.057 480.35 mo
(40)
[2.4558 0 ]xsh
177.552 475.719 mo
177.552 474.323 li
177.552 392.734 mo
177.552 394.114 li
false sop
0 gry
@
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7EF32A470AE090A724FDDF392384CD70DD7F54DF5EDB5B
94F0458AC2358C0871CBF484570776DAA62CEADBBEA6E1E17511B86A0FD4826D
CDEA47E875128F93BF9268E1B1AFC37E94AD9FA810C0CD0434C2996F516FB90C
520A123E1892F92666B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[46{/.notdef}rp /period /slash /zero /one /two /three /four 
/five 2{/.notdef}rp /eight 3{/.notdef}rp /less /.notdef /greater 12{/.notdef}rp 
/K 8{/.notdef}rp /T 20{/.notdef}rp /i /.notdef /k 6{/.notdef}rp 
/r 3{/.notdef}rp /v 137{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
175.098 480.35 mo
(50)
[2.4558 0 ]xsh
198.609 475.719 mo
198.609 474.323 li
198.609 392.734 mo
198.609 394.114 li
false sop
0 gry
@
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D
895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C7
0508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D
55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E27797
64DBD296AF281D4117BA4D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[46{/.notdef}rp /period /slash /zero /one /two /three /four 
/five /six /.notdef /eight 3{/.notdef}rp /less /.notdef /greater 
12{/.notdef}rp /K 8{/.notdef}rp /T 20{/.notdef}rp /i /.notdef /k 
6{/.notdef}rp /r 3{/.notdef}rp /v 137{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
196.155 480.35 mo
(60)
[2.4558 0 ]xsh
72.314 475.719 mo
73.694 475.719 li
211.246 475.719 mo
209.85 475.719 li
false sop
0 gry
@
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B7F37489CF70BD6DA577A0101CCD591A60AB52AAD593ED
DED9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 32 /minus put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[32{/.notdef}rp /minus 13{/.notdef}rp /period /slash /zero /one /two 
/three /four /five /six /.notdef /eight 3{/.notdef}rp /less 
/.notdef /greater 12{/.notdef}rp /K 8{/.notdef}rp /T 20{/.notdef}rp /i 
/.notdef /k 6{/.notdef}rp /r 3{/.notdef}rp /v 137{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
63.0657 477.36 mo
( 0.5)
[2.57947 2.4558 1.2279 0 ]xsh
72.314 465.336 mo
73.694 465.336 li
211.246 465.336 mo
209.85 465.336 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
63.0657 466.977 mo
( 0.4)
[2.57947 2.4558 1.2279 0 ]xsh
72.314 454.969 mo
73.694 454.969 li
211.246 454.969 mo
209.85 454.969 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
63.0657 456.61 mo
( 0.3)
[2.57947 2.4558 1.2279 0 ]xsh
72.314 444.586 mo
73.694 444.586 li
211.246 444.586 mo
209.85 444.586 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
63.0657 446.227 mo
( 0.2)
[2.57947 2.4558 1.2279 0 ]xsh
72.314 434.219 mo
73.694 434.219 li
211.246 434.219 mo
209.85 434.219 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
63.0657 435.86 mo
( 0.1)
[2.57947 2.4558 1.2279 0 ]xsh
72.314 423.851 mo
73.694 423.851 li
211.246 423.851 mo
209.85 423.851 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
69.323 425.492 mo
(0)sh
72.314 413.468 mo
73.694 413.468 li
211.246 413.468 mo
209.85 413.468 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
65.6422 415.109 mo
(0.1)
[2.4558 1.2279 0 ]xsh
72.314 403.101 mo
73.694 403.101 li
211.246 403.101 mo
209.85 403.101 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
65.6422 404.742 mo
(0.2)
[2.4558 1.2279 0 ]xsh
72.314 392.734 mo
73.694 392.734 li
211.246 392.734 mo
209.85 392.734 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
65.6422 394.375 mo
(0.3)
[2.4558 1.2279 0 ]xsh
72.314 475.719 mo
211.246 475.719 li
72.314 392.734 mo
211.246 392.734 li
72.314 475.719 mo
72.314 392.734 li
211.246 475.719 mo
211.246 392.734 li
false sop
0 gry
@
74.031 462.806 mo
74.798 463.572 li
74.798 462.806 mo
74.031 463.572 li
0.1104 gry
@
0.368 lw
74.415 468.296 mo
74.415 457.913 li
0.5 gry
@
0.092 lw
76.132 462.606 mo
76.899 463.373 li
76.899 462.606 mo
76.132 463.373 li
0 gry
@
0.368 lw
76.516 465.428 mo
76.516 460.551 li
0.5 gry
@
0.092 lw
78.233 461.241 mo
79 462.008 li
79 461.241 mo
78.233 462.008 li
0 gry
@
0.368 lw
78.617 462.223 mo
78.617 461.027 li
0.5 gry
@
0.092 lw
80.35 457.714 mo
81.117 458.481 li
81.117 457.714 mo
80.35 458.481 li
0 gry
@
0.368 lw
80.733 463.956 mo
80.733 452.285 li
0.5 gry
@
0.092 lw
82.451 452.852 mo
83.218 453.619 li
83.218 452.852 mo
82.451 453.619 li
0 gry
@
0.368 lw
82.834 454.861 mo
82.834 451.625 li
0.5 gry
@
0.092 lw
84.552 452.086 mo
85.319 452.852 li
85.319 452.086 mo
84.552 452.852 li
0 gry
@
0.368 lw
84.935 453.957 mo
84.935 450.966 li
0.5 gry
@
0.092 lw
86.653 451.871 mo
87.42 452.638 li
87.42 451.871 mo
86.653 452.638 li
0 gry
@
0.368 lw
87.036 455.475 mo
87.036 449.08 li
0.5 gry
@
0.092 lw
88.77 451.426 mo
89.536 452.193 li
89.536 451.426 mo
88.77 452.193 li
0 gry
@
0.368 lw
89.153 452.484 mo
89.153 451.119 li
0.5 gry
@
0.092 lw
90.871 446.012 mo
91.637 446.779 li
91.637 446.012 mo
90.871 446.779 li
0 gry
@
0.368 lw
91.254 447.929 mo
91.254 444.877 li
0.5 gry
@
0.092 lw
92.972 445.598 mo
93.739 446.365 li
93.739 445.598 mo
92.972 446.365 li
0 gry
@
0.368 lw
93.355 448.359 mo
93.355 443.635 li
0.5 gry
@
0.092 lw
95.073 445.092 mo
95.84 445.859 li
95.84 445.092 mo
95.073 445.859 li
0 gry
@
0.368 lw
95.456 446.672 mo
95.456 444.295 li
0.5 gry
@
0.092 lw
97.189 443.114 mo
97.956 443.881 li
97.956 443.114 mo
97.189 443.881 li
0 gry
@
0.368 lw
97.573 444.233 mo
97.573 442.761 li
0.5 gry
@
0.092 lw
99.29 442.976 mo
100.057 443.742 li
100.057 442.976 mo
99.29 443.742 li
0 gry
@
0.368 lw
99.674 444.126 mo
99.674 442.608 li
0.5 gry
@
0.092 lw
101.391 442.132 mo
102.158 442.899 li
102.158 442.132 mo
101.391 442.899 li
0 gry
@
0.368 lw
101.775 444.479 mo
101.775 440.568 li
0.5 gry
@
0.092 lw
103.492 441.457 mo
104.259 442.224 li
104.259 441.457 mo
103.492 442.224 li
0 gry
@
0.368 lw
103.876 444.877 mo
103.876 438.82 li
0.5 gry
@
0.092 lw
105.609 439.678 mo
106.376 440.445 li
106.376 439.678 mo
105.609 440.445 li
0 gry
@
0.368 lw
105.992 441.58 mo
105.992 438.543 li
0.5 gry
@
0.092 lw
107.71 439.51 mo
108.477 440.276 li
108.477 439.51 mo
107.71 440.276 li
0 gry
@
0.368 lw
108.093 441.442 mo
108.093 438.344 li
0.5 gry
@
0.092 lw
109.811 438.835 mo
110.578 439.602 li
110.578 438.835 mo
109.811 439.602 li
0 gry
@
0.368 lw
110.194 441.963 mo
110.194 436.473 li
0.5 gry
@
0.092 lw
111.912 437.332 mo
112.679 438.099 li
112.679 437.332 mo
111.912 438.099 li
0 gry
@
0.368 lw
112.296 440.629 mo
112.296 434.863 li
0.5 gry
@
0.092 lw
114.029 436.028 mo
114.795 436.795 li
114.795 436.028 mo
114.029 436.795 li
0 gry
@
0.368 lw
114.412 438.237 mo
114.412 434.602 li
0.5 gry
@
0.092 lw
116.13 435.66 mo
116.896 436.427 li
116.896 435.66 mo
116.13 436.427 li
0 gry
@
0.368 lw
116.513 448.727 mo
116.513 423.452 li
@
0.092 lw
118.231 435.476 mo
118.998 436.243 li
118.998 435.476 mo
118.231 436.243 li
@
0.368 lw
118.614 438.129 mo
118.614 433.574 li
0.5 gry
@
0.092 lw
120.332 434.924 mo
121.099 435.691 li
121.099 434.924 mo
120.332 435.691 li
0 gry
@
0.368 lw
120.715 436.826 mo
120.715 433.789 li
0.5 gry
@
0.092 lw
122.448 434.28 mo
123.215 435.047 li
123.215 434.28 mo
122.448 435.047 li
0 gry
@
0.368 lw
122.832 446.212 mo
122.832 423.238 li
@
0.092 lw
124.549 433.528 mo
125.316 434.295 li
125.316 433.528 mo
124.549 434.295 li
@
0.368 lw
124.933 441.013 mo
124.933 426.934 li
0.5 gry
@
0.092 lw
126.65 433.191 mo
127.417 433.958 li
127.417 433.191 mo
126.65 433.958 li
0 gry
@
0.368 lw
127.034 437.317 mo
127.034 429.863 li
0.5 gry
@
0.092 lw
128.752 432.348 mo
129.518 433.114 li
129.518 432.348 mo
128.752 433.114 li
0 gry
@
0.368 lw
129.135 434.157 mo
129.135 431.305 li
0.5 gry
@
0.092 lw
130.868 431.489 mo
131.635 432.256 li
131.635 431.489 mo
130.868 432.256 li
0 gry
@
0.368 lw
131.251 432.654 mo
131.251 431.075 li
0.5 gry
@
0.092 lw
132.969 430.937 mo
133.736 431.703 li
133.736 430.937 mo
132.969 431.703 li
0 gry
@
0.368 lw
133.352 433.375 mo
133.352 429.296 li
0.5 gry
@
0.092 lw
135.07 430.722 mo
135.837 431.489 li
135.837 430.722 mo
135.07 431.489 li
0 gry
@
0.368 lw
135.454 435.185 mo
135.454 427.057 li
0.5 gry
@
0.092 lw
137.171 429.679 mo
137.938 430.446 li
137.938 429.679 mo
137.171 430.446 li
0 gry
@
0.368 lw
137.555 430.952 mo
137.555 429.158 li
0.5 gry
@
0.092 lw
139.288 429.403 mo
140.054 430.17 li
140.054 429.403 mo
139.288 430.17 li
0 gry
@
0.368 lw
139.671 434.265 mo
139.671 425.37 li
0.5 gry
@
0.092 lw
141.389 428.437 mo
142.156 429.204 li
142.156 428.437 mo
141.389 429.204 li
0 gry
@
0.368 lw
141.772 435.246 mo
141.772 422.64 li
@
0.092 lw
143.49 428.406 mo
144.257 429.173 li
144.257 428.406 mo
143.49 429.173 li
@
0.368 lw
143.873 434.495 mo
143.873 423.146 li
@
0.092 lw
145.606 428.053 mo
146.373 428.82 li
146.373 428.053 mo
145.606 428.82 li
@
0.368 lw
145.99 433.038 mo
145.99 423.928 li
0.5 gry
@
0.092 lw
147.707 427.915 mo
148.474 428.682 li
148.474 427.915 mo
147.707 428.682 li
0 gry
@
0.368 lw
148.091 433.36 mo
148.091 423.406 li
@
0.092 lw
149.808 427.609 mo
150.575 428.375 li
150.575 427.609 mo
149.808 428.375 li
@
0.368 lw
150.192 429.234 mo
150.192 426.765 li
0.5 gry
@
0.092 lw
151.909 427.578 mo
152.676 428.345 li
152.676 427.578 mo
151.909 428.345 li
0 gry
@
0.368 lw
152.293 434.985 mo
152.293 421.121 li
@
0.092 lw
154.026 427.409 mo
154.793 428.176 li
154.793 427.409 mo
154.026 428.176 li
@
0.368 lw
154.409 434.863 mo
154.409 421.014 li
@
0.092 lw
156.127 427.225 mo
156.894 427.992 li
156.894 427.225 mo
156.127 427.992 li
@
0.368 lw
156.51 434.541 mo
156.51 420.784 li
@
0.092 lw
158.228 425.369 mo
158.995 426.136 li
158.995 425.369 mo
158.228 426.136 li
@
0.368 lw
158.611 434.541 mo
158.611 417.318 li
@
0.092 lw
160.329 425.323 mo
161.096 426.09 li
161.096 425.323 mo
160.329 426.09 li
@
0.368 lw
160.713 428.513 mo
160.713 422.962 li
@
0.092 lw
162.446 424.158 mo
163.212 424.925 li
163.212 424.158 mo
162.446 424.925 li
@
0.368 lw
162.829 436.795 mo
162.829 412.502 li
@
0.092 lw
164.547 423.897 mo
165.313 424.664 li
165.313 423.897 mo
164.547 424.664 li
@
0.368 lw
164.93 427.532 mo
164.93 421.121 li
@
0.092 lw
166.648 423.652 mo
167.415 424.419 li
167.415 423.652 mo
166.648 424.419 li
@
0.368 lw
167.031 427.241 mo
167.031 420.861 li
@
0.092 lw
168.749 423.606 mo
169.516 424.373 li
169.516 423.606 mo
168.749 424.373 li
@
0.368 lw
169.132 429.158 mo
169.132 418.882 li
@
0.092 lw
170.865 423.054 mo
171.632 423.821 li
171.632 423.054 mo
170.865 423.821 li
@
0.368 lw
171.249 430.63 mo
171.249 416.582 li
@
0.092 lw
172.966 422.946 mo
173.733 423.713 li
173.733 422.946 mo
172.966 423.713 li
@
0.368 lw
173.35 431.872 mo
173.35 415.201 li
@
0.092 lw
175.067 420.201 mo
175.834 420.968 li
175.834 420.201 mo
175.067 420.968 li
@
0.368 lw
175.451 423.882 mo
175.451 417.257 li
@
0.092 lw
177.169 419.956 mo
177.935 420.723 li
177.935 419.956 mo
177.169 420.723 li
@
0.368 lw
177.552 430.783 mo
177.552 409.926 li
@
0.092 lw
179.285 419.603 mo
180.052 420.37 li
180.052 419.603 mo
179.285 420.37 li
@
0.368 lw
179.668 421.689 mo
179.668 418.315 li
@
0.092 lw
181.386 419.266 mo
182.153 420.032 li
182.153 419.266 mo
181.386 420.032 li
@
0.368 lw
181.769 425.063 mo
181.769 414.45 li
@
0.092 lw
183.487 419.22 mo
184.254 419.986 li
184.254 419.22 mo
183.487 419.986 li
@
0.368 lw
183.871 423.161 mo
183.871 416.152 li
@
0.092 lw
185.588 418.821 mo
186.355 419.588 li
186.355 418.821 mo
185.588 419.588 li
@
0.368 lw
185.972 424.035 mo
185.972 414.465 li
@
0.092 lw
187.705 418.146 mo
188.471 418.913 li
188.471 418.146 mo
187.705 418.913 li
@
0.368 lw
188.088 429.035 mo
188.088 408.361 li
@
0.092 lw
189.806 416.842 mo
190.573 417.609 li
190.573 416.842 mo
189.806 417.609 li
@
0.368 lw
190.189 421.627 mo
190.189 412.886 li
@
0.092 lw
191.907 415.631 mo
192.674 416.398 li
192.674 415.631 mo
191.907 416.398 li
@
0.368 lw
192.29 426.949 mo
192.29 405.555 li
@
0.092 lw
194.008 415.6 mo
194.775 416.367 li
194.775 415.6 mo
194.008 416.367 li
@
0.368 lw
194.391 423.299 mo
194.391 408.699 li
@
0.092 lw
196.124 414.373 mo
196.891 415.14 li
196.891 414.373 mo
196.124 415.14 li
@
0.368 lw
196.508 426.259 mo
196.508 403.883 li
@
0.092 lw
198.225 413.024 mo
198.992 413.791 li
198.992 413.024 mo
198.225 413.791 li
@
0.368 lw
198.609 422.164 mo
198.609 405.003 li
@
0.092 lw
200.326 412.87 mo
201.093 413.637 li
201.093 412.87 mo
200.326 413.637 li
@
0.368 lw
200.71 426.688 mo
200.71 400.954 li
@
0.092 lw
202.428 412.671 mo
203.194 413.438 li
203.194 412.671 mo
202.428 413.438 li
@
0.368 lw
202.811 421.811 mo
202.811 404.558 li
@
0.092 lw
204.544 409.45 mo
205.311 410.217 li
205.311 409.45 mo
204.544 410.217 li
@
0.368 lw
204.927 419.312 mo
204.927 400.709 li
@
0.092 lw
206.645 408.76 mo
207.412 409.527 li
207.412 408.76 mo
206.645 409.527 li
@
gsave
211.261 392.734 mo
72.313 392.734 li
72.313 475.735 li
211.261 475.735 li
cp
clp
0.368 lw
207.029 409.634 mo
207.029 408.653 li
@
0.092 lw
[1.1042 1.1042 ] 0 dsh
72.314 423.851 mo
211.246 423.851 li
@
grestore
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/parenleft <1C60D8A8C9B81F2C36CCD20CF8942181AC7F4474F2382F7D30DE
700E9D560AD8BD19EE22EACC9412684566AC63B0B33E5FC85E602E759FFC49BF
47306AE7BD9165A4E1D3> |-
/parenright <1C60D8A8C9B81F2C36CCD20CF894218194033859F410DA60583
B3351294315C6F5C4ACE205E4813D6F508658462783E35F08D53213E9F0ED798
4671681D402251A6FDC72> |-
/C <1C60D8A8C9B6079FED21EC1DA43783C3C67A5FBA5FB885DEE16CDCDCAF1B
7E5C168D0377F501B09EEE06FA7720C35D9E5B5FBCE148C17092F43DAB7E2D94
E9FE9DCFFADEA91F9C52F49E3053420DCED72662293A521E028C39AF83F75FC5
4A> |-
/N <1C60D8A8C9B6079F1E210C2F9D6786425CC99EBE4B6CD195D3C159170B14
2780B60B004B88EC635D5140089E50EAFFA241767EA05CB13B768D326E39D0A6
3970CC75B69D7BE71D789A78E82369A15910> |-
/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C2
0943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B3
9C94B8CCFF41619BA5DC67957F7F81> |-
/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0E6DDDCF2A0054E6BC2F76C
64CEFA918C4E8C0A17BF13FEEAAFA3992570A221EB29D874F6372AE0D5147B81
D12AD995155CFC83207D350E887D4FEBD8084F48B3CC6796B4C5DD7C46D97C8A
BA91E1F709B61796E472D133E1651C4F266523B863949A58DEF11F7CBF27A2FD
BD87B6510960625D3CE0D8C2C732863F2494E0D388028B3EF679DC21468C0061
1AD0512E72DA1636CB7A> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA400CC7CAD541AB907F903F935F
123595D5AAC76B7423BF56DAA953AABB30D3C158CBC49165B8067C6456A899E4
3A57DF6E4E8AB8002AB2FFE795F17DA3C0165F34038912EBD94962135F448EB9
A90E2C7E6E7F31818C09B9ED66D47DE4FCBEA13796BDA6590474BAAB3926D1FD
12190612E017AA015628D2E79EA8BD9BA8890ADD2020DB8778488A172689E9B4
E5800C4FC32EAC7FC1BF3EF2690C8233D8F11C29611AE962> |-
/b <1C60D8A8C9B7EF327C10274A017D50D0B79D520E8A6202A86E3798B68C88
3F2A00A228A8D3BD4B72A579020E8C18FEDCA09FC0E3429D99B1C24ADCD0AC4E
EFC3A966737F961C9202D8EDD44B44A693FE51414C15324869700E53C7B38758
7F8318D8232F82D503103EE5B820B0DF0BE22D1B4656A098694F40E8D44D99C4
61B751FBE10F9873814343E4DE07A8CCC094D2DC9819E5D7C44D788CB7F4378E
064E14049D09F8686693B208AE85DDCE327373F5E246A50D857DC427EA> |-
/d <1C60D8A8C9B7EF32A0BAF021E6128CBCD055133316849E00736C24057076
3FFBEAA146CA9297CF7D3847B7CF1BE84FB2A37E5E555C53A806DE551FF53E55
D61D00981406A03EADD7AE8D33EF7217E17615CDCA7C18A3E3E1E13B179B4308
BD250D1E864A8A86D9BF7E50C7EC9522C99BD55A4F1A52E8A636FC1CA9AC7BFB
9D973089D39AA376C816268115093BC648CEB265DF83> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D3724916322C63953AF89B727882819DFC99951D61BFC3A47117C933D
D3648A021C5AF4E9570A53> |-
/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8
891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2
F253DF8B3192240780F3E221EB68A6> |-
/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C
0EAF> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706F
E45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC7542
58679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52D
A81BBE025DB4544A719A686DB3A0393D2301EEF964B14766F22C4A5827> |-
/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA56325
4EC441C4BC3817B6ABCAA45C3FADDF2A0C1FDBAFB2BC83F47DAFA77A786BA902
BA43197292E50CF57803A333B50FFCC316B4278D48D0702F544078D86E929B14
A38322C9A0C5BF9B9E5C> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF322792C3BF0D38904A73F4440F6D92D5F5AE09CC018066
468E681543C8F047ACFD615B747546B5480444F746C2E0CD698A8961C13AF2BF
3940EE05278AAEFC066B11F108A32A247BB7A1777E1A71A35D0F71427779DCE4
A1F61E27FEB716A84B084E0A293D7F37477EB4DB407CE06D6E55EF820764AC64
86> |-
/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A8460FEBA256258B5C852281
3839FED92DE3C47FB08E82DAD239D7D316E4DB98949C40B450B767A1D87B0ABE
0011CCD021B6229F454B1FF5E328C5CF8EC8EFFD81D3D2892F60438084072E44
AFC3709CC245EE12E4AC5F88F724A26A331F44C1FA0DE44324AECA> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D
1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E
99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E5
6946239346863C679F19> |-
/w <1C60D8A8C9B6079F3517E075E924A0EC154FF14393B5B0575475B515F428
794F8D3565E3C687B605880F5C4904C3BD11AE4A60F2EA0654E6A4CE7382D133
3411130E26BAF080637F66342F1D49510FE0B71E35474FA143> |-
/y <1C60D8A8C9B7A73DB586573D0157E99900164D3426B7076627BC2EECA012
86D768DC747555489A92E6150F2562090A782510749223A2D01B0EE6374EEA8F
B8F18250484D2C6B565CDCA8D95B100B7B1E0289ED25E0E350438F56B28A332A
DDF034CB8EDC264C3ABAA85278C66F3E4B6419> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 33 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 67 /C put
dup 78 /N put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 98 /b put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[32{/.notdef}rp /minus /space 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 
/slash /zero /one /two /three /four /five /six 
/.notdef /eight 3{/.notdef}rp /less /.notdef /greater 4{/.notdef}rp /C 
7{/.notdef}rp /K 2{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S 
/T 12{/.notdef}rp /a /b /.notdef /d /e /f 
2{/.notdef}rp /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /w 
/.notdef /y 134{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
98.8915 484.445 mo
(Cluster!Number!\(ordered!by!steepest!slope\))
[3.189 0.980553 2.4558 2.20845 1.2279 2.4558 1.47079 1.2279 3.189 2.4558 3.67924 2.4558 
2.4558 1.47079 1.22791 1.47079 2.45578 1.47079 2.45581 2.45578 1.47079 2.45581 2.45578 1.22791 
2.4558 2.20845 1.22791 2.20844 1.22791 2.4558 2.4558 2.4558 2.4558 2.20845 1.22789 1.22791 
2.20845 0.980545 2.45581 2.45578 2.45581 0 ]xsh
BDXWHW+Helvetica*1 [0 -4.4169 -4.4169 0 0 0 ]msf
59.2316 472.145 mo
(Powerlaw!law!Slope!fit!to!inner!0.1!r)
[-2.94611 -2.45581 -3.189 -2.45578 -1.47079 -0.98056 -2.45581 -3.189 -1.22791 -0.98053 -2.45581 -3.189 
-1.22791 -2.94611 -0.98056 -2.45578 -2.45581 -2.45578 -1.22791 -1.22791 -0.98053 -1.22791 -1.22791 -1.22791 
-2.45578 -1.22791 -0.98056 -2.45578 -2.45581 -2.45578 -1.47079 -1.22791 -2.45578 -1.22791 -2.45581 -1.22787 
0 ]ysh
BDXWHW+Helvetica*1 [0 -3.4967 -3.4967 0 0 0 ]msf
61.44 402.396 mo
(180)
[-1.94415 -1.94418 0 ]ysh
255.123 475.719 mo
394.055 475.719 li
394.055 392.734 li
255.123 392.734 li
cp
false sop
1 gry
f
255.123 475.719 mo
255.123 392.734 li
394.056 392.734 li
394.056 475.719 li
255.123 475.719 li
@
255.123 475.719 mo
394.056 475.719 li
255.123 392.734 mo
394.056 392.734 li
255.123 475.719 mo
255.123 392.734 li
394.056 475.719 mo
394.056 392.734 li
255.123 475.719 mo
394.056 475.719 li
255.123 475.719 mo
255.123 392.734 li
273.251 475.719 mo
273.251 474.323 li
273.251 392.734 mo
273.251 394.114 li
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
272.024 480.35 mo
(1)sh
255.123 475.719 mo
255.123 475.013 li
255.123 392.734 mo
255.123 393.424 li
260.583 475.719 mo
260.583 475.013 li
260.583 392.734 mo
260.583 393.424 li
265.337 475.719 mo
265.337 475.013 li
265.337 392.734 mo
265.337 393.424 li
269.509 475.719 mo
269.509 475.013 li
269.509 392.734 mo
269.509 393.424 li
273.251 475.719 mo
273.251 475.013 li
273.251 392.734 mo
273.251 393.424 li
355.025 475.719 mo
355.025 474.323 li
355.025 392.734 mo
355.025 394.114 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
352.571 480.35 mo
(10)
[2.45581 0 ]xsh
297.881 475.719 mo
297.881 475.013 li
297.881 392.734 mo
297.881 393.424 li
312.267 475.719 mo
312.267 475.013 li
312.267 392.734 mo
312.267 393.424 li
322.496 475.719 mo
322.496 475.013 li
322.496 392.734 mo
322.496 393.424 li
330.41 475.719 mo
330.41 475.013 li
330.41 392.734 mo
330.41 393.424 li
336.897 475.719 mo
336.897 475.013 li
336.897 392.734 mo
336.897 393.424 li
342.372 475.719 mo
342.372 475.013 li
342.372 392.734 mo
342.372 393.424 li
347.111 475.719 mo
347.111 475.013 li
347.111 392.734 mo
347.111 393.424 li
351.283 475.719 mo
351.283 475.013 li
351.283 392.734 mo
351.283 393.424 li
355.025 475.719 mo
355.025 475.013 li
355.025 392.734 mo
355.025 393.424 li
255.123 462.591 mo
255.814 462.591 li
394.056 462.591 mo
393.35 462.591 li
255.123 464.585 mo
255.814 464.585 li
394.056 464.585 mo
393.35 464.585 li
255.123 466.808 mo
255.814 466.808 li
394.056 466.808 mo
393.35 466.808 li
255.123 469.339 mo
255.814 469.339 li
394.056 469.339 mo
393.35 469.339 li
255.123 472.253 mo
255.814 472.253 li
394.056 472.253 mo
393.35 472.253 li
255.123 475.719 mo
255.814 475.719 li
394.056 475.719 mo
393.35 475.719 li
255.123 462.591 mo
256.504 462.591 li
394.056 462.591 mo
392.66 462.591 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
249.679 464.232 mo
(10)
[2.4558 0 ]xsh
255.123 449.463 mo
255.814 449.463 li
394.056 449.463 mo
393.35 449.463 li
255.123 441.779 mo
255.814 441.779 li
394.056 441.779 mo
393.35 441.779 li
255.123 436.335 mo
255.814 436.335 li
394.056 436.335 mo
393.35 436.335 li
255.123 432.102 mo
255.814 432.102 li
394.056 432.102 mo
393.35 432.102 li
255.123 428.651 mo
255.814 428.651 li
394.056 428.651 mo
393.35 428.651 li
255.123 425.738 mo
255.814 425.738 li
394.056 425.738 mo
393.35 425.738 li
255.123 423.207 mo
255.814 423.207 li
394.056 423.207 mo
393.35 423.207 li
255.123 420.968 mo
255.814 420.968 li
394.056 420.968 mo
393.35 420.968 li
255.123 418.974 mo
255.814 418.974 li
394.056 418.974 mo
393.35 418.974 li
255.123 445.23 mo
256.504 445.23 li
394.056 445.23 mo
392.66 445.23 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
249.679 446.871 mo
(25)
[2.4558 0 ]xsh
255.123 432.102 mo
255.814 432.102 li
394.056 432.102 mo
393.35 432.102 li
255.123 424.434 mo
255.814 424.434 li
394.056 424.434 mo
393.35 424.434 li
255.123 418.974 mo
255.814 418.974 li
394.056 418.974 mo
393.35 418.974 li
255.123 414.757 mo
255.814 414.757 li
394.056 414.757 mo
393.35 414.757 li
255.123 411.306 mo
255.814 411.306 li
394.056 411.306 mo
393.35 411.306 li
255.123 408.377 mo
255.814 408.377 li
394.056 408.377 mo
393.35 408.377 li
255.123 405.846 mo
255.814 405.846 li
394.056 405.846 mo
393.35 405.846 li
255.123 403.622 mo
255.814 403.622 li
394.056 403.622 mo
393.35 403.622 li
255.123 401.629 mo
255.814 401.629 li
394.056 401.629 mo
393.35 401.629 li
255.123 432.102 mo
256.504 432.102 li
394.056 432.102 mo
392.66 432.102 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
249.679 433.743 mo
(50)
[2.4558 0 ]xsh
255.123 418.974 mo
255.814 418.974 li
394.056 418.974 mo
393.35 418.974 li
255.123 411.306 mo
255.814 411.306 li
394.056 411.306 mo
393.35 411.306 li
255.123 405.846 mo
255.814 405.846 li
394.056 405.846 mo
393.35 405.846 li
255.123 401.629 mo
255.814 401.629 li
394.056 401.629 mo
393.35 401.629 li
255.123 398.178 mo
255.814 398.178 li
394.056 398.178 mo
393.35 398.178 li
255.123 395.249 mo
255.814 395.249 li
394.056 395.249 mo
393.35 395.249 li
255.123 392.734 mo
255.814 392.734 li
394.056 392.734 mo
393.35 392.734 li
255.123 418.974 mo
256.504 418.974 li
394.056 418.974 mo
392.66 418.974 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
247.225 420.615 mo
(100)
[2.4558 2.4558 0 ]xsh
255.123 405.846 mo
255.814 405.846 li
394.056 405.846 mo
393.35 405.846 li
255.123 398.178 mo
255.814 398.178 li
394.056 398.178 mo
393.35 398.178 li
255.123 392.734 mo
255.814 392.734 li
394.056 392.734 mo
393.35 392.734 li
255.123 405.846 mo
256.504 405.846 li
394.056 405.846 mo
392.66 405.846 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
247.225 407.487 mo
(200)
[2.4558 2.4558 0 ]xsh
255.123 392.734 mo
255.814 392.734 li
394.056 392.734 mo
393.35 392.734 li
255.123 398.178 mo
256.504 398.178 li
394.056 398.178 mo
392.66 398.178 li
false sop
0 gry
@
true sop
0 gry
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
247.225 399.819 mo
(300)
[2.4558 2.4558 0 ]xsh
255.123 475.719 mo
394.056 475.719 li
255.123 392.734 mo
394.056 392.734 li
255.123 475.719 mo
255.123 392.734 li
394.056 475.719 mo
394.056 392.734 li
false sop
0 gry
@
gsave
394.071 392.734 mo
255.123 392.734 li
255.123 475.735 li
394.071 475.735 li
cp
clp
336.851 399.006 mo
335.44 399.006 li
336.146 400.908 mo
336.146 396.782 li
339.581 416.29 mo
336.652 416.29 li
338.139 417.977 mo
338.139 413.683 li
313.739 407.533 mo
311.178 407.533 li
312.482 408.837 mo
312.482 405.862 li
318.401 421.735 mo
315.81 421.735 li
317.144 422.916 mo
317.144 420.615 li
338.615 399.267 mo
335.21 399.267 li
336.943 401.276 mo
336.943 397.396 li
303.985 418.928 mo
300.887 418.928 li
302.482 416.658 mo
302.482 421.321 li
315.334 430.814 mo
313.218 430.814 li
314.307 431.703 mo
314.307 430.308 li
355.393 465.321 mo
348.415 465.321 li
352.065 466.333 mo
352.065 464.309 li
341.498 403.791 mo
340.026 403.791 li
340.762 406.153 mo
340.762 401.583 li
327.818 400.279 mo
323.693 400.279 li
325.364 402.074 mo
325.364 398.592 li
306.73 424.633 mo
304.599 424.633 li
305.688 425.508 mo
305.688 423.498 li
344.979 445.92 mo
339.596 445.92 li
342.495 446.549 mo
342.495 445.215 li
313.248 446.304 mo
311.285 446.304 li
312.282 446.672 mo
312.282 445.598 li
282.284 444.724 mo
281.793 444.724 li
282.039 445.123 mo
282.039 444.371 li
343.829 409.236 mo
339.535 409.236 li
341.375 411.735 mo
341.375 406.858 li
314.445 410.509 mo
312.236 410.509 li
313.724 411.643 mo
313.724 409.159 li
303.633 455.613 mo
300.918 455.613 li
302.222 457.193 mo
302.222 454.509 li
304.982 462.468 mo
304.522 462.468 li
304.752 464.968 mo
304.752 440.491 li
324.505 423.836 mo
322.818 423.836 li
323.677 425.139 mo
323.677 422.578 li
323.984 430.845 mo
320.871 430.845 li
322.236 431.749 mo
322.236 429.234 li
318.831 414.404 mo
317.328 414.404 li
318.095 415.508 mo
318.095 413.407 li
314.23 431.151 mo
309.997 431.151 li
312.328 431.949 mo
312.328 430.4 li
357.387 432.332 mo
354.565 432.332 li
356.006 433.605 mo
356.006 431.121 li
328.263 415.738 mo
325.732 415.738 li
327.021 417.134 mo
327.021 414.281 li
325.287 460.06 mo
323.37 460.06 li
324.321 460.904 mo
324.321 459.263 li
324.904 408.407 mo
322.834 408.407 li
323.892 410.11 mo
323.892 406.766 li
336.636 397.703 mo
334.489 397.703 li
335.578 399.344 mo
335.578 395.51 li
315.825 415.616 mo
313.57 415.616 li
314.721 417.533 mo
314.721 413.484 li
296.823 457.085 mo
295.044 457.085 li
295.98 457.745 mo
295.98 456.533 li
336.038 425.369 mo
334.244 425.369 li
335.149 427.164 mo
335.149 423.805 li
356.957 406.536 mo
353.537 406.536 li
355.285 408.223 mo
355.285 404.987 li
326.698 450.966 mo
325.303 450.966 li
326.008 451.549 mo
326.008 449.417 li
333.953 413.898 mo
326.852 413.898 li
330.579 415.232 mo
330.579 412.61 li
333.692 432.317 mo
332.419 432.317 li
332.956 433.314 mo
332.956 431.366 li
309.506 452.346 mo
307.053 452.346 li
308.218 453.45 mo
308.218 451.334 li
319.291 425.047 mo
315.027 425.047 li
316.806 426.32 mo
316.806 423.299 li
298.05 456.272 mo
295.673 456.272 li
296.9 456.625 mo
296.9 455.03 li
355.5 458.312 mo
351.743 458.312 li
353.66 459.064 mo
353.66 457.53 li
370.745 401.46 mo
367.187 401.46 li
369.027 404.88 mo
369.027 398.055 li
341.176 459.631 mo
340.21 459.631 li
340.685 460.444 mo
340.685 458.465 li
333.37 419.112 mo
331.959 419.112 li
332.68 420.232 mo
332.68 418.023 li
329.766 466.318 mo
328.769 466.318 li
329.275 466.916 mo
329.275 465.781 li
323.002 452.791 mo
321.392 452.791 li
322.205 453.205 mo
322.205 452.392 li
341.483 423.483 mo
340.655 423.483 li
341.069 425.277 mo
341.069 421.719 li
344.121 408.806 mo
340.486 408.806 li
342.326 410.969 mo
342.326 406.828 li
324.567 449.034 mo
323.969 449.034 li
324.26 449.969 mo
324.26 447.531 li
317.957 428.605 mo
316.392 428.605 li
317.267 429.526 mo
317.267 427.747 li
332.864 447.469 mo
331.253 447.469 li
332.066 448.129 mo
332.066 446.84 li
287.253 467.56 mo
285.06 467.56 li
286.318 467.989 mo
286.318 467.177 li
321.637 406.414 mo
319.72 406.414 li
320.717 407.61 mo
320.717 405.294 li
347.679 459.386 mo
347.081 459.386 li
347.387 460.091 mo
347.387 458.726 li
316.239 452.285 mo
315.396 452.285 li
315.825 453.358 mo
315.825 451.288 li
327.235 459.631 mo
324.628 459.631 li
326.039 461.257 mo
326.039 458.159 li
322.052 446.273 mo
320.809 446.273 li
321.438 447.285 mo
321.438 445.368 li
264.893 461.073 mo
264.555 461.073 li
264.724 461.333 mo
264.724 460.812 li
278.941 467.376 mo
277.867 467.376 li
278.435 467.698 mo
278.435 467.054 li
331.529 419.986 mo
329.52 419.986 li
330.533 421.443 mo
330.533 418.1 li
356.037 401.015 mo
354.626 401.015 li
355.332 403.055 mo
355.332 398.853 li
348.077 409.634 mo
346.237 409.634 li
347.157 411.321 mo
347.157 407.871 li
337.971 440.89 mo
335.962 440.89 li
336.974 441.687 mo
336.974 440.123 li
338.906 412.748 mo
338.017 412.748 li
338.461 414.051 mo
338.461 411.153 li
281.993 443.114 mo
281.41 443.114 li
281.701 443.374 mo
281.701 442.868 li
319.92 472.253 mo
319.429 472.253 li
319.628 472.759 mo
319.628 471.793 li
339.274 410.846 mo
337.909 410.846 li
338.599 412.165 mo
338.599 409.067 li
@
[1.1042 1.1042 ] 0 dsh
255.123 436.335 mo
394.056 436.335 li
@
grestore
true sop
0 gry
true set_gvm
%ADOBeginSubsetFont: RXMAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
BDXWHW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B64EDF884A7D8E901D2F4533C16A14B652E2E01CB0C4A82BD4
AE8D918B8A9135C63318FE8084BF228A8B1FD8F9> |-
/c <1C60D8A8C9B7A73D329D14FC5ED04B22BEF11360501EE1499496C476E815
0EC3BDD954DBEADE8E9C14890D9CD9DB76F31AE11D3417AD4A86CFF13437B5FD
BD7396F24B7F94C12C61C297C734538546A29AF94483114D66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHW+Helvetica /Encoding get
dup 86 /V put
dup 99 /c put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHW+Helvetica*1 
[32{/.notdef}rp /minus /space 6{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 
/slash /zero /one /two /three /four /five /six 
/.notdef /eight 3{/.notdef}rp /less /.notdef /greater 4{/.notdef}rp /C 
7{/.notdef}rp /K 2{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S 
/T /.notdef /V 10{/.notdef}rp /a /b /c /d 
/e /f 2{/.notdef}rp /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y 134{/.notdef}rp]
BDXWHW+Helvetica nf
BDXWHW+Helvetica*1 [4.4169 0 0 -4.4169 0 0 ]msf
316.239 484.445 mo
(kT!\(keV\))
[2.20844 2.6987 1.22791 1.47079 2.20844 2.45581 2.94611 0 ]xsh
BDXWHW+Helvetica*1 [0 -4.4169 -4.4169 0 0 0 ]msf
245.4 446.104 mo
(K!\(keV!cm)
[-2.94611 -1.22791 -1.47079 -2.20844 -2.45581 -2.94611 -1.22791 -2.20844 0 ]ysh
BDXWHW+Helvetica*1 [0 -3.4967 -3.4967 0 0 0 ]msf
243.192 425.83 mo
(2)sh
BDXWHW+Helvetica*1 [0 -4.4169 -4.4169 0 0 0 ]msf
245.4 423.897 mo
(\))sh
true set_gvm
%ADOBeginSubsetFont: JHZAAA+CMBX9 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
BDXWHX+CMBX9 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B08A95FB066076D5BF156C9657125643D15EA36861619CAC
C9BBD7AC0FCCBEEA80BD08E4D0AB6EA96A08C4BB2120A75E60F35951A553F7EF
7B46F38D245A5D3FF72F1D2AEE8FD4471A473893541A2560FF3AD2C1D1E7F56F
ACE0B66D35616E4D95A4792E88FAD850ABDDF28D24B52FA3CA517937DA48ACD7
49C77910E5089F5305D867629B948ABDDC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHX+CMBX9 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHX+CMBX9*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two 19{/.notdef}rp /F 32{/.notdef}rp 
/g /.notdef /i 150{/.notdef}rp]
BDXWHX+CMBX9 nf
BDXWHX+CMBX9*1 [8.9664 0 0 -8.9664 0 0 ]msf
54.6 501.833 mo
(Fig.2.)
[6.72304 3.0028 5.28296 6.12221 5.28297 0 ]xsh
BDXWHV+CMTI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
87.2395 501.833 mo
(Left)
[5.28118 4.19807 2.88182 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: TCUBAA+CMR9 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
BDXWHU+CMR9 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B08A9580C822583BC370487009D181CBA696B9C696
B29EB6378D54D288FED8B33B82841099847121534A760DADECBC03603D6C07BD
280D3BDFFEA365D583B0E1A16C8A40A71A1D59223A89B268D6E241812A8AC9DF
AD85469EEEB328D3DD40DEFE005EAFE3CFBF588F60> |-
/parenright <1C60D8A8C9B08A9580C822583BC370487009D181CBA691147F6
F8E8C42F265A062451575BEC72F3C54B75B3042D03FE51288E9DEA2DB7D89B60
C5AB212AD0328C2FED2452C8D71307D8BEB902AB741F57EB271E260A8DDAB60A
642C0AB4B9BA1A462E698D6BDE5146B5F8358CAA639> |-
/hyphen <1C60D8A8C9B08A9599C1D3CEECCC74D0CFD8C2AC97412B76BD43268
B81DC0F2D8E3FDD90> |-
/zero <1C60D8A8C9B08A95D419B460E0294972EF5F121EE28A7FEAF7C71B887
9934DBD339B930E926190A5F9922E29F2B0785DD4B6A334B40B8FB99C5F70AB0
2254A541CBD6884B316F87A1A039FDA9A55D8E732075B5E54FBF4FB4A196B943
2C402375B088D302F286FA26D6A614648174C19778BA3B543ADDACE04717005A
EE9C3875EF06AA338CDC2BB9AD9868F3FCE0F749A68D0AB3408A899983688> |-
/one <1C60D8A8C9B08A95D419B460E029B72392E01E56B960EF3E4B4C88EC8E
0A9654A14FAE286819FB7980B067CE83205A184FA519755E7894370B0A3EA7EF
42D78112C6FA7138100269F116B73624DC9EBE665D6A425D35EDEC5A94DAA5> |-
/G <1C60D8A8C9B08A94757772EC50DEA67D4B8BC1507544BF2EBB60DD48DA99
846D078B870505C6EA14C1380E8875DCA4B0C0C67BDB6C71D4F1E225176D2FD7
1F015657890432BCD90F5C9D03C47178FC525D5D220660901A5796F1E3FC2D7C
7EA9CD304AF112FD3354D22F912C80CEBF111300BFB04D6FF496C89AB58E031B
5FB9A405909D3CE6D3FE7B4E15555CBF423B29E6EDBD5D7E7CC47235B2E2FCE0
5EF6622FDE3A6D6C472CCC00A4F5C331> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHU+CMR9 /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 71 /G put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHU+CMR9*1 
[11{/.notdef}rp /ff /fi /fl 26{/.notdef}rp /parenleft /parenright 3{/.notdef}rp 
/hyphen /period /.notdef /zero /one /.notdef /three /four 
5{/.notdef}rp /colon 6{/.notdef}rp /A /.notdef /C 3{/.notdef}rp /G 
10{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a /b /c 
/d /e /f /g /h /i /j /.notdef 
/l /m /n /o /p /q /r /s 
/t /u /v /w /.notdef /y /z 133{/.notdef}rp]
BDXWHU+CMR9 nf
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
102.599 501.833 mo
(:Thisplotshowstheslopesofthepowerlaw\014ttotheclustertempera-)
[2.51601 6.59751 5.14761 2.51601 6.59657 5.16016 2.51601 4.56128 6.48265 3.59641 5.14761 4.32097 
6.59752 6.59656 3.61432 5.14761 6.83867 3.59642 2.51599 4.56128 5.40045 4.07883 6.59657 4.56126 
5.75998 3.60263 5.14761 6.83868 5.40045 4.32098 6.35721 4.0788 6.47995 2.51602 4.32095 9.59769 
5.14758 6.36252 3.61429 7.44131 3.61429 5.14758 6.83868 4.08151 2.51599 5.16016 3.59641 3.60266 
4.07883 6.47995 3.61429 4.07794 7.70306 5.40045 4.0788 3.59998 4.56125 0 ]xsh
54.5991 512.753 mo
(turepro\014lewithin0.1)
[3.60444 5.13774 3.62236 6.71853 5.13773 3.62237 4.56127 5.16016 2.51601 6.83868 6.59752 2.51601 
3.60443 5.13774 2.51601 7.79987 4.56128 2.51601 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: ZJXAAA+CMMI9 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ZJXAAA+CMMI9 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI9) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 27 /sigma put
dup 114 /r put
def
/FontBBox {-29 -250 1075 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 464] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [74] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/sigma <1C60D8A8C9B08A95F9EADC8FEC59DE139354D76184D7F2BE2207BFED
CFADB7C49BD192F90650E5F15653373FAC54E915D392A46A5E7D77773017E5CD
AD829F537EAD94DF0D3FC425627BADBD00819461840D9E3539EFB2B281ED836F
4E94E3749B7C9D02129E6505195D08F5F4B41F731E92AE> |-
/r <1C60D8A8C9B08A95A9DC47FF4553764D6FD72FFC16D2347BC5303A0B9AE5
7023392AD987E5D9D22AAFDB2DC4DED678EA372442BE46883EDED1371887CC65
7F16D032244380C0C599A5AEE76EE6BBA3DD5B0BA1C4E652D7BCFE853299E5F1
6CADD192EE5B3EF57BB4FBC4DE2C76832F72C1D0C52D446CBB559810A0F77588
2DCDB11B1EE7ABC47D94F938E879EE15920E8B5E7B75CB98ACF3C02301F36DA5
D3A4DE24BCF9A9FAEAD04798864C4AC9F5CA9324B0> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/BDXWID+CMMI9 /ZJXAAA+CMMI9 findfont ct_VMDictPut
/BDXWID+CMMI9*1 
[27{/.notdef}rp /sigma 86{/.notdef}rp /r 141{/.notdef}rp]
BDXWID+CMMI9 nf
BDXWID+CMMI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
144.238 512.753 mo
(r)sh
true set_gvm
%ADOBeginSubsetFont: JWFAAA+CMR6 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.
systemdict begin
BDXWHY+CMR6 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B08A9595A997F8ECDF56F39F9CAF99CCDED34EF9697ABD7700
95E23799E0D04F147D3568DA1376C0687D6D46FE0625E1B810AB7F21AD8BDD8C
5FA98050DFC60367B1EF266689E4FBC112473D58A175B724C6AD4E429D07EDB3
2C05F77E032822F9640F> |-
/r <1C60D8A8C9B08A95A0A3AB1E3D9B47A5B1DF1897D899F405627B5D9A0AF1
9814757113D436FE5433BB865723480622ECCEA99DB55C55288B894F208D296F
FA1CB4C35353B6DF7042D0CC4E90D1AD5F0DCC79A63A0101A590C840C017663D
B63E58ABD36B31964C29B39ADAD296486EC99B3B8BA12135531587> |-
/v <1C60D8A8C9B08A95E7A8F083A188CC4F68A563F4CAAEF641BBA9F1EF2DD5
25E8963B5A31CD4BE74EFEEC467E5070220C8D27F0221D3251182A5ECD8BBE18
8B3D1B7026608FC488A0F5F12750F4E0DF02C325D5477BC21D1D2B4887B23EF1
9158BAE21969A14963BE1F8A16684F40CF1FC8F1C8951D18A7363608936E3015
7BBDF65559D8B8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BDXWHY+CMR6 /Encoding get
dup 105 /i put
dup 114 /r put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/BDXWHY+CMR6*1 
[48{/.notdef}rp /zero /.notdef /two 54{/.notdef}rp /i 8{/.notdef}rp /r 
3{/.notdef}rp /v 137{/.notdef}rp]
BDXWHY+CMR6 nf
BDXWHY+CMR6*1 [5.9776 0 0 -5.9776 0 0 ]msf
148.44 513.713 mo
(vir)
[3.84299 2.16093 0 ]xsh
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
157.68 512.753 mo
(.Thecontinuousrangeofvaluessuggeststhatthereisno)
[5.27586 6.59752 5.15118 6.83868 4.08151 4.56128 4.91985 3.60265 2.51601 4.91986 5.15118 4.56128 
5.15118 6.23613 3.6358 4.56128 5.15118 4.56128 6.83868 4.56128 5.51965 4.43576 4.56125 2.51602 
5.15118 4.07883 6.35626 3.59641 5.15118 4.56128 4.56128 4.07883 3.59641 3.60266 6.47644 3.60263 
5.15118 4.56128 6.24234 3.60266 5.15118 4.07883 3.6358 6.71854 2.51599 6.35626 5.15118 0 
]xsh
54.5996 523.673 mo
(universaltemperaturepro\014le.Gray\(lighter\)pointshaveaslopewhichisinconsis-)
[5.14133 5.14133 2.51601 4.67604 4.07882 3.62595 3.59641 4.56128 5.63541 3.60802 4.07883 7.69678 
5.40045 4.07883 3.59995 4.56127 3.60264 5.14133 3.62595 7.19824 5.16016 3.62595 4.56128 5.14134 
2.51601 4.07883 5.63541 7.19553 3.59996 4.32097 8.03577 3.60802 2.51601 2.51599 4.56128 4.91985 
3.60265 4.07883 3.59995 6.72296 5.40045 4.56126 2.51601 4.91985 3.60265 6.71671 5.16016 4.32098 
4.67603 7.07806 7.68073 3.59637 2.51602 4.56125 5.40045 7.31839 6.5975 5.14133 2.51602 3.8421 
8.16031 2.51602 6.83685 2.51602 5.16016 4.08151 4.56128 5.14133 3.59644 2.51602 3.59641 0 
]xsh
54.5996 534.713 mo
(tent\(atthe1-)
[3.60534 4.11648 4.91985 6.72295 3.60533 4.56128 6.84309 3.60265 5.13864 7.19823 4.56128 0 
]xsh
BDXWID+CMMI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
112.559 534.713 mo
(\033)sh
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
121.319 534.713 mo
(level\)witha\015atpro\014le.)
[2.51511 4.0573 4.67604 4.07883 2.51511 6.84311 6.61276 2.51511 3.60263 8.39972 7.80084 5.16016 
4.56845 6.84309 5.16016 3.59996 4.56844 5.16016 2.51511 4.0573 0 ]xsh
BDXWHV+CMTI9*1 [8.9664 0 0 -8.9664 0 0 ]msf
222.358 534.713 mo
(Right)
[6.48175 2.88182 4.19807 4.68219 0 ]xsh
BDXWHU+CMR9*1 [8.9664 0 0 -8.9664 0 0 ]msf
243.598 534.713 mo
(:Thisplotshowstheglobalcluster)
[5.75557 6.59752 5.15747 2.51599 6.95612 5.16016 2.51602 4.56125 6.84311 3.59641 5.15747 4.32098 
6.59753 6.83597 3.62415 5.15747 7.31839 4.56128 2.51599 4.56128 5.15747 4.56125 5.87573 4.08151 
2.51599 5.16016 3.59644 3.60263 4.07883 0 ]xsh
54.6005 545.634 mo
(temperatureversusthecentralentropy.Theclearseparationofthetwodistribu-)
[3.60713 4.07882 7.69588 5.40046 4.07882 3.59995 4.56127 3.60265 5.14043 3.62505 7.67883 4.67604 
4.07882 3.59995 3.59641 5.16016 7.19643 3.60263 5.14044 7.67883 4.08151 4.07883 4.91985 3.60265 
3.62506 4.56128 6.116 4.07883 4.91986 3.60263 3.62506 4.56128 4.91983 4.19635 5.99585 6.59753 
5.14041 7.67886 4.08148 2.51602 4.07883 4.56125 7.44025 3.59641 4.07883 5.16016 4.56128 3.59995 
4.56128 3.60263 2.51602 4.56125 8.88031 4.56128 6.47995 3.60266 5.14044 7.67883 3.36234 6.35721 
8.16129 5.16016 2.51602 3.59644 3.60712 3.62506 2.51602 5.14041 5.14044 0 ]xsh
54.6005 556.554 mo
(tionssuggeststhismaybearobustmethodforidentifyingcoolingcoreclusters.)
[3.60265 2.516 4.57293 5.16016 6.71672 3.59641 5.16016 4.57294 4.57292 4.06179 3.59551 3.60265 
6.83597 3.60265 5.16016 2.51601 6.71672 7.67526 4.32098 7.91649 5.40045 7.19824 7.68069 3.59995 
4.57294 5.16016 5.16016 3.59641 6.60281 7.67526 4.0618 3.60263 5.16016 4.80069 8.16031 2.7598 
4.57294 6.83951 2.51959 5.16016 4.0618 4.91983 3.60266 2.51599 2.77954 4.91635 2.51959 5.16016 
7.68069 4.08148 4.80069 4.56128 2.51959 2.51959 5.16016 7.80084 4.08151 4.57291 3.56857 7.31839 
4.08151 2.51959 5.16016 3.59549 3.60266 4.06177 3.56854 3.59552 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *CustomPageSize True
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
